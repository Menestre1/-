#Область ПроцедурыИФункцииФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Инициализация теста
	ИнициализироватьТест();
	
	// Создание интерфейса
	СоздатьИнтерфейсТестирования();
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьТест()
	
	// Модульная структура теста для легкой замены и расширения
	Тест = Новый Структура;
	Тест.Вставить("Вопросы", Новый Массив);
	Тест.Вставить("ТекущийВопрос", 0);
	Тест.Вставить("Ответы", Новый Массив);
	Тест.Вставить("Завершен", Ложь);
	Тест.Вставить("Результат", Неопределено);
	Тест.Вставить("МожетРедактировать", Истина);
	
	// Загрузка вопросов
	Вопросы = Тест.Вопросы;
	ЗагрузитьБазовыеВопросы(Вопросы);
	
	// Сохраняем в контексте формы
	Объект.Тест = Тест;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьБазовыеВопросы(Вопросы)
	
	// Базовые вопросы с поддержкой расширенной разметки
	Вопросы.Добавить("**Вопрос 1:** Понимаете ли вы основные принципы ООП?|n|n- Инкапсуляция|n- Наследование|n- Полиморфизм");
	Вопросы.Добавить("**Вопрос 2:** Считаете ли вы, что паттерн **Singleton** часто используется неправильно?");
	Вопросы.Добавить("**Вопрос 3:** > Важно ли соблюдать **SOLID** принципы в каждом проекте?|n|n*Обоснуйте ваш ответ*");
	Вопросы.Добавить("`Вопрос 4:` Используете ли вы **TypeScript** в ваших проектах и почему?");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИнтерфейсТестирования()
	
	// Очищаем существующие элементы
	УдалитьСуществующиеЭлементы();
	
	// Создаем реквизиты
	СоздатьРеквизитыФормы();
	
	// Основной контейнер
	ОсновнаяГруппа = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ОсновнаяГруппа", ЭтотОбъект, 1, 1, 1);
	
	// Шапка с прогресс-баром
	СоздатьШапкуСПрогрессом(ОсновнаяГруппа);
	
	// Основная область контента
	СоздатьОбластьКонтента(ОсновнаяГруппа);
	
	// Футер с кнопками управления
	СоздатьФутерУправления(ОсновнаяГруппа);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ИсторияОтветов", ДФИ.ОписаниеТипаСтрока(10000));
	СтруктураРеквизитов.Вставить("ТекущийВопросТекст", ДФИ.ОписаниеТипаСтрока(3000));
	СтруктураРеквизитов.Вставить("ПрогрессПроцент", ДФИ.ОписаниеТипаЧисло(3, 0));
	СтруктураРеквизитов.Вставить("Тезис", ДФИ.ОписаниеТипаСтрока(2000));
	СтруктураРеквизитов.Вставить("ПоказанРезультат", ДФИ.ОписаниеТипаБулево());
	СтруктураРеквизитов.Вставить("СтатусПрогресса", ДФИ.ОписаниеТипаСтрока(100));
	
	ДФИ.СоздатьРеквизиты(ЭтотОбъект, СтруктураРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьШапкуСПрогрессом(Родитель)
	
	ГруппаШапки = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ГруппаШапки", Родитель, 2, 1, 0);
	
	// Прогресс-бар
	ГруппаПрогресса = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ГруппаПрогресса", ГруппаШапки, 2, 1, 0);
	
	// Фон прогресс-бара
	ПрогрессФон = ДФИ.СздДекорацияНадпись(ЭтотОбъект, "ПрогрессФон", ГруппаПрогресса, "", Истина);
	ПрогрессФон.ЦветФона = WebЦвета.Серый;
	ПрогрессФон.Высота = 8;
	
	// Заполнение прогресс-бара
	ПрогрессЗаполнение = ДФИ.СздДекорацияНадпись(ЭтотОбъект, "ПрогрессЗаполнение", ГруппаПрогресса, "", Ложь);
	ПрогрессЗаполнение.ЦветФона = WebЦвета.Зеленый;
	ПрогрессЗаполнение.Высота = 8;
	ПрогрессЗаполнение.Ширина = 0;
	
	// Текст прогресса
	ТекстПрогресса = ДФИ.СздПолеНадписи(ЭтотОбъект, "ТекстПрогресса", ГруппаШапки, "Прогресс: 0%", Истина);
	ТекстПрогресса.ПутьКДанным = "СтатусПрогресса";
	
	// Кнопка завершения
	ДФИ.СоздатьКоманду(ЭтотОбъект, "ЗавершитьТест", "Завершить тест", "ЗавершитьТест");
	КнопкаЗавершения = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаЗавершения", ГруппаШапки, "Завершить тест", "ЗавершитьТест");
	КнопкаЗавершения.ЦветКнопки = WebЦвета.Оранжевый;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбластьКонтента(Родитель)
	
	ГруппаКонтента = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ГруппаКонтента", Родитель, 1, 1, 1);
	
	// История ответов
	ГруппаИстории = ДФИ.СздГруппаОбычная(ЭтотОбъект, "ГруппаИстории", ГруппаКонтента, "История ваших ответов");
	ГруппаИстории.Высота = 200;
	ГруппаИстории.РастягиватьПоГоризонтали = Истина;
	
	ПолеИстории = ДФИ.СздПолеНадписи(ЭтотОбъект, "ПолеИстории", ГруппаИстории, "", Истина, "ИсторияОтветов");
	ПолеИстории.МногострочныйРежим = Истина;
	ПолеИстории.РасширенноеРедактирование = Истина;
	ПолеИстории.Высота = 150;
	ПолеИстории.РастягиватьПоГоризонтали = Истина;
	
	// Область текущего вопроса
	ГруппаВопроса = ДФИ.СздГруппаОбычная(ЭтотОбъект, "ГруппаВопроса", ГруппаКонтента, "Текущий вопрос");
	ГруппаВопроса.РастягиватьПоГоризонтали = Истина;
	
	ПолеВопроса = ДФИ.СздПолеНадписи(ЭтотОбъект, "ПолеВопроса", ГруппаВопроса, "", Истина, "ТекущийВопросТекст");
	ПолеВопроса.МногострочныйРежим = Истина;
	ПолеВопроса.РасширенноеРедактирование = Истина;
	ПолеВопроса.Высота = 120;
	ПолеВопроса.РастягиватьПоГоризонтали = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьФутерУправления(Родитель)
	
	ГруппаФутера = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ГруппаФутера", Родитель, 2, 1, 0);
	
	// Команды
	ДФИ.СоздатьКоманду(ЭтотОбъект, "ОтветНет", "Нет", "ОтветНет");
	ДФИ.СоздатьКоманду(ЭтотОбъект, "ОтветДа", "Да", "ОтветДа");
	ДФИ.СоздатьКоманду(ЭтотОбъект, "ДобавитьТезис", "Добавить", "ДобавитьТезис");
	
	// Кнопки ответов
	КнопкаНет = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаНет", ГруппаФутера, "Нет", "ОтветНет");
	КнопкаНет.ЦветКнопки = WebЦвета.Серый;
	КнопкаНет.Ширина = 120;
	
	КнопкаДа = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаДа", ГруппаФутера, "Да", "ОтветДа");
	КнопкаДа.ЦветКнопки = WebЦвета.Зеленый;
	КнопкаДа.Ширина = 120;
	
	// Поле для тезиса
	ПолеТезиса = ДФИ.СздПоле(ЭтотОбъект, "ПолеТезиса", ГруппаФутера, "Ваш тезис:", 1, "Тезис");
	ПолеТезиса.Видимость = Ложь;
	ПолеТезиса.МногострочныйРежим = Истина;
	ПолеТезиса.Высота = 60;
	ПолеТезиса.РастягиватьПоГоризонтали = Истина;
	
	КнопкаДобавить = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаДобавить", ГруппаФутера, "Добавить", "ДобавитьТезис");
	КнопкаДобавить.ЦветКнопки = WebЦвета.Синий;
	КнопкаДобавить.Ширина = 120;
	КнопкаДобавить.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСуществующиеЭлементы()
	
	// Безопасное удаление только динамически созданных элементов
	МассивДляУдаления = Новый Массив;
	
	ДинамическиеЭлементы = Новый Массив;
	ДинамическиеЭлементы.Добавить("ОсновнаяГруппа");
	ДинамическиеЭлементы.Добавить("ГруппаШапки");
	ДинамическиеЭлементы.Добавить("ГруппаПрогресса");
	ДинамическиеЭлементы.Добавить("ГруппаКонтента");
	ДинамическиеЭлементы.Добавить("ГруппаИстории");
	ДинамическиеЭлементы.Добавить("ГруппаВопроса");
	ДинамическиеЭлементы.Добавить("ГруппаФутера");
	
	Для Каждого ИмяЭлемента Из ДинамическиеЭлементы Цикл
		Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
			МассивДляУдаления.Добавить(ИмяЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДляУдаления.Количество() > 0 Тогда
		ДФИ.УдлЭлементы(ЭтотОбъект, МассивДляУдаления);
	КонецЕсли;
	
КонецПроцедуры

// Клиентские процедуры для работы с интерфейсом
&НаКлиенте
Процедура ОбновитьИнтерфейсТеста()
	
	Тест = Объект.Тест;
	Если Тест = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Обновляем все компоненты
	ОбновитьПрогрессИСтатус();
	ОбновитьТекущийВопрос();
	ОбновитьИсториюОтветов();
	УправлятьВидимостьюЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПрогрессИСтатус()
	
	Тест = Объект.Тест;
	
	// Расчет прогресса с защитой от деления на ноль
	Если Тест.Вопросы.Количество() = 0 Тогда
		Прогресс = 0;
		Статус = "Вопросы не загружены";
	Иначе
		Прогресс = Цел(Тест.ТекущийВопрос / Тест.Вопросы.Количество() * 100);
		Статус = "Вопрос " + (Тест.ТекущийВопрос + 1) + " из " + Тест.Вопросы.Количество();
	КонецЕсли;
	
	// Обновляем реквизиты формы
	Объект.ПрогрессПроцент = Прогресс;
	Объект.СтатусПрогресса = Статус;
	
	// Обновляем визуальный прогресс-бар
	Если Элементы.ПрогрессЗаполнение <> Неопределено Тогда
		Элементы.ПрогрессЗаполнение.Ширина = Прогресс;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТекущийВопрос()
	
	Тест = Объект.Тест;
	
	Если Тест.Завершен Тогда
		ТекстВопроса = "Основная часть завершена!|n|nТеперь сформулируйте ваш личный вывод или вопрос для углубления темы.";
	ИначеЕсли Тест.ТекущийВопрос < Тест.Вопросы.Количество() Тогда
		ТекстВопроса = Тест.Вопросы[Тест.ТекущийВопрос];
		// Преобразуем вики-разметку
		ТекстВопроса = ПреобразоватьВикиРазметку(ТекстВопроса);
	Иначе
		ТекстВопроса = "Вопросы не найдены.";
	КонецЕсли;
	
	Объект.ТекущийВопросТекст = ТекстВопроса;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюОтветов()
	
	Тест = Объект.Тест;
	
	ТекстИстории = "";
	Для Каждого Ответ Из Тест.Ответы Цикл
		СимволОтвета = ?(Ответ.Ответ, "✅", "❌");
		ТекстВопроса = ПреобразоватьВикиРазметку(Ответ.Вопрос);
		ТекстИстории = ТекстИстории + СимволОтвета + " " + ТекстВопроса + "|n|n";
	КонецЦикла;
	
	Объект.ИсторияОтветов = ТекстИстории;
	
	// Автоматическая прокрутка к последнему ответу
	Если Элементы.ПолеИстории <> Неопределено Тогда
		Элементы.ПолеИстории.ПрокрутитьКонец();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлятьВидимостьюЭлементов()
	
	Тест = Объект.Тест;
	
	АктивныйТест = Не Тест.Завершен И Тест.Результат = Неопределено;
	ЗавершенСТезисами = Тест.Завершен И Тест.Результат = Неопределено;
	
	Элементы.КнопкаДа.Видимость = АктивныйТест;
	Элементы.КнопкаНет.Видимость = АктивныйТест;
	Элементы.КнопкаЗавершить.Видимость = АктивныйТест;
	
	Элементы.ПолеТезиса.Видимость = ЗавершенСТезисами;
	Элементы.КнопкаДобавить.Видимость = ЗавершенСТезисами;
	
	Если Тест.Результат <> Неопределено Тогда
		ПоказатьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветДа(Команда)
	
	Попытка
		ОтветитьНаВопрос(Истина);
		Сообщить("✅ Ответ 'Да' сохранен");
	Исключение
		Сообщить("❌ Не удалось сохранить ответ: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветНет(Команда)
	
	Попытка
		ОтветитьНаВопрос(Ложь);
		Сообщить("❌ Ответ 'Нет' сохранен");
	Исключение
		Сообщить("❌ Не удалось сохранить ответ: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтветитьНаВопрос(Ответ)
	
	Тест = Объект.Тест;
	
	// Валидация состояния теста
	Если Тест.Завершен Тогда
		ВызватьИсключение "Тест уже завершен";
	КонецЕсли;
	
	Если Тест.ТекущийВопрос >= Тест.Вопросы.Количество() Тогда
		ВызватьИсключение "Достигнут конец списка вопросов";
	КонецЕсли;
	
	// Сохраняем ответ
	НовыйОтвет = Новый Структура;
	НовыйОтвет.Вставить("Вопрос", Тест.Вопросы[Тест.ТекущийВопрос]);
	НовыйОтвет.Вставить("Ответ", Ответ);
	Тест.Ответы.Добавить(НовыйОтвет);
	
	// Переходим к следующему вопросу
	Тест.ТекущийВопрос = Тест.ТекущийВопрос + 1;
	
	// Проверяем автоматическое завершение
	Если Тест.ТекущийВопрос >= Тест.Вопросы.Количество() Тогда
		Тест.Завершен = Истина;
	КонецЕсли;
	
	ОбновитьИнтерфейсТеста();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьТест(Команда)
	
	// Создаем описание оповещения для обработки ответа пользователя
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗавершениеТеста", ЭтотОбъект);
	
	// Получаем текущий прогресс
	Тест = Объект.Тест;
	ТекущийПрогресс = Цел(Тест.ТекущийВопрос / Тест.Вопросы.Количество() * 100);
	
	// Показываем асинхронный вопрос
	ПоказатьВопрос(ОписаниеОповещения, 
		"Вы уверены, что хотите завершить тест досрочно?|n|n" +
		"Прогресс: " + ТекущийПрогресс + "%|n" +
		"Пройдено вопросов: " + Тест.ТекущийВопрос + " из " + Тест.Вопросы.Количество(), 
		РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеТеста(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	// Проверяем ответ пользователя
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат; // Пользователь не уверен — прерываем выполнение
	КонецЕсли;
	
	// Завершаем тест
	Тест = Объект.Тест;
	Тест.Завершен = Истина;
	
	ОбновитьИнтерфейсТеста();
	Сообщить(" Тест завершен досрочно. Добавьте ваш тезис.");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТезис(Команда)
	
	Если СокрЛП(Объект.Тезис) = "" Тогда
		Сообщить("⚠️ Введите текст тезиса перед добавлением.");
		Возврат;
	КонецЕсли;
	
	// Валидация длины тезиса
	Если СтрДлина(СокрЛП(Объект.Тезис)) < 10 Тогда
		Сообщить("⚠️ Тезис слишком короткий. Минимальная длина - 10 символов.");
		Возврат;
	КонецЕсли;
	
	// Добавляем тезис как новый вопрос
	Тест = Объект.Тест;
	Тест.Вопросы.Добавить(" Пользовательский тезис: " + Объект.Тезис);
	
	// Очищаем поле
	Объект.Тезис = "";
	
	// Переходим к расчету результатов
	РассчитатьРезультаты();
	
	Сообщить("✅ Тезис успешно добавлен в базу знаний!");
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРезультаты()
	
	Тест = Объект.Тест;
	
	КоличествоДа = 0;
	Для Каждого Ответ Из Тест.Ответы Цикл
		Если Ответ.Ответ Тогда
			КоличествоДа = КоличествоДа + 1;
		КонецЕсли;
	КонецЦикла;
	
	ВсегоВопросов = Тест.Ответы.Количество();
	Если ВсегоВопросов = 0 Тогда
		Процент = 0;
	Иначе
		Процент = Цел(КоличествоДа / ВсегоВопросов * 100);
	КонецЕсли;
	
	Результат = Процент >= 50;
	
	Тест.Результат = Результат;
	
	// Формируем текст результата
	ТекстРезультата = ?(Результат, 
		" ТЕСТ СДАН!|n|n" +
		"Правильных ответов: " + КоличествоДа + " из " + ВсегоВопросов + " (" + Процент + "%)|n" +
		" Отличный результат! Вы демонстрируете хорошее понимание темы.",
		
		"❌ ТЕСТ НЕ СДАН|n|n" + 
		"Правильных ответов: " + КоличествоДа + " из " + ВсегоВопросов + " (" + Процент + "%)|n" +
		" Рекомендуем повторить материал и попробовать снова."
	);
	
	Сообщить(ТекстРезультата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультат()
	
	Тест = Объект.Тест;
	Если Тест.Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоДа = 0;
	Для Каждого Ответ Из Тест.Ответы Цикл
		Если Ответ.Ответ Тогда
			КоличествоДа = КоличествоДа + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Тест.Результат Тогда
		Сообщение = " Тест сдан!|n|nВы ответили 'Да' на " + КоличествоДа + " из " + Тест.Ответы.Количество() + " вопросов.|n|nОтличный результат!";
	Иначе
		Сообщение = " Тест не сдан|n|nВы ответили 'Да' на " + КоличествоДа + " из " + Тест.Ответы.Количество() + " вопросов.|n|nРекомендуется повторить материал.";
	КонецЕсли;
	
	Сообщить(Сообщение);
	
КонецПроцедуры

&НаКлиенте
Функция ПреобразоватьВикиРазметку(Текст)
	
	// Простой парсер вики-разметки
	Результат = Текст;
	
	// Обработка переносов строк
	Результат = СтрЗаменить(Результат, "|n", Символы.ПС);
	
	// Упрощенная обработка жирного текста
	Результат = СтрЗаменить(Результат, "**", "");
	
	// Обработка маркированных списков
	Результат = СтрЗаменить(Результат, "- ", "• ");
	
	// Обработка цитат
	Результат = СтрЗаменить(Результат, "> ", "");
	
	// Обработка кода
	Результат = СтрЗаменить(Результат, "`", "");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти