#Область ПроцедурыИФункцииФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    // Инициализация формы
    ИнициализироватьФорму();
    
    // Создание интерфейса просмотра дерева - ОДИН РАЗ
    СоздатьИнтерфейсПросмотраДерева();
    
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьФорму()
    
    // Инициализация данных дерева
    ДанныеДерева = Новый Структура;
    ДанныеДерева.Вставить("СтруктураДерева", Неопределено);
    ДанныеДерева.Вставить("КорневойУзел", Неопределено);
    ДанныеДерева.Вставить("Статистика", Неопределено);
    ДанныеДерева.Вставить("ВыбранныйУзел", Неопределено);
    
    Объект.ДанныеДерева = ДанныеДерева;
    
КонецПроцедуры

&НаСервере
Процедура СоздатьИнтерфейсПросмотраДерева()
    
    // Создаем реквизиты формы
    СоздатьРеквизитыФормы();
    
    // Основной контейнер с зеленым заголовком
    ОсновнаяГруппа = ДФИ.СздГруппаОбычная(ЭтотОбъект, "ОсновнаяГруппа", ЭтотОбъект, "Бинарное дерево");
    ОсновнаяГруппа.РастягиватьПоГоризонтали = Истина;
    ОсновнаяГруппа.РастягиватьПоВертикали = Истина;
    
    // Область статистики
    СоздатьОбластьСтатистики(ОсновнаяГруппа);
    
    // Основная область просмотра дерева
    СоздатьОбластьПросмотраДерева(ОсновнаяГруппа);
    
    // Панель управления
    СоздатьПанельУправления(ОсновнаяГруппа);
    
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()
    
    // Создаем реквизиты только если их еще нет
    Если ЭтотОбъект.Реквизиты.Найти("ТекстДерева") = Неопределено Тогда
        СтруктураРеквизитов = Новый Структура;
        СтруктураРеквизитов.Вставить("СтатистикаТекст", ДФИ.ОписаниеТипаСтрока(1000));
        СтруктураРеквизитов.Вставить("ИнформацияОбУзле", ДФИ.ОписаниеТипаСтрока(2000));
        СтруктураРеквизитов.Вставить("ТекстДерева", ДФИ.ОписаниеТипаСтрока(10000));
        СтруктураРеквизитов.Вставить("СтатусОперации", ДФИ.ОписаниеТипаСтрока(500));
        СтруктураРеквизитов.Вставить("ПрогрессОперации", ДФИ.ОписаниеТипаЧисло(3, 0));
        
        ДФИ.СоздатьРеквизиты(ЭтотОбъект, СтруктураРеквизитов);
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура СоздатьОбластьСтатистики(Родитель)
    
    // Группа без заголовка для статистики
    ГруппаСтатистики = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ГруппаСтатистики", Родитель, 2, 1, 0);
    ГруппаСтатистики.Высота = 120;
    ГруппаСтатистики.РастягиватьПоГоризонтали = Истина;
    
    // Поле статистики с черным заголовком
    ПолеСтатистики = ДФИ.СздПолеНадписи(ЭтотОбъект, "ПолеСтатистики", ГруппаСтатистики, "Статистика дерева", Истина, "СтатистикаТекст");
    ПолеСтатистики.МногострочныйРежим = Истина;
    ПолеСтатистики.Высота = 100;
    ПолеСтатистики.РастягиватьПоГоризонтали = Истина;
    ПолеСтатистики.Вид = ВидПоляФормы.ПолеНадписи;
    
КонецПроцедуры

&НаСервере
Процедура СоздатьОбластьПросмотраДерева(Родитель)
    
    // Группа без заголовка для области просмотра
    ГруппаПросмотра = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ГруппаПросмотра", Родитель, 2, 1, 1);
    ГруппаПросмотра.РастягиватьПоГоризонтали = Истина;
    ГруппаПросмотра.РастягиватьПоВертикали = Истина;
    
    // ЛЕВАЯ панель - информация об узле (теперь первая)
    ПолеИнфоУзла = ДФИ.СздПолеНадписи(ЭтотОбъект, "ПолеИнфоУзла", ГруппаПросмотра, "Информация об узле", Истина, "ИнформацияОбУзле", 1, 1, 1);
    ПолеИнфоУзла.МногострочныйРежим = Истина;
    ПолеИнфоУзла.РасширенноеРедактирование = Истина;
    ПолеИнфоУзла.РастягиватьПоВертикали = Истина;
    ПолеИнфоУзла.РастягиватьПоГоризонтали = Истина;
    ПолеИнфоУзла.Вид = ВидПоляФормы.ПолеНадписи;
    
    // ПРАВАЯ панель - дерево в текстовом виде (теперь вторая)
    ПолеДерева = ДФИ.СздПолеНадписи(ЭтотОбъект, "ПолеДерева", ГруппаПросмотра, "Структура дерева", Истина, "ТекстДерева", 1, 2, 1);
    ПолеДерева.МногострочныйРежим = Истина;
    ПолеДерева.РасширенноеРедактирование = Истина;
    ПолеДерева.РастягиватьПоВертикали = Истина;
    ПолеДерева.Ширина = 600;
    ПолеДерева.Вид = ВидПоляФормы.ПолеНадписи;
    
КонецПроцедуры

&НаСервере
Процедура СоздатьПанельУправления(Родитель)
    
    // Группа без заголовка для управления
    ГруппаУправления = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ГруппаУправления", Родитель, 2, 1, 0);
    ГруппаУправления.РастягиватьПоГоризонтали = Истина;
    
    // Команды управления (создаем только один раз)
    Если ЭтотОбъект.Команды.Найти("ПроверитьЦелостность") = Неопределено Тогда
        ДФИ.СоздатьКоманду(ЭтотОбъект, "ПроверитьЦелостность", "Проверить целостность", "ПроверитьЦелостность");
        ДФИ.СоздатьКоманду(ЭтотОбъект, "ЭкспортироватьДерево", "Экспорт в файл", "ЭкспортироватьДерево");
        ДФИ.СоздатьКоманду(ЭтотОбъект, "ПоказатьСтатистику", "Статистика", "ПоказатьСтатистику");
        ДФИ.СоздатьКоманду(ЭтотОбъект, "ОбновитьОтображение", "Обновить отображение", "ОбновитьОтображение");
    КонецЕсли;
    
    // Кнопки управления
    КнопкаЦелостность = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаЦелостность", ГруппаУправления, "Проверить целостность", "ПроверитьЦелостность");
    КнопкаЦелостность.Ширина = 150;
    
    КнопкаЭкспорт = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаЭкспорт", ГруппаУправления, "Экспорт в файл", "ЭкспортироватьДерево");
    КнопкаЭкспорт.Ширина = 120;
    
    КнопкаСтатистика = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаСтатистика", ГруппаУправления, "Статистика", "ПоказатьСтатистику");
    КнопкаСтатистика.Ширина = 100;
    
    КнопкаОбновить = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаОбновить", ГруппаУправления, "Обновить отображение", "ОбновитьОтображение");
    КнопкаОбновить.Ширина = 150;
    
    // Статус операции
    ПолеСтатуса = ДФИ.СздПолеНадписи(ЭтотОбъект, "ПолеСтатуса", ГруппаУправления, "", Истина, "СтатусОперации");
    ПолеСтатуса.РастягиватьПоГоризонтали = Истина;
    ПолеСтатуса.Вид = ВидПоляФормы.ПолеНадписи;
    
КонецПроцедуры

// Остальной код без изменений...  
// Клиентские процедуры для работы с интерфейсом
&НаКлиенте
Процедура ОбновитьИнтерфейсДерева()
    
    Если Объект.Ссылка.Пустая() Тогда
        СтатусОперации = "Шаблон не выбран";
        Возврат;
    КонецЕсли;
    
    // Обновляем все компоненты
    ОбновитьИнформациюОШаблоне();
    ОбновитьСтруктуруДерева();
    ОбновитьСтатистику();
    ОбновитьСтатусОперации();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОШаблоне()
    
    ТекстИнформации = "Шаблон: " + Объект.Наименование + Символы.ПС +
                     "Тип тестирования: " + Объект.ТипТестирования + Символы.ПС +
                     "Дата создания: " + Формат(Объект.Дата, "ДФ=dd.MM.yyyy");
    
    // ПолеИнформации в коде не создано, предположим, что оно существует или удаляем этот блок, если не нужно
    // Если Элементы.ПолеИнформации <> Неопределено Тогда
    //     Элементы.ПолеИнформации.Заголовок = ТекстИнформации;
    // КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтруктуруДерева()
    
    // Проверяем существование структуры в регистре
    Если НЕ ТестированиеБинарноеДерево.СуществуетСтруктураДереваВРегистре(Объект.Ссылка) Тогда
        ТекстДерева = "Структура дерева не найдена в регистре." + Символы.ПС + Символы.ПС +
                            "Для создания структуры используйте команду 'Создать структуру дерева'.";
        Возврат;
    КонецЕсли;
    
    // Получаем полную структуру дерева
    СтруктураДерева = ТестированиеБинарноеДерево.ПолучитьПолнуюСтруктуруДереваИзРегистра(Объект.Ссылка);
    
    // Формируем текстовое представление
    ТекстДерева = СформироватьТекстовоеПредставлениеДерева(СтруктураДерева);
    
КонецПроцедуры

&НаКлиенте
Функция СформироватьТекстовоеПредставлениеДерева(СтруктураДерева)
    
    Текст = "=== СТРУКТУРА БИНАРНОГО ДЕРЕВА ===" + Символы.ПС + Символы.ПС;
    
    // Получаем корневой узел
    КорневойУзел = ТестированиеБинарноеДерево.ПолучитьКорневойУзелИзРегистра(Объект.Ссылка);
    
    Если КорневойУзел = Неопределено Тогда
        Текст = Текст + "Корневой узел не найден" + Символы.ПС;
        Возврат Текст;
    КонецЕсли;
    
    // Рекурсивно формируем дерево
    Текст = Текст + ОбойтиУзелИСформироватьТекст(КорневойУзел, 0);
    
    Возврат Текст;
    
КонецФункции

&НаКлиенте
Функция ОбойтиУзелИСформироватьТекст(Узел, Уровень)
    
    Текст = "";
    Префикс = Лев("    ", Уровень * 2);
    
    // Получаем информацию об узле
    ИнфоУзел = ТестированиеБинарноеДерево.ПолучитьИнформациюОбУзлеИзРегистра(Объект.Ссылка, Узел);
    Если ИнфоУзел = Неопределено Тогда
        Возврат Текст;
    КонецЕсли;
    
    // Формируем строку узла
    Текст = Текст + Префикс + "├── " + ИнфоУзел.Наименование + Символы.ПС;
    Текст = Текст + Префикс + "│   Вопрос: " + ИнфоУзел.ТекстВопроса + Символы.ПС;
    Текст = Текст + Префикс + "│   Уровень: " + ИнфоУзел.Уровень + ", Лист: " + ИнфоУзел.ЯвляетсяЛистом + Символы.ПС;
    
    // Если узел не листовой, добавляем дочерние узлы
    Если НЕ ИнфоУзел.ЯвляетсяЛистом Тогда
        Связи = ТестированиеБинарноеДерево.ПолучитьСвязиУзлаИзРегистра(Объект.Ссылка, Узел);
        
        Для Каждого Связь Из Связи Цикл
            Если Связь.Активность Тогда
                Текст = Текст + Префикс + "│   └── Связь: " + Связь.ТипСвязи + Символы.ПС;
                Текст = Текст + ОбойтиУзелИСформироватьТекст(Связь.СледующийУзел, Уровень + 1);
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
    Возврат Текст;
    
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатистику()
    
    // Проверяем существование структуры
    Если НЕ ТестированиеБинарноеДерево.СуществуетСтруктураДереваВРегистре(Объект.Ссылка) Тогда
        СтатистикаТекст = "Статистика недоступна: структура дерева не найдена";
        Возврат;
    КонецЕсли;
    
    // Получаем статистику
    ВсеУзлы = ТестированиеБинарноеДерево.ПолучитьВсеУзлыДереваИзРегистра(Объект.Ссылка);
    ЛистовыеУзлы = ТестированиеБинарноеДерево.ПолучитьЛистовыеУзлыИзРегистра(Объект.Ссылка);
    ГлубинаДерева = ТестированиеБинарноеДерево.ПолучитьГлубинуДереваИзРегистра(Объект.Ссылка);
    
    // Формируем текст статистики
    ТекстСтатистики = "=== СТАТИСТИКА ДЕРЕВА ===" + Символы.ПС + Символы.ПС +
                     "Всего узлов: " + ВсеУзлы.Количество() + Символы.ПС +
                     "Листовых узлов: " + ЛистовыеУзлы.Количество() + Символы.ПС +
                     "Не листовых узлов: " + (ВсеУзлы.Количество() - ЛистовыеУзлы.Количество()) + Символы.ПС +
                     "Глубина дерева: " + ГлубинаДерева + Символы.ПС +
                     "Средняя ветвистость: " + Формат((ВсеУзлы.Количество() - ЛистовыеУзлы.Количество()) / Макс(ЛистовыеУзлы.Количество(), 1), "ЧДЦ=2");
    
    СтатистикаТекст = ТекстСтатистики;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусОперации()
    
    // Обновляем статус на основе последних операций
	//Если СтатусОперации = "" Тогда
	//    СтатусОперации = "Готов";
	//КонецЕсли;
    
КонецПроцедуры

// Обработчики команд
&НаКлиенте
Процедура ОбновитьДерево(Команда)
    
    Попытка
        ОбновитьИнтерфейсДерева();
        СтатусОперации = "Дерево обновлено: " + ТекущаяДата();
        ПоказатьПредупреждение(, "✅ Структура дерева обновлена");
    Исключение
        СтатусОперации = "Ошибка обновления: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        ПоказатьПредупреждение(, "❌ Ошибка обновления дерева: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;
    
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЦелостность(Команда)
    
    Если Объект.Ссылка.Пустая() Тогда
        ПоказатьПредупреждение(, "⚠️ Сначала выберите шаблон");
        Возврат;
    КонецЕсли;
    
    Попытка
        СтатусОперации = "Проверка целостности...";
        ОбновитьИнтерфейсДерева();
        
        Результат = ТестированиеБинарноеДерево.ПроверитьЦелостностьДереваВРегистре(Объект.Ссылка);
        
        Если Результат Тогда
            СтатусОперации = "Целостность проверена успешно";
            ПоказатьПредупреждение(, "✅ Целостность дерева проверена успешно!");
        Иначе
            СтатусОперации = "Обнаружены проблемы в структуре";
            ПоказатьПредупреждение(, "❌ Обнаружены проблемы в структуре дерева!");
        КонецЕсли;
        
    Исключение
        СтатусОперации = "Ошибка проверки целостности: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        ПоказатьПредупреждение(, "❌ Ошибка проверки целостности: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;
    
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьДерево(Команда)
    
    Если Объект.Ссылка.Пустая() Тогда
        ПоказатьПредупреждение(, "⚠️ Сначала выберите шаблон");
        Возврат;
    КонецЕсли;
    
    Попытка
        Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
        Диалог.Заголовок = "Экспорт структуры дерева";
        Диалог.ПолноеИмяФайла = Объект.Наименование + ".txt";
        Диалог.Фильтр = "Текстовые файлы (*.txt)|*.txt";
        
        ОписаниеОповещения = Новый ОписаниеОповещения("ЭкспортироватьДеревоЗавершение", ЭтотОбъект, Диалог);
        Диалог.Показать(ОписаниеОповещения);
        
    Исключение
        СтатусОперации = "Ошибка экспорта: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        ПоказатьПредупреждение(, "❌ Ошибка экспорта: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;
    
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьДеревоЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    Если ВыбранныеФайлы = Неопределено Тогда
        СтатусОперации = "Экспорт отменен";
        ПоказатьПредупреждение(, "ℹ️ Экспорт отменен пользователем");
        Возврат;
    КонецЕсли;
    
    СтатусОперации = "Экспорт в файл...";
    
    // Используем функцию экспорта из модуля тестирования
    ТестированиеБинарноеДерево.ЭкспортироватьСтруктуруДереваВФайл(Объект.Ссылка, ВыбранныеФайлы[0]);
    
    СтатусОперации = "Экспорт завершен: " + ВыбранныеФайлы[0];
    ПоказатьПредупреждение(, "✅ Структура дерева экспортирована в файл: " + ВыбранныеФайлы[0]);
    
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСтатистику(Команда)
    
    Если Объект.Ссылка.Пустая() Тогда
        ПоказатьПредупреждение(, "⚠️ Сначала выберите шаблон");
        Возврат;
    КонецЕсли;
    
    Попытка
        ОбновитьСтатистику();
        
        // Дополнительная детальная статистика
        ВсеУзлы = ТестированиеБинарноеДерево.ПолучитьВсеУзлыДереваИзРегистра(Объект.Ссылка);
        ЛистовыеУзлы = ТестированиеБинарноеДерево.ПолучитьЛистовыеУзлыИзРегистра(Объект.Ссылка);
        Глубина = ТестированиеБинарноеДерево.ПолучитьГлубинуДереваИзРегистра(Объект.Ссылка);
        
        Сообщение = " Детальная статистика дерева:" + Символы.ПС + Символы.ПС +
                   "• Всего узлов: " + ВсеУзлы.Количество() + Символы.ПС +
                   "• Листовых узлов: " + ЛистовыеУзлы.Количество() + Символы.ПС +
                   "• Ветвей: " + (ВсеУзлы.Количество() - ЛистовыеУзлы.Количество()) + Символы.ПС +
                   "• Глубина дерева: " + Глубина + Символы.ПС +
                   "• Коэффициент ветвления: " + Формат((ВсеУзлы.Количество() - ЛистовыеУзлы.Количество()) / Макс(ЛистовыеУзлы.Количество(), 1), "ЧДЦ=2");
        
        ПоказатьПредупреждение(, Сообщение);
        СтатусОперации = "Статистика показана: " + ТекущаяДата();
        
    Исключение
        СтатусОперации = "Ошибка показа статистики: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        ПоказатьПредупреждение(, "❌ Ошибка показа статистики: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображение(Команда)
    
    Попытка
        // ТОЛЬКО обновляем данные, НЕ пересоздаем интерфейс
        ОбновитьИнтерфейсДерева();
        
        СтатусОперации = "Данные обновлены";
        ПоказатьПредупреждение(, "✅ Данные дерева обновлены");
        
    Исключение
        СтатусОперации = "Ошибка обновления: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
        ПоказатьПредупреждение(, "❌ Ошибка обновления данных: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;
    
КонецПроцедуры

// Обработчики событий формы
&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    // Инициализация при открытии формы
    ОбновитьИнтерфейсДерева();
    
КонецПроцедуры

&НаКлиенте
Процедура ПриИзменении(Элемент)
    
    // Обновляем интерфейс при изменении данных
    Если Элемент.Имя = "Ссылка" ИЛИ Элемент.Имя = "Наименование" Тогда
        ОбновитьИнтерфейсДерева();
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти