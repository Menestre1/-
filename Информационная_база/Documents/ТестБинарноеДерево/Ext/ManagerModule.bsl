#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Тест
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Тест";
	КомандаПечати.Представление = НСтр("ru = 'Тест'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	
	// Тест в документ Adobe PDF
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Тест";
	КомандаПечати.Представление = НСтр("ru = 'Тест в документ Adobe PDF'");
	КомандаПечати.Картинка = БиблиотекаКартинок.ФорматPDF;
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.ФорматСохранения = ТипФайлаТабличногоДокумента.PDF;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	// печать теста
 	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Тест");
    Если НужноПечататьМакет Тогда
    	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		   КоллекцияПечатныхФорм,
           "Тест",
		   НСтр("ru = 'Тест'"), 
		   ПечатьТест(МассивОбъектов, ОбъектыПечати),
		   ,
		   "Документ.Тест.ПФ_MXL_МакетТеста");
	КонецЕсли;
	 
	// параметры отправки печатных форм по электронной почте
	ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для вызова из дополнительной печатной формы.

//Печать документа "Тест" 
Функция ПечатьТест(МассивОбъектов, ОбъектыПечати)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.Текст = ПолучитьТекстЗапросаДляФормированияПечатнойФормыТеста();
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб		   = Истина;
	ТабличныйДокумент.ОриентацияСтраницы   = ОриентацияСтраницы.Портрет;
	ТабличныйДокумент.КлючПараметровПечати = "Тест_Тест";
	
   	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Тест.ПФ_MXL_МакетТеста");
	
   	Пока Шапка.СледующийПоЗначениюПоля("Ссылка") Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьЗаголовок 				= Макет.ПолучитьОбласть("Заголовок");
		ОбластьРазделы					= Макет.ПолучитьОбласть("Разделы");
		ОбластьВопросы 					= Макет.ПолучитьОбласть("Вопросы");
		ОбластьОтветНесколькоИз			= Макет.ПолучитьОбласть("ОтветНесколькоИз");
		ОбластьОтветПримитивныйТип		= Макет.ПолучитьОбласть("ОтветПримитивныйТип");
		ОбластьОтветОдинИз				= Макет.ПолучитьОбласть("ОтветОдинИз");

		ОбластьЗаголовок.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТестПодобранныеВопросы.Вопрос,
			|	ТестПодобранныеВопросы.Вопрос.ТекстФормулировки КАК ВопросФормулировка,
			|	ТестПодобранныеВопросы.Раздел КАК Раздел,
			|	ТестПодобранныеВопросы.Раздел.НаименованиеПолное КАК РазделНаименованиеПолное,
			|	ТестПодобранныеВопросы.Вопрос.ТипОтвета КАК ТипОтвета,
			|	ВариантыОтветовТестов.Ссылка КАК Ответ,
			|	ВариантыОтветовТестов.Наименование КАК ОтветФормулировка
			|ИЗ
			|	Документ.Тест.Вопросы КАК ТестПодобранныеВопросы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтветовТестов КАК ВариантыОтветовТестов
			|		ПО ТестПодобранныеВопросы.Вопрос = ВариантыОтветовТестов.Владелец
			|ГДЕ
			|	ТестПодобранныеВопросы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	Раздел,
			|	ТестПодобранныеВопросы.НомерСтроки";

		Запрос.УстановитьПараметр("Ссылка", Шапка.Ссылка);
		ВыборкаВопросы = Запрос.Выполнить().Выбрать();

		ПервыйРаздел = Истина;
		
		// Выводим многострочную часть документа
		Пока ВыборкаВопросы.СледующийПоЗначениюПоля("Раздел") Цикл
			
			Если НЕ ПервыйРаздел Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); // начнем новую страницу 
			КонецЕсли;
			
			ПервыйРаздел = Ложь;
			
			ОбластьРазделы.Параметры.Заполнить(ВыборкаВопросы);
			ТабличныйДокумент.Вывести(ОбластьРазделы);
			
			НомерПП = 0;
			Пока ВыборкаВопросы.СледующийПоЗначениюПоля("Вопрос") Цикл
				
				НомерПП = НомерПП + 1;
				ОбластьВопросы.Параметры.Заполнить(ВыборкаВопросы);
				ОбластьВопросы.Параметры.НомерПП = НомерПП;
				
				СтрокаСПодвалом = Новый Массив;
				СтрокаСПодвалом.Добавить(ОбластьВопросы);
				СтрокаСПодвалом.Добавить(ОбластьОтветПримитивныйТип);
				
				Если ВыборкаВопросы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз 
				    ИЛИ ВыборкаВопросы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда 
					//так как подбирать количество ответов долго и затратно - будем исходить из 5ти
					СтрокаСПодвалом.Добавить(ОбластьОтветПримитивныйТип);
					СтрокаСПодвалом.Добавить(ОбластьОтветПримитивныйТип);
					СтрокаСПодвалом.Добавить(ОбластьОтветПримитивныйТип);
					СтрокаСПодвалом.Добавить(ОбластьОтветПримитивныйТип);
				КонецЕсли;

				Если НЕ ТабличныйДокумент.ПроверитьВывод(СтрокаСПодвалом) Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц(); // начнем новую страницу 
                КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьВопросы);
				
				Если ВыборкаВопросы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз Тогда 
				
					Пока ВыборкаВопросы.Следующий() Цикл
						
						ОбластьОтветОдинИз.Параметры.Заполнить(ВыборкаВопросы);
						ТабличныйДокумент.Вывести(ОбластьОтветОдинИз);
						
					КонецЦикла;
					
				ИначеЕсли ВыборкаВопросы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
					
					Пока ВыборкаВопросы.Следующий() Цикл
						
						ОбластьОтветНесколькоИз.Параметры.Заполнить(ВыборкаВопросы);
						ТабличныйДокумент.Вывести(ОбластьОтветНесколькоИз);
						
					КонецЦикла;
					
				Иначе
					
					ТабличныйДокумент.Вывести(ОбластьОтветПримитивныйТип);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
			
     	// В табличном документе зададим имя области, в которую был 
     	// выведен объект. Нужно для возможности печати покомплектно.
     	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, 
       	  НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);

   КонецЦикла;
   
   Возврат ТабличныйДокумент;
   
КонецФункции

// Формирует и возвращает текст запроса для выборки данных,
// необходимых для формирования печатной формы
Функция ПолучитьТекстЗапросаДляФормированияПечатнойФормыТеста()
	
	ТекстЗапроса =
	    "ВЫБРАТЬ
	    |	Тест.Ссылка КАК Ссылка,
	    |	Тест.Дата КАК Дата,
	    |	Тест.Номер,
	    |	Тест.Опрос.Наименование
	    |ИЗ
	    |	Документ.Тест КАК Тест
	    |ГДЕ
	    |	Тест.Ссылка В(&МассивОбъектов)
	    |
	    |УПОРЯДОЧИТЬ ПО
	    |	Дата,
	    |	Ссылка";
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ЗаполнитьПараметрыОтправки(ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Тест.Респондент
	|ИЗ
	|	Документ.Тест КАК Тест
	|ГДЕ
	|	Тест.Ссылка В(&МассивОбъектов)
	|
	|СГРУППИРОВАТЬ ПО
	|	Тест.Респондент";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	СведенияОКонтрагенте = Неопределено;
	Если РезультатЗапроса.Количество() = 1 Тогда
		СведенияОРеспонденте = РезультатЗапроса[0];
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Тест.Дата,
	|	Тест.Номер,
	|	Тест.Ссылка
	|ИЗ
	|	Документ.Тест КАК Тест
	|ГДЕ
	|	Тест.Ссылка В(&МассивОбъектов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	
	Если КоллекцияПечатныхФорм.Количество() = 1 Тогда
		ПараметрыОтправки.Тема = КоллекцияПечатныхФорм[0].СинонимМакета;
		ПараметрыОтправки.Текст = НСтр("ru = 'Файл во вложении.'");
	Иначе 
		ПараметрыОтправки.Тема = НСтр("ru = 'Документы'");
		ПараметрыОтправки.Текст = НСтр("ru = 'Файлы во вложении.'");
	КонецЕсли;
	
	ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + Символы.ПС;
	Для Каждого ПечатнаяФорма Из КоллекцияПечатныхФорм Цикл
		Пока ВыборкаОбъектов.Следующий() Цикл
			ПараметрыОтправки.Текст = ПараметрыОтправки.Текст + Символы.ПС + СформироватьЗаголовокДокумента(ВыборкаОбъектов, ПечатнаяФорма.СинонимМакета);
		КонецЦикла;
	КонецЦикла;
	
	// получатель заполняется только в случае, если он один для всех документов
	Если СведенияОРеспонденте <> Неопределено И ЗначениеЗаполнено(СведенияОРеспонденте.Респондент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыКонтактнойИнформации.Ссылка КАК ВидКонтактнойИнформации
		|ИЗ
		|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
		|ГДЕ
		|	ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
		
		ВидыКонтактнойИнформации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидКонтактнойИнформации");
		
		Получатели = Новый Массив;
		Для Каждого ВидКонтактнойИнформации Из ВидыКонтактнойИнформации Цикл
			
			Адрес = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СведенияОРеспонденте.Респондент, ВидКонтактнойИнформации);
			
			Если ЗначениеЗаполнено(Адрес) Тогда
				ПредставлениеПолучателя = Строка(СведенияОРеспонденте.Респондент);
				Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Респондент %1'"), СведенияОРеспонденте.Респондент);
				Получатели.Добавить(Новый Структура("Адрес,Представление,ИсточникКонтактнойИнформации,ВидПочтовогоАдреса,Пояснение", 
					Адрес, ПредставлениеПолучателя, СведенияОРеспонденте.Респондент, Строка(ВидКонтактнойИнформации), Пояснение));
			КонецЕсли;
			
		КонецЦикла;
		ПараметрыОтправки.Получатель = Получатели;
	КонецЕсли;
		
КонецПроцедуры

// Возвращает заголовок документа для печатной формы.
//
// Параметры:
//  Шапка - любая структура с полями:
//           Номер         - Строка или Число - номер документа;
//           Дата          - Дата - дата документа;
//           Представление - Строка - (необязательный) платформенное представление ссылки на документ.
//                                    Если параметр НазваниеДокумента не задан, то название документа будет вычисляться
//                                    из этого параметра.
//  НазваниеДокумента - Строка - название документа (например, "Счет на оплату").
//
// Возвращаемое значение:
//  Строка - заголовок документа
//
Функция СформироватьЗаголовокДокумента(Шапка, Знач НазваниеДокумента = "") Экспорт
	
	ДанныеДокумента = Новый Структура("Номер,Дата,Представление");
	ЗаполнитьЗначенияСвойств(ДанныеДокумента, Шапка);
	
	// Если название документа не передано, получим название по представлению документа
	Если ПустаяСтрока(НазваниеДокумента) И ЗначениеЗаполнено(ДанныеДокумента.Представление) Тогда
		ПоложениеНомера = Найти(ДанныеДокумента.Представление, ДанныеДокумента.Номер);
		Если ПоложениеНомера > 0 Тогда
			НазваниеДокумента = СокрЛП(Лев(ДанныеДокумента.Представление, ПоложениеНомера - 1));
		КонецЕсли;
	КонецЕсли;

	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = '%1 № %2 от %3'"),
		НазваниеДокумента, ДанныеДокумента.Номер, Формат(ДанныеДокумента.Дата, "ДЛФ=DD"));
	
КонецФункции

#КонецОбласти

#КонецЕсли

//для бинарного дерева

// Модуль менеджера ТестБинарноеДерево
#Область УправляемыйИнтерфейс

// Создает новый тест бинарного дерева
//
// Параметры:
//  Опрос - ДокументСсылка.НазначениеОпросов
//  Респондент - СправочникСсылка.ФизическиеЛица
//
// Возвращаемое значение:
//   ДокументСсылка.ТестБинарноеДерево
//
Функция СоздатьТест(Опрос, Респондент) Экспорт
    
    Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
    Тест.Опрос = Опрос;
    Тест.Респондент = Респондент;
    Тест.ДатаРедактирования = ТекущаяДата();
    Тест.ВремяНачалаТеста = ТекущаяДата();
    Тест.Завершен = Ложь;
    Тест.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
    
    // Находим корневой узел для шаблона опроса
    КорневойУзел = Справочники.УзлыБинарногоДерева.ПолучитьКорневойУзел(Опрос.ШаблонТеста);
    Если КорневойУзел = Неопределено Тогда
        ВызватьИсключение "Для шаблона не найден корневой узел";
    КонецЕсли;
    
    Тест.ТекущийУзелДерева = КорневойУзел;
    
    // Записываем первый вопрос
    ЗаписатьВопросТеста(Тест, КорневойУзел);
    
    // Инициализируем состояние дерева
    ИнициализироватьСостояниеДерева(Тест);
    
    Возврат Тест;
    
КонецФункции

// Обрабатывает ответ на текущий вопрос
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//  Ответ - ПеречислениеСсылка.ТипыОтветовБинарногоДерева
//  Комментарий - Строка - необязательный комментарий
//
Процедура ОбработатьОтвет(Тест, Ответ, Комментарий = Неопределено) Экспорт
    
    Если Тест.Завершен Тогда
        ВызватьИсключение "Тест уже завершен";
    КонецЕсли;
    
    // Записываем ответ
    ЗаписатьОтветПользователя(Тест, Тест.ТекущийУзелДерева, Ответ, Комментарий);
    
    // Находим следующий узел
    СледующийУзел = НайтиСледующийУзел(Тест.Опрос.ШаблонТеста, Тест.ТекущийУзелДерева, Ответ);
    
    Если СледующийУзел = Неопределено ИЛИ СледующийУзел.ЯвляетсяЛистом Тогда
        // Достигнут конец ветки - завершаем тест
        ЗавершитьТест(Тест);
    Иначе
        // Переходим к следующему вопросу
        Тест.ТекущийУзелДерева = СледующийУзел;
        ЗаписатьВопросТеста(Тест, СледующийУзел);
        ОбновитьСостояниеДерева(Тест);
    КонецЕсли;
    
    Тест.Записать();
    
КонецПроцедуры

// Находит следующий узел по ответу
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//  ТекущийУзел - СправочникСсылка.УзлыБинарногоДерева
//  Ответ - ПеречислениеСсылка.ТипыОтветовБинарногоДерева
//
// Возвращаемое значение:
//   СправочникСсылка.УзлыБинарногоДерева
//
Функция НайтиСледующийУзел(Шаблон, ТекущийУзел, Ответ)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    СтруктураБинарногоДерева.СледующийУзел
    |ИЗ
    |    РегистрСведений.СтруктураБинарногоДерева КАК СтруктураБинарногоДерева
    |ГДЕ
    |    СтруктураБинарногоДерева.ШаблонТеста = &Шаблон
    |    И СтруктураБинарногоДерева.РодительскийУзел = &ТекущийУзел
    |    И СтруктураБинарногоДерева.ТипОтвета = &Ответ";
    
    Запрос.УстановитьПараметр("Шаблон", Шаблон);
    Запрос.УстановитьПараметр("ТекущийУзел", ТекущийУзел);
    Запрос.УстановитьПараметр("Ответ", Ответ);
    
    Результат = Запрос.Выполнить().Выбрать();
    Если Результат.Следующий() Тогда
        Возврат Результат.СледующийУзел;
    КонецЕсли;
    
    Возврат Неопределено;
    
КонецФункции

// Завершает тест
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//
Процедура ЗавершитьТест(Тест)
    
    Тест.Завершен = Истина;
    Тест.ВремяЗавершения = ТекущаяДата();
    Тест.ОбщееВремяПрохождения = Тест.ВремяЗавершения - Тест.ВремяНачалаТеста;
    
    // Рассчитываем статистику
    РассчитатьСтатистикуТеста(Тест);
    
КонецПроцедуры

#КонецОбласти


//КРАТКОЕ ОПИСАНИЕ ДОБАВЛЕННЫХ МЕТОДОВ
//1. ЗаписатьВопросТеста
//Добавляет вопрос в табличную часть ВопросыБинарногоДерева
//Устанавливает начальные статусы и порядок
//2. ЗаписатьОтветПользователя
//Обновляет статус пройденного вопроса
//Записывает ответ в табличную часть ОтветыБинарногоДерева
//Рассчитывает время на ответ
//3. ИнициализироватьСостояниеДерева
//Записывает структуру дерева в тест
//Инициализирует счетчики вопросов и прогресса
//4. ОбновитьСостояниеДерева
//Обновляет счетчики после каждого ответа
//Пересчитывает процент завершения
//5. ЗаписатьНачальнуюСтруктуруДерева
//Копирует структуру дерева из шаблона в тест
//Сохраняет связи между узлами
//6. РассчитатьСтатистикуТеста
//Вычисляет среднее время ответов
//Определяет результат сдачи теста
//Считает статистику по ответам

// Модуль менеджера ТестБинарноеДерево
#Область УправляемыйИнтерфейс

// Записывает вопрос в табличную часть теста
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//  Узел - СправочникСсылка.УзлыБинарногоДерева
//
Процедура ЗаписатьВопросТеста(Тест, Узел)
    
    НоваяСтрока = Тест.ВопросыБинарногоДерева.Добавить();
    НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
    НоваяСтрока.УзелДерева = Узел;
    НоваяСтрока.Вопрос = Узел.Вопрос;
    НоваяСтрока.Раздел = Узел.Вопрос.Владелец; // Предполагаем, что вопрос принадлежит разделу
    НоваяСтрока.УровеньДерева = Узел.Уровень;
    НоваяСтрока.ВремяВопроса = ТекущаяДата();
    НоваяСтрока.СтатусУзла = Перечисления.СтатусыУзловБинарногоДерева.Активный;
    НоваяСтрока.ПорядокПрохождения = Тест.ВопросыБинарногоДерева.Количество();
    
КонецПроцедуры

// Записывает ответ пользователя
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//  Узел - СправочникСсылка.УзлыБинарногоДерева
//  Ответ - ПеречислениеСсылка.ТипыОтветовБинарногоДерева
//  Комментарий - Строка
//
Процедура ЗаписатьОтветПользователя(Тест, Узел, Ответ, Комментарий = Неопределено)
    
    // Обновляем статус предыдущего вопроса
    Для Каждого СтрокаВопроса Из Тест.ВопросыБинарногоДерева Цикл
        Если СтрокаВопроса.УзелДерева = Узел Тогда
            СтрокаВопроса.ОтветПолучен = Истина;
            СтрокаВопроса.СтатусУзла = Перечисления.СтатусыУзловБинарногоДерева.Пройденный;
            СтрокаВопроса.ТипПерехода = Ответ;
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    // Записываем ответ в табличную часть
    НоваяСтрокаОтвета = Тест.ОтветыБинарногоДерева.Добавить();
    НоваяСтрокаОтвета.ИдентификаторСтроки = Новый УникальныйИдентификатор;
    НоваяСтрокаОтвета.УзелДерева = Узел;
    НоваяСтрокаОтвета.Вопрос = Узел.Вопрос;
    НоваяСтрокаОтвета.ТипОтветаБинарный = Ответ;
    НоваяСтрокаОтвета.ВремяОтвета = ТекущаяДата();
    НоваяСтрокаОтвета.НомерШага = Тест.ОтветыБинарногоДерева.Количество();
    
    Если Комментарий <> Неопределено Тогда
        НоваяСтрокаОтвета.Комментарий = Комментарий;
    КонецЕсли;
    
    // Рассчитываем время на ответ
    Если Тест.ВопросыБинарногоДерева.Количество() > 0 Тогда
        Для Каждого СтрокаВопроса Из Тест.ВопросыБинарногоДерева Цикл
            Если СтрокаВопроса.УзелДерева = Узел Тогда
                НоваяСтрокаОтвета.ВремяНаОтвет = НоваяСтрокаОтвета.ВремяОтвета - СтрокаВопроса.ВремяВопроса;
                Прервать;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
КонецПроцедуры

// Инициализирует состояние дерева теста
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//
Процедура ИнициализироватьСостояниеДерева(Тест)
    
    // Записываем начальную структуру дерева
    ЗаписатьНачальнуюСтруктуруДерева(Тест);
    
    // Инициализируем счетчики
    Тест.КоличествоВопросов = 1; // Начинаем с корневого узла
    Тест.ГлубинаДерева = 0;
    Тест.ПроцентЗавершения = 0;
    
КонецПроцедуры

// Обновляет состояние дерева теста
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//
Процедура ОбновитьСостояниеДерева(Тест)
    
    // Обновляем счетчики
    Тест.КоличествоВопросов = Тест.КоличествоВопросов + 1;
    Тест.ГлубинаДерева = Макс(Тест.ГлубинаДерева, Тест.ТекущийУзелДерева.Уровень);
    
    // Рассчитываем процент завершения (упрощенная логика)
    Если Тест.МаксимальноеКоличествоВопросов > 0 Тогда
        Тест.ПроцентЗавершения = Тест.КоличествоВопросов * 100 / Тест.МаксимальноеКоличествоВопросов;
    КонецЕсли;
    
КонецПроцедуры

// Записывает начальную структуру дерева в тест
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//
Процедура ЗаписатьНачальнуюСтруктуруДерева(Тест)
    
    // Получаем структуру дерева для шаблона
    СтруктураДерева = Справочники.ШаблоныБинарныхДеревьев.ПолучитьСтруктуруДерева(Тест.Опрос.ШаблонТеста);
    
    Для Каждого СтрокаСтруктуры Из СтруктураДерева Цикл
        НоваяСтрока = Тест.СтруктураДереваТеста.Добавить();
        НоваяСтрока.УзелДерева = СтрокаСтруктуры.СледующийУзел;
        НоваяСтрока.РодительскийУзел = СтрокаСтруктуры.РодительскийУзел;
        НоваяСтрока.ТипСвязи = СтрокаСтруктуры.ТипОтвета;
        НоваяСтрока.Вопрос = СтрокаСтруктуры.Вопрос;
        НоваяСтрока.Уровень = СтрокаСтруктуры.СледующийУзел.Уровень;
        НоваяСтрока.ЯвляетсяЛистом = СтрокаСтруктуры.ЯвляетсяЛистом;
        НоваяСтрока.Активность = Истина;
        НоваяСтрока.Порядок = Тест.СтруктураДереваТеста.Количество();
    КонецЦикла;
    
КонецПроцедуры

// Рассчитывает статистику теста
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//
Процедура РассчитатьСтатистикуТеста(Тест)
    
    // Рассчитываем среднее время ответа
    ОбщееВремяОтветов = 0;
    КоличествоОтветов = 0;
    
    Для Каждого СтрокаОтвета Из Тест.ОтветыБинарногоДерева Цикл
        Если СтрокаОтвета.ВремяНаОтвет > 0 Тогда
            ОбщееВремяОтветов = ОбщееВремяОтветов + СтрокаОтвета.ВремяНаОтвет;
            КоличествоОтветов = КоличествоОтветов + 1;
        КонецЕсли;
    КонецЦикла;
    
    Если КоличествоОтветов > 0 Тогда
        Тест.СреднееВремяОтвета = ОбщееВремяОтветов / КоличествоОтветов;
    КонецЕсли;
    
    // Считаем правильные/неправильные ответы (упрощенная логика)
    Тест.КоличествоПравильныхОтветов = 0;
    Тест.КоличествоНеправильныхОтветов = 0;
    
    // Здесь можно добавить логику определения правильности ответов
    // на основе сравнения с эталонными ответами
    
    // Устанавливаем результат сдачи
    Если Тест.ПроцентЗавершения >= Тест.Опрос.ШаблонТеста.ПроцентДляСдачи Тогда
        Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан;
    Иначе
        Тест.РезультатСдачи = Перечисления.РезультатыСдачи.НеСдан;
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти