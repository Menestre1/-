#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий


Процедура ПриЧтении()
    Если Не ЗначениеЗаполнено(ТипТестирования) Тогда
        ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
    КонецЕсли;	
КонецПроцедуры

// Модуль объекта Документ.ТестБинарноеДерево

// Поместить в Модуль Объекта документа "ТестБинарноеДерево"

// Поместить в Модуль Объекта документа "ТестБинарноеДерево"

//Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка=Ложь) Экспорт
//    
//    СтандартнаяОбработка = Ложь;
//	
//	//Если НЕ ВладелецФормы = Неопределено Тогда
//	//	Возврат;
//	//КонецЕсли;
//	
//	//Если НЕ ЭтотОбъект.Ссылка.Пустая() Тогда
//	//    Возврат;
//	//КонецЕсли;
//	
//    // --- НАЧАЛО ИЗМЕНЕНИЙ ---
//    ПереданныйОпрос = Неопределено;

//    // Приоритетная логика: если нас создают на основании НазначенияОпросов
//    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.НазначениеОпросов") Тогда
//        
//		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Опрос) Тогда
//			ЭтотОбъект.Опрос = ДанныеЗаполнения.Ссылка;
//		КонецЕсли;
//		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.ШаблонТеста) Тогда
//        	ЭтотОбъект.ШаблонТеста = ДанныеЗаполнения.ШаблонТеста;
//		КонецЕсли;
//        ЭтотОбъект.Дата = ТекущаяДата();
//        
//        // ЗАПОМИНАЕМ КЛЮЧЕВОЕ ЗНАЧЕНИЕ, которое может быть затерто
//        ПереданныйОпрос = ЭтотОбъект.Опрос;
//        
//    Иначе
//        ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
//    КонецЕсли;

//    // Если создаем НОВЫЙ документ, выполняется дополнительная логика
//    Если Ссылка.Пустая() Тогда
//        
//        Если НЕ ЗначениеЗаполнено(ШаблонТеста) Тогда
//            Возврат;
//        КонецЕсли;
//        
//        // ВЫЗОВ ПРОБЛЕМНОЙ ПРОЦЕДУРЫ, которая, вероятно, затирает поле "Опрос"
//        ТестированиеБинарноеДерево.ЗаполнитьТестИзШаблона(ЭтотОбъект);

//        // ЗАЩИТА: Восстанавливаем значение "Опрос" сразу после вызова
//        Если ЗначениеЗаполнено(ПереданныйОпрос) И НЕ ЗначениеЗаполнено(ЭтотОбъект.Опрос) Тогда
//            ЭтотОбъект.Опрос = ПереданныйОпрос;
//        КонецЕсли;
//        
//        // После заполнения инициализируем тест, если это бинарное дерево
//        Если ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево Тогда
//            ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(ЭтотОбъект);
//        КонецЕсли;
//    КонецЕсли;
//	
//    // Финальное заполнение дат
//    Если НЕ ЗначениеЗаполнено(ВремяНачалаТеста) Тогда
//        ВремяНачалаТеста = ТекущаяДата();
//    КонецЕсли;
//    Если НЕ ЗначениеЗаполнено(Дата) Тогда
//        Дата = НачалоДня(ТекущаяДата());
//    КонецЕсли;
//    
//    // --- КОНЕЦ ИЗМЕНЕНИЙ ---

//КонецПроцедуры

// Поместить в Модуль ОБЪЕКТА Документа "ТестБинарноеДерево"

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Просто заполняем по данным. Мы больше не пытаемся определить, новый это документ или нет.
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
	
	Если Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(ШаблонТеста) Тогда
			Возврат;
		КонецЕсли;
		
		ТестированиеБинарноеДерево.ЗаполнитьТестИзШаблона(ЭтотОбъект);

		Если ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево Тогда
			ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = НачалоДня(ТекущаяДата());
	КонецЕсли;

КонецПроцедуры

// Процедура для явного восстановления состояния теста
Процедура ВосстановитьСостояниеТеста() Экспорт
    Если ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево Тогда
        ТестированиеБинарноеДерево.ВосстановитьСостояниеТестаИзРегистра(ЭтотОбъект);
        Сообщить("Состояние теста восстановлено из регистра");
    Иначе
        Сообщить("Восстановление состояния доступно только для бинарного дерева");
    КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьВопросыИзШаблона()
    
    Если НЕ ЗначениеЗаполнено(ШаблонТеста) Тогда
        Возврат;
    КонецЕсли;

    ТипТестирования = ШаблонТеста.ТипТестирования;
    СтруктураДереваТеста.Очистить();
    
    Если ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево Тогда
        
        Запрос = Новый Запрос;
        Запрос.Текст = 
            "ВЫБРАТЬ
            |    Структура.РодительскийУзел,
            |    Структура.ТипОтвета КАК ТипСвязи,
            |    Структура.СледующийУзелДерева КАК УзелДерева,
            |    УзелСправочник.Вопрос,
            |    УзелСправочник.Уровень,
            |    УзелСправочник.ЯвляетсяЛистом,
            |    (Структура.СостояниеСвязи = ЗНАЧЕНИЕ(Перечисление.СостоянияСвязиБинарногоДерева.СвязьАктивна)) КАК Активность,
            |    0 КАК Порядок
            |ИЗ
            |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
            |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыБинарногоДерева КАК УзелСправочник
            |        ПО Структура.СледующийУзелДерева = УзелСправочник.Ссылка
            |ГДЕ
            |    Структура.ШаблонТеста = &ШаблонТеста";
            
        Запрос.УстановитьПараметр("ШаблонТеста", ШаблонТеста);
        
        // Результат запроса идеально подходит для загрузки в ТЧ документа благодаря псевдонимам
        СтруктураДереваТеста.Загрузить(Запрос.Выполнить().Выгрузить());
        
        Сообщить("Структура бинарного дерева загружена из регистра. Узлов: " + СтруктураДереваТеста.Количество());
        
    Иначе
        // Здесь остается ваша старая логика для плоских тестов (если она нужна)
        // ...
    КонецЕсли;

КонецПроцедуры


Процедура ИнициализироватьТест() Экспорт
    Если ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево Тогда
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(ЭтотОбъект);
        ЭтотОбъект.Записать();
        ЭтотОбъект = ЭтотОбъект.Ссылка.ПолучитьОбъект();  // Перечитать
    ИначеЕсли ТипТестирования = Перечисления.ТипыТестирования.Плоское Тогда
        ЗаполнитьВопросыИзШаблона();
        ЭтотОбъект.Записать();
        ЭтотОбъект = ЭтотОбъект.Ссылка.ПолучитьОбъект();
    КонецЕсли;
КонецПроцедуры

// Вместо локальных функций использовать вызовы общего модуля
Функция ПолучитьТипСвязи(РодительУзел)
    Возврат ТестированиеБинарноеДерево.ПолучитьТипСвязи(ЭтотОбъект, РодительУзел);
КонецФункции

Функция ЯвляетсяЛистом(Узел)
    Возврат ТестированиеБинарноеДерево.ЯвляетсяЛистом(ЭтотОбъект, Узел);
КонецФункции

Функция СоздатьЛистовойУзел(Наименование, Вопрос = Неопределено)
    Возврат ТестированиеБинарноеДерево.СоздатьЛистовойУзел(Наименование, Вопрос);
КонецФункции

Функция ПолучитьПрогресс() Экспорт
    Возврат ТестированиеБинарноеДерево.ПолучитьПрогрессТеста(ЭтотОбъект);
КонецФункции

// Возвращает узел дерева для указанного вопроса
// Если узел не существует - создает новый
Функция ПолучитьУзелДляВопроса(Вопрос) Экспорт
    
    Если Вопрос = Неопределено Или Вопрос.Пустая() Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    // Поиск существующего узла для этого вопроса
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Узлы.Ссылка
    |ИЗ
    |    Справочник.УзлыБинарногоДерева КАК Узлы
    |ГДЕ
    |    Узлы.Вопрос = &Вопрос";
    
    Запрос.УстановитьПараметр("Вопрос", Вопрос);
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        // Возвращаем существующий узел
        Возврат Выборка.Ссылка.ПолучитьОбъект();
    КонецЕсли;
    
    // Создаем новый узел для вопроса
    Попытка
        НовыйУзел = Справочники.УзлыБинарногоДерева.СоздатьЭлемент();
        НовыйУзел.Наименование = Вопрос.ТекстФормулировки;
        НовыйУзел.Вопрос = Вопрос;
        НовыйУзел.ЯвляетсяЛистом = Ложь;
        НовыйУзел.Уровень = 0;
        
        // Проверка уникальности перед записью - ВЫЗЫВАЕМ ИЗ ОБЩЕГО МОДУЛЯ
        Если Не ТестированиеБинарноеДерево.ПроверитьУникальностьУзла(НовыйУзел) Тогда
            Сообщить("Предупреждение: Узел с таким наименованием уже существует");
            // Ищем существующий узел по наименованию - ВЫЗЫВАЕМ ИЗ ОБЩЕГО МОДУЛЯ
            СуществующийУзел = ТестированиеБинарноеДерево.НайтиУзелПоНаименованию(Вопрос.ТекстФормулировки);
            Если СуществующийУзел <> Неопределено Тогда
                Возврат СуществующийУзел;
            КонецЕсли;
		КонецЕсли; 
		
        НовыйУзел.Записать();
        Сообщить("Создан новый узел для вопроса: " + Вопрос.ТекстФормулировки);
		Если НовыйУзел <> Неопределено Тогда
			// Если нужно добавить в структуру
			ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(ЭтотОбъект, Неопределено, Неопределено, НовыйУзел, Вопрос, Ложь);
			//Если ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево Тогда
			//	// Пример: Создать листовые узлы для Да/Нет
			//	ЛистДа = СоздатьЛистовойУзел("Да для " + Вопрос.ТекстФормулировки, Вопрос);
			//	ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(ЭтотОбъект, НовыйУзел.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да, ЛистДа, Вопрос, Истина);
			//	// Аналогично для Нет
			//КонецЕсли;
		КонецЕсли;        
	
        Возврат НовыйУзел;
        
    Исключение
        Сообщить("Ошибка при создании узла для вопроса: " + ОписаниеОшибки());
        Возврат Неопределено;
    КонецПопытки;
    
КонецФункции

// Добавить процедуру обработки ответов для бинарного дерева
Процедура ОбработатьОтветБинарногоДерева(ТипОтвета) Экспорт
    
    Если Завершен Тогда
        Сообщить("Тест уже завершен");
        Возврат;
    КонецЕсли;
    
    Если ТекущийУзелДерева = Неопределено Тогда
        Сообщить("Не установлен текущий узел дерева");
        Возврат;
    КонецЕсли;
    
    // Вызываем метод из общего модуля
    ТестированиеБинарноеДерево.ОбработатьОтвет(Ссылка, ТипОтвета);
	ЭтотОбъект.ПроцентЗавершения = ТестированиеБинарноеДерево.ПолучитьПрогрессТеста(Ссылка);
	
КонецПроцедуры

// Получить текущий вопрос для отображения
Функция ПолучитьТекущийВопрос() Экспорт
    
    Если ТекущийУзелДерева = Неопределено Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    Возврат ТекущийУзелДерева.Вопрос;
    
КонецФункции

// Проверить завершен ли тест
Функция ТестЗавершен() Экспорт
    
    Если ТекущийУзелДерева = Неопределено Тогда
        Возврат Истина;
    КонецЕсли;
    
    Возврат ТекущийУзелДерева.ЯвляетсяЛистом;
    
КонецФункции

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    
    Если ОбменДанными.Загрузка Тогда
        Возврат;
    КонецЕсли;

    // ⭐ ИСПРАВЛЕНИЕ: Проверяем заполнение обязательных полей
    Если Не ЗначениеЗаполнено(Дата) Тогда
        Дата = ТекущаяДата();
    КонецЕсли;
    
    Если Не ЗначениеЗаполнено(ТипТестирования) Тогда
        ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
    КонецЕсли;    

    // ⭐ ДИАГНОСТИКА: Сохраняем исходное состояние результата
    ИсходныйРезультат = РезультатСдачи;
    ИсходныйПроцент = ПроцентЗавершения;
    Сообщить("=== ДИАГНОСТИКА ПередЗаписью ===");
    Сообщить("   Тип тестирования: " + ТипТестирования);
    Сообщить("   Исходный результат: " + ИсходныйРезультат);
    Сообщить("   Исходный процент: " + ИсходныйПроцент);
    Сообщить("   Завершен: " + Завершен);
    Сообщить("   Текущий узел: " + ?(ТекущийУзелДерева = Неопределено, "Неопределено", ТекущийУзелДерева.Наименование));

    // ⭐ КРИТИЧЕСКОЕ ИСПРАВЛЕНИЕ: Правильная проверка типа тестирования
    Если ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево Тогда
        Сообщить("   ОБРАБОТКА БИНАРНОГО ДЕРЕВА:");
        
        // Проверка целостности для бинарного дерева
		// Проверку целостности выполняем ТОЛЬКО для уже существующих документов, а не для новых.
		Если НЕ ЭтотОбъект.ЭтоНовый() Тогда
		    Если Не ТестированиеБинарноеДерево.ПроверитьЦелостностьСтруктурыДерева(ЭтотОбъект) Тогда
		        Отказ = Истина;
		        Сообщить("Обнаружены ошибки в структуре бинарного дерева!");
		        ВызватьИсключение "Обнаружены ошибки в структуре бинарного дерева!";
		    КонецЕсли;
		Иначе
		    Сообщить("   - Проверка целостности пропущена для нового документа.");
		КонецЕсли;        
        // ⭐ ВАЖНО: Для бинарного дерева НИКОГДА не пересчитываем результат
        // Результат устанавливается только в процессе тестирования
        Сообщить("   - Сохранен существующий результат: " + РезультатСдачи);
        Сообщить("   - Для бинарного дерева результат не пересчитывается");
        
    Иначе
        // ⭐ ДИАГНОСТИКА: Показываем что происходит с плоским тестированием
        Сообщить("   ОБРАБОТКА ПЛОСКОГО ТЕСТИРОВАНИЯ:");
        
        // Только для плоского тестирования используем старую логику расчета результата
        СтруктураОтбора = Новый Структура();
        СтруктураОтбора.Вставить("Проверен", Ложь);
        СтруктураОтбора.Вставить("ОтветПолучен", Истина);
        ЕстьНепроверенные = ВопросыБинарногоДерева.НайтиСтроки(СтруктураОтбора).Количество() > 0;
        
        Если ЕстьНепроверенные Тогда
            РезультатСдачи = Перечисления.РезультатыСдачи.НаПроверке;
            Сообщить("   - Установлен результат НаПроверке (есть непроверенные)");
        Иначе
            КоличествоВопросов = ВопросыБинарногоДерева.Количество();
            Если КоличествоВопросов > 0 Тогда
                НабоаноБаллов = ВопросыБинарногоДерева.Итог("Правильность") / КоличествоВопросов;
                Если ЗначениеЗаполнено(ШаблонТеста) Тогда
                    НеобходимоБаллов = ШаблонТеста.ПроцентДляСдачи;
                    Если НабоаноБаллов >= НеобходимоБаллов Тогда
                        РезультатСдачи = Перечисления.РезультатыСдачи.Сдан;
                        Сообщить("   - Установлен результат Сдан (баллы: " + НабоаноБаллов + " >= " + НеобходимоБаллов + ")");
                    Иначе
                        РезультатСдачи = Перечисления.РезультатыСдачи.НеСдан;
                        Сообщить("   - Установлен результат НеСдан (баллы: " + НабоаноБаллов + " < " + НеобходимоБаллов + ")");
                    КонецЕсли;
                Иначе
                    РезультатСдачи = Перечисления.РезультатыСдачи.НеСдан;
                    Сообщить("   - Установлен результат НеСдан (нет шаблона)");
                КонецЕсли;
            Иначе
                РезультатСдачи = Перечисления.РезультатыСдачи.НеСдан;
                Сообщить("   - Установлен результат НеСдан (нет вопросов)");
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    
    // ⭐ ДИАГНОСТИКА: Показываем финальное состояние
    Сообщить("   Финальный результат: " + РезультатСдачи);
    Сообщить("   Финальный процент: " + ПроцентЗавершения);
    Если ИсходныйРезультат <> РезультатСдачи Тогда
        Сообщить("   ⚠️ РЕЗУЛЬТАТ ИЗМЕНЕН: " + ИсходныйРезультат + " -> " + РезультатСдачи);
    Иначе
        Сообщить("   ✓ Результат не изменен");
    КонецЕсли;
    Сообщить("=== КОНЕЦ ДИАГНОСТИКИ ===");
    
    // ⭐ ИСПРАВЛЕННОЕ СОХРАНЕНИЕ В РЕГИСТРЫ ПРИ ЗАПИСИ
    Если Не ОбменДанными.Загрузка Тогда
        Если ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево Тогда
            
            // ⭐ ВАЖНОЕ ИСПРАВЛЕНИЕ: Сохраняем ответы только если они есть
            Если ОтветыБинарногоДерева.Количество() > 0 Тогда
                ТестированиеБинарноеДерево.СохранитьОтветыВРегистр(ЭтотОбъект);
            КонецЕсли;
            
            // ⭐ ВАЖНОЕ ИСПРАВЛЕНИЕ: Сохраняем состояние только если текущий узел не пустой
            Если ТекущийУзелДерева <> Неопределено И НЕ ТекущийУзелДерева.Пустая() Тогда
                ТестированиеБинарноеДерево.СохранитьСостояниеТестаВРегистр(ЭтотОбъект);
                Сообщить("   Состояние теста сохранено в регистр");
            Иначе
                Сообщить("   Состояние теста НЕ сохранено (текущий узел пустой)");
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    
    Сообщить("Размер ТЧ вопросов перед записьь: " + ВопросыБинарногоДерева.Количество())
КонецПроцедуры

//Процедура ПриЗаписи(Отказ, РежимЗаписи, РежимПроведения)
//    
//    // Сохраняем структуру дерева в регистр если это шаблон
//    Если ШаблонТеста <> Неопределено И НЕ ШаблонТеста.Пустая() Тогда
//        ТестированиеБинарноеДерево.СохранитьСтруктуруДереваВРегистр(ШаблонТеста);
//    КонецЕсли;
//    
//КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, Режим)

	Если ВопросыБинарногоДерева.Количество() = 0 Тогда
		Отказ = Истина;
		Сообщить("ТЧ Вопросы пустая, проведение отменено!");
		Возврат;
	КонецЕсли;	

	УстановитьПривилегированныйРежим(Истина);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаВопросы.Вопрос,
		|	ТаблицаВопросы.Раздел,
		|	ТаблицаВопросы.Правильность,
		|	ТаблицаВопросы.ОтветПолучен,
		|	ТаблицаВопросы.НомерСтроки
		|ПОМЕСТИТЬ ПодобранныеВопросы
		|ИЗ
		|	&ТаблицаВопросы КАК ТаблицаВопросы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодобранныеВопросы.Вопрос,
		|	ПодобранныеВопросы.Раздел,
		|	ПодобранныеВопросы.Правильность,
		|	ПодобранныеВопросы.ОтветПолучен,
		|	ИСТИНА КАК Активность,
		|	&Ссылка КАК Регистратор,
		|	&Ссылка КАК Тест,
		|	ПодобранныеВопросы.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ПодобранныеВопросы КАК ПодобранныеВопросы";
	
	Запрос.УстановитьПараметр("ТаблицаВопросы",ВопросыБинарногоДерева);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли


// Локальная версия проверки уникальности узла
Функция ПроверитьУникальностьУзла(Узел)
    
    // Вызываем из общего модуля
    Возврат ТестированиеБинарноеДерево.ПроверитьУникальностьУзла(Узел);
    
КонецФункции

// Локальная версия поиска узла по наименованию
Функция НайтиУзелПоНаименованию(НаименованиеУзла)
    
    // Вызываем из общего модуля
    Возврат ТестированиеБинарноеДерево.НайтиУзелПоНаименованию(НаименованиеУзла);
    
КонецФункции

// Локальная версия проверки целостности структуры
Функция ПроверитьЦелостностьСтруктурыДерева(Тест)
    
    // Вызываем из общего модуля
    Возврат ТестированиеБинарноеДерево.ПроверитьЦелостностьСтруктурыДерева(Тест);
    
КонецФункции



//=================

