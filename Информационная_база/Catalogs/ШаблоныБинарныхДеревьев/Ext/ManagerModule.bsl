#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Групповое изменение объектов

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	РедактируемыеРеквизиты.Добавить("Наименование");
	РедактируемыеРеквизиты.Добавить("КонтролироватьВремя");
	РедактируемыеРеквизиты.Добавить("ВремяНаСдачу");
	РедактируемыеРеквизиты.Добавить("ПроцентДляСдачи");
	РедактируемыеРеквизиты.Добавить("ПеремешиватьВариантыОтветов");
	РедактируемыеРеквизиты.Добавить("Разделы.*");
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

//#КонецОбласти

//#КонецЕсли

//Для бинарного дерева
//Модуль менеджера "ТестБинарноеДерево"

#Область УправляемыйИнтерфейс

// Создает структуру бинарного дерева для шаблона
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//
Процедура СоздатьСтруктуруДерева(Шаблон) Экспорт
	
	// Получаем все вопросы по разделам шаблона
	Вопросы = ПолучитьВсеВопросыПоШаблону(Шаблон);
	Если Вопросы.Количество() = 0 Тогда
		ВызватьИсключение "Для шаблона не найдены вопросы";
	КонецЕсли;
	
	// Создаем корневой узел
	КорневойУзел = Справочники.УзлыБинарногоДерева.СоздатьЭлемент();
	КорневойУзел.Наименование = "Корневой узел";
	КорневойУзел.Вопрос = Вопросы[0];
	КорневойУзел.ЯвляетсяЛистом = Ложь;
	КорневойУзел.Записать();
	
	// Создаем начальную структуру дерева
	СоздатьНачальнуюСтруктуруДерева(Шаблон, КорневойУзел, Вопросы);
	
КонецПроцедуры

// Получает все вопросы по шаблону
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//
// Возвращаемое значение:
//   Массив - массив ссылок на вопросы
//
Функция ПолучитьВсеВопросыПоШаблону(Шаблон)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазделыВопросы.Вопрос
	|ИЗ
	|	Справочник.ШаблоныБинарныхДеревьев.Разделы КАК ШаблоныРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Разделы.Вопросы КАК РазделыВопросы
	|		ПО ШаблоныРазделы.Раздел = РазделыВопросы.Ссылка
	|ГДЕ
	|	ШаблоныРазделы.Ссылка = &Шаблон";
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Результат = Запрос.Выполнить().Выгрузить();
	МассивВопросов = Новый Массив;
	
	Для Каждого Строка Из Результат Цикл
		МассивВопросов.Добавить(Строка.Вопрос);
	КонецЦикла;
	
	Возврат МассивВопросов;
	
КонецФункции

// Создает начальную структуру дерева
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//  КорневойУзел - СправочникСсылка.УзлыБинарногоДерева
//  Вопросы - Массив - доступные вопросы
//
Процедура СоздатьНачальнуюСтруктуруДерева(Шаблон, КорневойУзел, Вопросы)
	
	// Создаем несколько начальных узлов для демонстрации
	Если Вопросы.Количество() > 1 Тогда
		
		// Узел для ответа "Да"
		УзелДа = СоздатьУзелДерева("Узел Да", Вопросы[1], Ложь);
		ДобавитьСвязьВДерево(Шаблон, КорневойУзел, УзелДа, Перечисления.ТипыСвязейБинарногоДерева.Да);
		
		// Узел для ответа "Нет"  
		УзелНет = СоздатьУзелДерева("Узел Нет", Вопросы[2 % Вопросы.Количество()], Истина);
		ДобавитьСвязьВДерево(Шаблон, КорневойУзел, УзелНет, Перечисления.ТипыСвязейБинарногоДерева.Нет);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает узел дерева
//
// Параметры:
//  Наименование - Строка
//  Вопрос - ПланВидовХарактеристик.ВопросыДляТестирования
//  ЯвляетсяЛистом - Булево
//
// Возвращаемое значение:
//   СправочникСсылка.УзлыБинарногоДерева
//
Функция СоздатьУзелДерева(Наименование, Вопрос, ЯвляетсяЛистом)
	
	Узел = Справочники.УзлыБинарногоДерева.СоздатьЭлемент();
	Узел.Наименование = Наименование;
	Узел.Вопрос = Вопрос;
	Узел.ЯвляетсяЛистом = ЯвляетсяЛистом;
	Узел.Записать();
	
	Возврат Узел;
	
КонецФункции

// Добавляет связь в дерево
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//  Родитель - СправочникСсылка.УзлыБинарногоДерева
//  Потомок - СправочникСсылка.УзлыБинарногоДерева
//  ТипСвязи - ПеречислениеСсылка.ТипыСвязейБинарногоДерева
//
Процедура ДобавитьСвязьВДерево(Шаблон, Родитель, Потомок, ТипСвязи)
	
	Запись = РегистрыСведений.СтруктураБинарногоДерева.СоздатьНаборЗаписей();
	НоваяЗапись = Запись.Добавить();
	НоваяЗапись.Шаблон = Шаблон;
	НоваяЗапись.Родитель = Родитель;
	НоваяЗапись.ТипСвязи = ТипСвязи;
	НоваяЗапись.Потомок = Потомок;
	Запись.Записать();
	
КонецПроцедуры


// Создает новый тест бинарного дерева
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//  Респондент - СправочникСсылка.Контакты
//
// Возвращаемое значение:
//   ДокументСсылка.ТестБинарноеДерево
//
Функция СоздатьТест(Шаблон, Респондент) Экспорт
	
	Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
	Тест.Шаблон = Шаблон;
	Тест.Респондент = Респондент;
	Тест.ДатаНачала = ТекущаяДата();
	//Тест.Опрос = Объект.Ссылка;
	Тест.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
	Тест.Завершен = Ложь;
	
	// Находим корневой узел для данного шаблона
	КорневойУзел = НайтиКорневойУзел(Шаблон);
	Если КорневойУзел = Неопределено Тогда
		ВызватьИсключение "Для шаблона не найден корневой узел";
	КонецЕсли;
	
	Тест.ТекущийУзел = КорневойУзел;
	
	// Записываем первый вопрос
	ЗаписатьВопросТеста(Тест, КорневойУзел);
	
	Возврат Тест;
	
КонецФункции

// Находит корневой узел для шаблона
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//
// Возвращаемое значение:
//   СправочникСсылка.УзлыБинарногоДерева
//
Функция НайтиКорневойУзел(Шаблон)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураДерева.Родитель
	|ИЗ
	|	РегистрСведений.СтруктураБинарногоДерева КАК СтруктураДерева
	|ГДЕ
	|	СтруктураДерева.Шаблон = &Шаблон
	|	И НЕ СУЩЕСТВУЕТ (ВЫБРАТЬ
	|			СтруктураДереваВложенный.Потомок
	|		ИЗ
	|			РегистрСведений.СтруктураБинарногоДерева КАК СтруктураДереваВложенный
	|		ГДЕ
	|			СтруктураДереваВложенный.Потомок = СтруктураДерева.Родитель
	|			И СтруктураДереваВложенный.Шаблон = &Шаблон)";
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Родитель;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Записывает вопрос в регистр вопросов теста
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//  Узел - СправочникСсылка.УзлыБинарногоДерева
//
Процедура ЗаписатьВопросТеста(Тест, Узел)
	
	Запись = РегистрыСведений.ВопросыТестаБинарноеДерево.СоздатьНаборЗаписей();
	НоваяЗапись = Запись.Добавить();
	НоваяЗапись.Тест = Тест.Ссылка;
	НоваяЗапись.Узел = Узел;
	НоваяЗапись.Вопрос = Узел.Вопрос;
	НоваяЗапись.Порядок = ПолучитьСледующийПорядок(Тест);
	НоваяЗапись.ДатаВопроса = ТекущаяДата();
	Запись.Записать();
	
КонецПроцедуры

// Получает следующий порядковый номер для вопроса
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//
// Возвращаемое значение:
//   Число
//
Функция ПолучитьСледующийПорядок(Тест)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВопросыТеста.Порядок) КАК МаксПорядок
	|ИЗ
	|	РегистрСведений.ВопросыТестаБинарноеДерево КАК ВопросыТеста
	|ГДЕ
	|	ВопросыТеста.Тест = &Тест";
	
	Запрос.УстановитьПараметр("Тест", Тест.Ссылка);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат ?(Результат.МаксПорядок = Неопределено, 1, Результат.МаксПорядок + 1);
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

// Находит следующий узел по ответу
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//  ТекущийУзел - СправочникСсылка.УзлыБинарногоДерева
//  Ответ - Булево
//
// Возвращаемое значение:
//   СправочникСсылка.УзлыБинарногоДерева
//
Функция НайтиСледующийУзел(Шаблон, ТекущийУзел, Ответ)
	
	ТипСвязи = ?(Ответ, 
		Перечисления.ТипыСвязейБинарногоДерева.Да,
		Перечисления.ТипыСвязейБинарногоДерева.Нет);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтруктураДерева.Потомок
	|ИЗ
	|	РегистрСведений.СтруктураБинарногоДерева КАК СтруктураДерева
	|ГДЕ
	|	СтруктураДерева.Шаблон = &Шаблон
	|	И СтруктураДерева.Родитель = &ТекущийУзел
	|	И СтруктураДерева.ТипСвязи = &ТипСвязи";
	
	Запрос.УстановитьПараметр("Шаблон", Шаблон);
	Запрос.УстановитьПараметр("ТекущийУзел", ТекущийУзел);
	Запрос.УстановитьПараметр("ТипСвязи", ТипСвязи);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Потомок;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Получает историю вопросов и ответов теста
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//
// Возвращаемое значение:
//   ТаблицаЗначений - история теста
//
Функция ПолучитьИсториюТеста(Тест) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВопросыТеста.Вопрос,
	|	ВопросыТеста.ДатаВопроса,
	|	Ответы.Ответ,
	|	Ответы.ДатаОтвета
	|ИЗ
	|	РегистрСведений.ВопросыТестаБинарноеДерево КАК ВопросыТеста
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтветыБинарноеДерево КАК Ответы
	|		ПО ВопросыТеста.Тест = Ответы.Тест
	|			И ВопросыТеста.Узел = Ответы.Узел
	|ГДЕ
	|	ВопросыТеста.Тест = &Тест
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВопросыТеста.Порядок";
	
	Запрос.УстановитьПараметр("Тест", Тест.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли