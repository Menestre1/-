#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект,ДанныеЗаполнения);
	КонецЕсли;
	
	// Устанавливаем значение по умолчанию для типа тестирования
	Если Не ЗначениеЗаполнено(ТипТестирования) Тогда
		ТипТестирования = Перечисления.ТипыТестирования.Плоское;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ЭтотОбъект.КонтролироватьВремя = Ложь Тогда
		ЭтотОбъект.ВремяНаСдачу = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив();
	
	Если НЕ КонтролироватьВремя Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВремяНаСдачу");
	КонецЕсли;

	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

// Модуль менеджера ШаблоныБинарныхДеревьев
//
//СоздатьСтруктуруДерева()           ← ВНЕШНИЙ ВЫЗОВ
//    │
//    ├── ПолучитьВсеВопросыПоШаблону()
//    │
//    ├── Создать КОРНЕВОЙ узел
//    │
//    ├── Добавить НАЧАЛЬНУЮ связь
//    │
//    └── СоздатьНачальнуюСтруктуруДерева()  ← ВНУТРЕННИЙ ВЫЗОВ
//            │
//            ├── Создать УЗЕЛ ДА (уровень 1)
//            │
//            ├── Создать УЗЕЛ НЕТ (уровень 1)  
//            │
//            └── СоздатьВеткуДерева()       ← РЕКУРСИЯ
////ЛОГИКА РАЗДЕЛЕНИЯ ФУНКЦИЙ
////СоздатьСтруктуруДерева - ВНЕШНИЙ ИНТЕРФЕЙС
////bsl
////// ВЫСОКОУРОВНЕВАЯ ОПЕРАЦИЯ - для внешнего вызова
////Процедура СоздатьСтруктуруДерева(Шаблон) Экспорт
////Назначение: Основная точка входа для создания всего дерева
////Уровень: Высокоуровневый менеджер
////Экспорт: Доступна извне модуля
////Что делает:
////✅ Получает все вопросы шаблона
////✅ Создает КОРНЕВОЙ узел
////✅ Добавляет НАЧАЛЬНУЮ связь
////✅ Запускает построение остальной структуры
////СоздатьНачальнуюСтруктуруДерева - ВНУТРЕННЯЯ ЛОГИКА
////// ВНУТРЕННЯЯ ОПЕРАЦИЯ - для внутреннего использования  
////Процедура СоздатьНачальнуюСтруктуруДерева(Шаблон, КорневойУзел, Вопросы)
////Назначение: Создание первых уровней дерева после корня
////Уровень: Внутренняя реализация
////Экспорт: НЕ экспортируется (внутренняя)
////Что делает:
////✅ Создает УЗЕЛ ДА от корня
////✅ Создает УЗЕЛ НЕТ от корня
////✅ Запускает рекурсивное построение веток

#Область УправляемыйИнтерфейс

// Получает все вопросы по шаблону
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//
// Возвращаемое значение:
//   Массив - массив ссылок на вопросы
//
Функция ПолучитьВсеВопросыПоШаблону(Шаблон)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗЛИЧНЫЕ
    |    РазделыВопросы.Вопрос
    |ИЗ
    |    Справочник.ШаблоныБинарныхДеревьев.Разделы КАК ШаблоныРазделы
    |        ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Разделы.Вопросы КАК РазделыВопросы
    |        ПО ШаблоныРазделы.Раздел = РазделыВопросы.Ссылка
    |ГДЕ
    |    ШаблоныРазделы.Ссылка = &Шаблон";
    
    Запрос.УстановитьПараметр("Шаблон", Шаблон);
    
    Результат = Запрос.Выполнить().Выгрузить();
    МассивВопросов = Новый Массив;
    
    Для Каждого Строка Из Результат Цикл
        МассивВопросов.Добавить(Строка.Вопрос);
    КонецЦикла;
    
    Возврат МассивВопросов;
    
КонецФункции

// Добавляет связь в дерево
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//  Родитель - СправочникСсылка.УзлыБинарногоДерева
//  Потомок - СправочникСсылка.УзлыБинарногоДерева
//  ТипОтвета - ПеречислениеСсылка.ТипыОтветовБинарногоДерева
//
Процедура ДобавитьСвязьВДерево(Шаблон, Родитель, Потомок, ТипОтвета)
    
    Запись = РегистрыСведений.СтруктураБинарногоДерева.СоздатьНаборЗаписей();
    НоваяЗапись = Запись.Добавить();
    НоваяЗапись.ШаблонТеста = Шаблон;
    НоваяЗапись.РодительскийУзел = Родитель;
    НоваяЗапись.ТипОтвета = ТипОтвета;
    НоваяЗапись.СледующийУзелДерева = Потомок;
    НоваяЗапись.Вопрос = Потомок.Вопрос;
    НоваяЗапись.ЯвляетсяЛистом = Потомок.ЯвляетсяЛистом;
    Запись.Записать();
    
КонецПроцедуры


// Создает структуру бинарного дерева для шаблона
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//
Процедура СоздатьСтруктуруДерева(Шаблон) Экспорт
    
    // Получаем все вопросы по разделам шаблона
    Вопросы = ПолучитьВсеВопросыПоШаблону(Шаблон);
    Если Вопросы.Количество() = 0 Тогда
        ВызватьИсключение "Для шаблона не найдены вопросы";
    КонецЕсли;
    
    // Создаем корневой узел
    КорневойУзел = Справочники.УзлыБинарногоДерева.СоздатьУзел(Вопросы[0], Ложь, 0);
    
    // Добавляем начальную связь
    ДобавитьСвязьВДерево(Шаблон, Неопределено, КорневойУзел, Перечисления.ТипыОтветовБинарногоДерева.Начальный);
    
    // Создаем начальную структуру дерева
    СоздатьНачальнуюСтруктуруДерева(Шаблон, КорневойУзел, Вопросы);
    
КонецПроцедуры

// Создает начальную структуру дерева
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//  КорневойУзел - СправочникСсылка.УзлыБинарногоДерева
//  Вопросы - Массив - доступные вопросы
//
Процедура СоздатьНачальнуюСтруктуруДерева(Шаблон, КорневойУзел, Вопросы)
    
    // Создаем несколько начальных узлов для демонстрации
    Если Вопросы.Количество() > 1 Тогда
        
        // Узел для ответа "Да"
        УзелДа = Справочники.УзлыБинарногоДерева.СоздатьУзел(Вопросы[1], Ложь, 1);
        ДобавитьСвязьВДерево(Шаблон, КорневойУзел, УзелДа, Перечисления.ТипыОтветовБинарногоДерева.Да);
        
        // Узел для ответа "Нет"  
        УзелНет = Справочники.УзлыБинарногоДерева.СоздатьУзел(Вопросы[2 % Вопросы.Количество()], Истина, 1);
        ДобавитьСвязьВДерево(Шаблон, КорневойУзел, УзелНет, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        // Рекурсивно создаем структуру для узла "Да", если есть еще вопросы
        Если Вопросы.Количество() > 2 Тогда
            СоздатьВеткуДерева(Шаблон, УзелДа, Вопросы, 2);
        КонецЕсли;
        
    КонецЕсли;
    
КонецПроцедуры

// Рекурсивно создает ветку дерева
//
// Параметры:
//  Шаблон - СправочникСсылка.ШаблоныБинарныхДеревьев
//  РодительскийУзел - СправочникСсылка.УзлыБинарногоДерева
//  Вопросы - Массив - доступные вопросы
//  ИндексНачала - Число - индекс с которого начинать создание
//
Процедура СоздатьВеткуДерева(Шаблон, РодительскийУзел, Вопросы, ИндексНачала)
    
    ТекущийИндекс = ИндексНачала;
    Уровень = РодительскийУзел.Уровень + 1;
    
    // Создаем узлы для ответов "Да" и "Нет"
    Если ТекущийИндекс < Вопросы.Количество() Тогда
        
        // Узел для ответа "Да"
        УзелДа = Справочники.УзлыБинарногоДерева.СоздатьУзел(Вопросы[ТекущийИндекс], Ложь, Уровень);
        ДобавитьСвязьВДерево(Шаблон, РодительскийУзел, УзелДа, Перечисления.ТипыОтветовБинарногоДерева.Да);
        ТекущийИндекс = ТекущийИндекс + 1;
        
    КонецЕсли;
    
    Если ТекущийИндекс < Вопросы.Количество() Тогда
        
        // Узел для ответа "Нет"
        УзелНет = Справочники.УзлыБинарногоДерева.СоздатьУзел(Вопросы[ТекущийИндекс], Истина, Уровень);
        ДобавитьСвязьВДерево(Шаблон, РодительскийУзел, УзелНет, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        ТекущийИндекс = ТекущийИндекс + 1;
        
    КонецЕсли;
    
    // Рекурсивно продолжаем для узла "Да", если есть вопросы
    Если ТекущийИндекс < Вопросы.Количество() Тогда
        СоздатьВеткуДерева(Шаблон, УзелДа, Вопросы, ТекущийИндекс);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти


#КонецЕсли

