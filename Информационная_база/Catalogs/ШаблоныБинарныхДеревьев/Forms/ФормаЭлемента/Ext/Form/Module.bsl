#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Создаем реквизиты формы ОДИН РАЗ при инициализации
	СоздатьРеквизитыФормы();
	
	// Устанавливаем значение по умолчанию для типа тестирования при создании нового элемента
	Если Объект.Ссылка.Пустая() И Не ЗначениеЗаполнено(Объект.ТипТестирования) Тогда
		Объект.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
	КонецЕсли;
	//Элементы.ПолеИнформацииУзла.ПутьКДанным = "ИнформацияОбУзле";
	
	СоздатьИнтерфейсПросмотраДерева();

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСтруктуруДерева(Команда)
	
	Если Объект.Ссылка = Неопределено Тогда
		Сообщить("⚠️ Сначала сохраните шаблон");
		Возврат;
	КонецЕсли;
	
	Попытка
		Сообщить("=== СОЗДАНИЕ СТРУКТУРЫ ДЕРЕВА ===");
		
		// Используем существующую серверную процедуру
		СоздатьСтруктуруДереваНаСервере(Объект.Ссылка);
		
		Сообщить("✅ Структура дерева создана!");
		
		// Обновляем интерфейс
		ОбновитьИнтерфейсДерева();
		
	Исключение
		Сообщить("❌ Ошибка создания структуры: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСтруктуруДереваНаСервере(СсылкаНаШаблон)
    
    Шаблон = СсылкаНаШаблон.ПолучитьОбъект();
    ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Шаблон);
    
КонецПроцедуры

&НаСервере
Функция ПолучитьКорневойУзелНаСервере(СсылкаНаШаблон)
    
    Возврат ТестированиеБинарноеДерево.ПолучитьКорневойУзелИзРегистра(СсылкаНаШаблон);
    
КонецФункции

&НаСервере
Функция ПолучитьВсеУзлыНаСервере()
    
    // Используем существующую функцию из модуля
    Возврат ТестированиеБинарноеДерево.ПолучитьВсеУзлыДерева();
    
КонецФункции

&НаСервере
Функция ПроверитьЦелостностьДанныхНаСервере()
    
    Возврат ТестированиеБинарноеДерево.ПроверитьЦелостностьДанных();
    
КонецФункции

&НаСервере
Функция СоздатьВопросНаСервере(ТекстВопроса, Описание)
    
    Возврат ТестированиеБинарноеДерево.СоздатьВопрос(ТекстВопроса, Описание);
    
КонецФункции

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	ОбновитьИнтерфейсДерева();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолеИнформацииОТестах()
    
    Если ЭтотОбъект.Объект.Ссылка = Неопределено Тогда
        ЭтотОбъект.ИнформацияОбУзле = "Шаблон не сохранен";
        Возврат;
    КонецЕсли;
    
    ТекстИнформации = "=== ИНФОРМАЦИЯ О ШАБЛОНЕ ===|n|n";
    ТекстИнформации = ТекстИнформации + "Наименование: " + ЭтотОбъект.Объект.Наименование + "|n";
    ТекстИнформации = ТекстИнформации + "Тип тестирования: " + ЭтотОбъект.Объект.ТипТестирования + "|n";
    ТекстИнформации = ТекстИнформации + "Дата обновления: " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy HH:mm:ss");
    
    ЭтотОбъект.ИнформацияОбУзле = ТекстИнформации;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолеИнформацией()
    
    Если ЭтотОбъект.Объект.Ссылка = Неопределено Тогда
        ЭтотОбъект.ИнформацияОбУзле = "⚠️ Шаблон не сохранен";
        Возврат;
    КонецЕсли;
    
    ТекстИнформации = "=== ИНФОРМАЦИЯ О ШАБЛОНЕ ===|n|n";
    ТекстИнформации = ТекстИнформации + "Наименование: " + ЭтотОбъект.Объект.Наименование + "|n";
    ТекстИнформации = ТекстИнформации + "Тип тестирования: " + ЭтотОбъект.Объект.ТипТестирования + "|n";
    ТекстИнформации = ТекстИнформации + "Обновлено: " + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy HH:mm:ss");
    
    ЭтотОбъект.ИнформацияОбУзле = ТекстИнформации;
    Сообщить("✅ Информация загружена");
    
КонецПроцедуры

&НаКлиенте
Процедура ТестироватьБинарноеДерево(Элемент = Неопределено)
    
    Сообщить("=== ТЕСТ ДЕРЕВА ===");
    
    Попытка
        // 1. Заполняем регистр деревом "Угадай животное"
        Если Объект.Ссылка = Неопределено Тогда
            Сообщить("⚠️ Сначала сохраните шаблон");
            Возврат;
        КонецЕсли;
        
        Сообщить(" Заполнение регистра деревом 'Угадай животное'...");
        ЗаполнитьРегистрИзДереваЖивотное();
        
        // 2. Обновляем информацию о шаблоне
        ЗаполнитьПолеИнформацией();
        
        // 3. Загружаем дерево из регистра и отображаем в поле
        ОбновитьСтруктуруДерева();
        
        // 4. Обновляем статистику
        ОбновитьСтатистику();
        
        Сообщить("✅ Дерево 'Угадай животное' успешно загружено!");
        Сообщить("✅ Структура дерева отображена в поле просмотра!");
        
    Исключение
        Сообщить("❌ Ошибка тестирования: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДинамическийИнтерфейс()
	
	// Проверяем, не создано ли уже поле
	Если Элементы.Найти("ПолеИнформацииДинамическое") = Неопределено Тогда
		
		// Создаем новое поле, привязанное к нашему реквизиту
		НовыйЭлемент = Элементы.Добавить("ПолеИнформацииДинамическое", Тип("ПолеФормы"), Элементы.ГруппаИнфоУзла);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ИнформацияОбУзле";
		НовыйЭлемент.Заголовок = "Информация о шаблоне:";
		НовыйЭлемент.МногострочныйРежим = Истина;
		НовыйЭлемент.ТолькоПросмотр = Истина;
		НовыйЭлемент.РастягиватьПоВертикали = Истина;
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		НовыйЭлемент.Высота = 300; // Устанавливаем высоту
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеСтруктурыДерева(Шаблон)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ КОЛИЧЕСТВО(*) КАК КоличествоСвязей
    |ИЗ
    |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
    |ГДЕ
    |    Структура.ШаблонТеста = &Шаблон";
    
    Запрос.УстановитьПараметр("Шаблон", Шаблон);
    Результат = Запрос.Выполнить().Выбрать();
    Результат.Следующий();
    
    Возврат Результат.КоличествоСвязей > 0;
    
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииФормы


&НаСервере
Процедура СоздатьИнтерфейсПросмотраДерева()
	
	ОчиститьДинамическиеЭлементыИКоманды();
	
	// Основной контейнер
	ОсновнаяГруппа = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ОсновнаяГруппа", ЭтотОбъект);
	
	// Шапка с информацией о шаблоне
	СоздатьШапкуСИнформацией(ОсновнаяГруппа);
	
	// Область статистики
	СоздатьОбластьСтатистики(ОсновнаяГруппа);
	
	// Основная область просмотра дерева
	СоздатьОбластьПросмотраДерева(ОсновнаяГруппа);
	
	// Панель управления
	СоздатьПанельУправления(ОсновнаяГруппа);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьРеквизитыФормы()
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("ТекстДерева", Новый ОписаниеТипов("ФорматированныйДокумент"));
	СтруктураРеквизитов.Вставить("СтатистикаТекст", ДФИ.ОписаниеТипаСтрока(100));
	СтруктураРеквизитов.Вставить("ИнформацияОбУзле", ДФИ.ОписаниеТипаСтрока(200));
	СтруктураРеквизитов.Вставить("ПрогрессОперации", ДФИ.ОписаниеТипаЧисло(3, 0));
	
	ДФИ.СоздатьРеквизиты(ЭтотОбъект, СтруктураРеквизитов);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьШапкуСИнформацией(Родитель)
	
	ГруппаШапки = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ГруппаШапки", Родитель);
	
	// Информация о шаблоне
	ГруппаИнформации = ДФИ.СздГруппаОбычная(ЭтотОбъект, "ГруппаИнформации", ГруппаШапки, "Информация о шаблоне");
	ГруппаИнформации.Высота = 80;
	ГруппаИнформации.РастягиватьПоГоризонтали = Истина;
	
	// Поле информации
	Если Элементы.Найти("ПолеИнформации") = Неопределено Тогда
		ПолеИнформации = ДФИ.СздПоле(ЭтотОбъект, "ПолеИнформации", ГруппаИнформации, "Информация:", 1);
		ПолеИнформации.МногострочныйРежим = Истина;
		ПолеИнформации.Высота = 60;
		ПолеИнформации.РастягиватьПоГоризонтали = Истина;
		ПолеИнформации.ТолькоПросмотр = Истина;
		Сообщить("✅ Создано поле 'ПолеИнформации'");
	Иначе
		Сообщить("ℹ️ Поле 'ПолеИнформации' уже существует");
	КонецЕсли;
	
	// Кнопка обновления
	Если Элементы.Найти("КнопкаОбновления") = Неопределено Тогда
		ДФИ.СоздатьКоманду(ЭтотОбъект, "ОбновитьДерево", "Обновить", "ОбновитьДерево");
		КнопкаОбновления = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаОбновления", ГруппаШапки, "Обновить", "ОбновитьДерево");
		Сообщить("✅ Создана кнопка 'КнопкаОбновления'");
	Иначе
		Сообщить("ℹ️ Кнопка 'КнопкаОбновления' уже существует");
	КонецЕсли;
	
	// Кнопка тестирования
	Если Элементы.Найти("КнопкаТестирования") = Неопределено Тогда
		ДФИ.СоздатьКоманду(ЭтотОбъект, "ТестироватьБинарноеДерево", "Тест", "ТестироватьБинарноеДерево");
		КнопкаТестирования = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаТестирования", ГруппаШапки, "Тест", "ТестироватьБинарноеДерево");
		Сообщить("✅ Создана кнопка 'КнопкаТестирования'");
	Иначе
		Сообщить("ℹ️ Кнопка 'КнопкаТестирования' уже существует");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОбластьСтатистики(Родитель)
    
    ГруппаСтатистики = ДФИ.СздГруппаОбычная(ЭтотОбъект, "ГруппаСтатистики", Родитель, "Статистика дерева");
    // --- ИЗМЕНЕНИЕ: ЗАПРЕЩАЕМ РАСТЯГИВАТЬСЯ ---
    ГруппаСтатистики.РастягиватьПоВертикали = Ложь;
    ГруппаСтатистики.Высота = 6; // Высота в строках
    ГруппаСтатистики.РастягиватьПоГоризонтали = Истина;
    
    // Поле статистики
    ПолеСтатистики = ДФИ.СздПоле(ЭтотОбъект, "ПолеСтатистики", ГруппаСтатистики, "Статистика:", 1, "СтатистикаТекст");
    ПолеСтатистики.МногострочныйРежим = Истина;
    ПолеСтатистики.РастягиватьПоГоризонтали = Истина;
    ПолеСтатистики.ТолькоПросмотр = Истина;
    
КонецПроцедуры

&НаСервере
Процедура СоздатьОбластьПросмотраДерева(Родитель)
    
    // Группа без заголовка для области просмотра
    ГруппаПросмотра = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ГруппаПросмотра", Родитель);
    ГруппаПросмотра.РастягиватьПоГоризонтали = Истина;
    // --- ИЗМЕНЕНИЕ: РАЗРЕШАЕМ РАСТЯГИВАТЬСЯ ---
    ГруппаПросмотра.РастягиватьПоВертикали = Истина;
    
    // ЛЕВАЯ панель - информация об узле
    ПолеИнфоУзла = ДФИ.СздПоле(ЭтотОбъект, "ПолеИнфоУзла", ГруппаПросмотра, "Информация об узле", 1, "ИнформацияОбУзле");
    ПолеИнфоУзла.Вид = ВидПоляФормы.ПолеВвода;
    ПолеИнфоУзла.МногострочныйРежим = Истина;
    ПолеИнфоУзла.РастягиватьПоВертикали = Истина; // Пусть тоже растягивается
    ПолеИнфоУзла.РастягиватьПоГоризонтали = Истина;
    
    // ПРАВАЯ панель - дерево (теперь Форматированный документ)
    // --- ИЗМЕНЕНИЕ ЭЛЕМЕНТА ---
    ПолеДерева = Элементы.Добавить("ПолеДерева", Тип("ПолеФормы"), ГруппаПросмотра);
    ПолеДерева.Вид = ВидПоляФормы.ПолеФорматированногоДокумента;
    ПолеДерева.ПутьКДанным = "ТекстДерева";
    ПолеДерева.Заголовок = "Структура дерева";
    ПолеДерева.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
    ПолеДерева.РастягиватьПоВертикали = Истина;
    ПолеДерева.РастягиватьПоГоризонтали = Истина;
    ПолеДерева.Ширина = 80; // Ширина в символах
    
КонецПроцедуры

&НаСервере
Функция СформироватьФорматированныйДокументИзСтруктуры(СтруктураДерева)
    
    // 1. Сначала формируем HTML-строку. Этот код полностью идентичен
    //    вашей клиентской функции СформироватьТекстовоеПредставлениеДерева.
    
    ТекстHTML = "<pre style='font-family: monospace; font-size: 14px;'>";
    ТекстHTML = ТекстHTML + "<b>=== ДЕРЕВО 'УГАДАЙ ЖИВОТНОЕ' ===</b><br><br>";
    
    Если НЕ СтруктураДерева.Свойство("Наименование") Тогда
        ТекстHTML = ТекстHTML + "❌ Данные дерева не получены<br>";
        ТекстHTML = ТекстHTML + "</pre>";
    Иначе
        Статистика = Новый Структура("ВсегоУзлов, Вопросов, Животных", 0, 0, 0);
        
        ТекстДерева = ОбойтиУзелИСформироватьТекстСоСтатистикойНаСервере(СтруктураДерева, 0, Статистика);
        ТекстHTML = ТекстHTML + ТекстДерева;
        
        ТекстHTML = ТекстHTML + "<br><b>=== СТАТИСТИКА ===</b><br>";
        ТекстHTML = ТекстHTML + " Всего узлов: " + Статистика.ВсегоУзлов + "<br>";
        ТекстHTML = ТекстHTML + "❓ Вопросов: " + Статистика.Вопросов + "<br>";
        ТекстHTML = ТекстHTML + " Животных: " + Статистика.Животных + "<br>";
        ТекстHTML = ТекстHTML + "</pre>";
    КонецЕсли;

    // 2. Создаем ФорматированныйДокумент и устанавливаем HTML.
    //    На сервере второй параметр не обязателен и все работает стабильно.
    ФД = Новый ФорматированныйДокумент;
    ФД.УстановитьHTML(ТекстHTML, Новый Структура());
    
    // 3. Возвращаем ГОТОВЫЙ объект.
    Возврат ФД;
    
КонецФункции

// Эта вспомогательная функция - копия вашей клиентской, но с директивой &НаСервере,
// чтобы ее можно было вызвать из основной серверной функции.
&НаСервере
Функция ОбойтиУзелИСформироватьТекстСоСтатистикойНаСервере(УзелДанные, Уровень, Статистика)
    
    Текст = "";
    
    // --- ИСПРАВЛЕНИЕ: Замена СтрПовторить на универсальный цикл ---
    Префикс = "";
    Для i = 1 По Уровень Цикл
        Префикс = Префикс + "&nbsp;&nbsp;&nbsp;&nbsp;";
    КонецЦикла;
    // --- КОНЕЦ ИСПРАВЛЕНИЯ ---
    
    Статистика.ВсегоУзлов = Статистика.ВсегоУзлов + 1;
    
    Иконка = "";
    ТипУзла = "";
    Если УзелДанные.ЯвляетсяЛистом Тогда
        ТипУзла = "[ЖИВОТНОЕ]";
        Статистика.Животных = Статистика.Животных + 1;
    Иначе
        Иконка = "❓";
        ТипУзла = "[ВОПРОС]";
        Статистика.Вопросов = Статистика.Вопросов + 1;
    КонецЕсли;
    
    Текст = Текст + Префикс + Иконка + " " + ТипУзла + " " + УзелДанные.Наименование + "<br>";
    
    Если НЕ УзелДанные.ЯвляетсяЛистом И УзелДанные.ТекстВопроса <> "" Тогда
        Текст = Текст + Префикс + "&nbsp;&nbsp;&nbsp;&nbsp;" + УзелДанные.ТекстВопроса + "<br>";
    КонецЕсли;
    
    Если УзелДанные.Свойство("ДочерниеУзлы") Тогда
        Для Каждого ДочернийУзел Из УзелДанные.ДочерниеУзлы Цикл
            Стрелка = ?(ДочернийУзел.ТипОтвета = "Да", "✅ ДА →", "❌ НЕТ →");
            Текст = Текст + Префикс + "&nbsp;&nbsp;&nbsp;" + Стрелка + "<br>";
            Текст = Текст + ОбойтиУзелИСформироватьТекстСоСтатистикойНаСервере(ДочернийУзел, Уровень + 1, Статистика);
        КонецЦикла;
    КонецЕсли;
    
    Возврат Текст;
    
КонецФункции

&НаСервере
Процедура ЗаполнитьРегистрИзДереваЖивотное()
    
    Если Объект.Ссылка.Пустая() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        // Очищаем существующие данные для этого шаблона
        ОчиститьРегистрПоШаблону(Объект.Ссылка);
        
        // Создаем дерево "Угадай животное" в регистре
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Объект.Ссылка);
        
        Сообщить("✅ Регистр заполнен деревом 'Угадай животное'");
        
    Исключение
        Сообщить("❌ Ошибка заполнения регистра: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаСервере
Процедура ОчиститьРегистрПоШаблону(Шаблон)
    
    Попытка
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |    Структура.ШаблонТеста,
        |    Структура.РодительскийУзел,
        |    Структура.ТипОтвета,
        |    Структура.СледующийУзелДерева
        |ИЗ
        |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
        |ГДЕ
        |    Структура.ШаблонТеста = &Шаблон";
        
        Запрос.УстановитьПараметр("Шаблон", Шаблон);
        Результат = Запрос.Выполнить().Выбрать();
        
        Пока Результат.Следующий() Цикл
            Попытка
                МенеджерЗаписи = РегистрыСведений.СтруктураБинарногоДерева.СоздатьМенеджерЗаписи();
                МенеджерЗаписи.ШаблонТеста = Результат.ШаблонТеста;
                МенеджерЗаписи.РодительскийУзел = Результат.РодительскийУзел;
                МенеджерЗаписи.ТипОтвета = Результат.ТипОтвета;
                МенеджерЗаписи.СледующийУзелДерева = Результат.СледующийУзелДерева;
                МенеджерЗаписи.Удалить();
            Исключение
                // Продолжаем удаление даже если есть ошибки с некоторыми записями
            КонецПопытки;
        КонецЦикла;
        
    Исключение
        Сообщить("Ошибка при очистке регистра: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаСервере
Процедура СоздатьПанельУправления(Родитель)
    
    ГруппаУправления = ДФИ.СздГруппаОбычнаяБезОтображения(ЭтотОбъект, "ГруппаУправления", Родитель);
    
    // Используем числовое значение для группировки
    ГруппаУправления.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    ГруппаУправления.РастягиватьПоГоризонтали = Ложь;
    
    // Команды управления
    ДФИ.СоздатьКоманду(ЭтотОбъект, "ПроверитьЦелостность", "Проверить целостность", "ПроверитьЦелостность");
    ДФИ.СоздатьКоманду(ЭтотОбъект, "ЭкспортироватьДерево", "Экспорт в файл", "ЭкспортироватьДерево");
    ДФИ.СоздатьКоманду(ЭтотОбъект, "ПоказатьСтатистику", "Статистика", "ПоказатьСтатистику");
    ДФИ.СоздатьКоманду(ЭтотОбъект, "ОбновитьОтображение", "Обновить отображение", "ОбновитьОтображение");
    
    // Кнопки управления
    КнопкаЦелостность = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаЦелостность", ГруппаУправления, "Проверить целостность", "ПроверитьЦелостность");
    КнопкаЦелостность.Ширина = 150;
    
    КнопкаЭкспорт = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаЭкспорт", ГруппаУправления, "Экспорт в файл", "ЭкспортироватьДерево");
    КнопкаЭкспорт.Ширина = 120;
    
    КнопкаСтатистика = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаСтатистика", ГруппаУправления, "Статистика", "ПоказатьСтатистику");
    КнопкаСтатистика.Ширина = 100;
    
    КнопкаОбновить = ДФИ.СздКнопка(ЭтотОбъект, "КнопкаОбновить", ГруппаУправления, "Обновить отображение", "ОбновитьОтображение");
    КнопкаОбновить.Ширина = 150;
    
    // Декорация-заполнитель, чтобы кнопки не растягивались по ширине
    ДекорацияЗаполнитель = Элементы.Добавить("ДекорацияЗаполнитель", Тип("ДекорацияФормы"), ГруппаУправления);
    ДекорацияЗаполнитель.Вид = ВидДекорацииФормы.Надпись;
    ДекорацияЗаполнитель.РастягиватьПоГоризонтали = Истина;
    
КонецПроцедуры

&НаСервере
Процедура ОчиститьДинамическиеЭлементыИКоманды()
    
    // ===================================================================
    // === ШАГ 1: Удаление КОМАНД (логическая часть) ===
    // ===================================================================
    
    ИменаКоманд = Новый Массив;
    ИменаКоманд.Добавить("ОбновитьДерево");
    ИменаКоманд.Добавить("ТестироватьБинарноеДерево");
    ИменаКоманд.Добавить("ПроверитьЦелостность");
    ИменаКоманд.Добавить("ЭкспортироватьДерево");
    ИменаКоманд.Добавить("ПоказатьСтатистику");
    ИменаКоманд.Добавить("ОбновитьОтображение");

    Для Каждого ИмяКоманды Из ИменаКоманд Цикл
        НайденнаяКоманда = Команды.Найти(ИмяКоманды);
        Если НайденнаяКоманда <> Неопределено Тогда
            Команды.Удалить(НайденнаяКоманда);
        КонецЕсли;
    КонецЦикла;
    
    // ===================================================================
    // === ШАГ 2: Удаление ЭЛЕМЕНТОВ (визуальная часть) ===
    // ===================================================================
    
    ИменаЭлементов = Новый Массив;
    
    // Группы
    ИменаЭлементов.Добавить("ОсновнаяГруппа");
    ИменаЭлементов.Добавить("ГруппаШапки");
    ИменаЭлементов.Добавить("ГруппаИнформации");
    ИменаЭлементов.Добавить("ГруппаСтатистики");
    ИменаЭлементов.Добавить("ГруппаПросмотра");
    ИменаЭлементов.Добавить("ГруппаУправления");
    
    // Поля
    ИменаЭлементов.Добавить("ПолеИнформации");
    ИменаЭлементов.Добавить("ПолеСтатистики");
    ИменаЭлементов.Добавить("ПолеИнфоУзла");
    ИменаЭлементов.Добавить("ПолеДерева");
    
    // Кнопки
    ИменаЭлементов.Добавить("КнопкаОбновления");
    ИменаЭлементов.Добавить("КнопкаТестирования");
    ИменаЭлементов.Добавить("КнопкаЦелостность");
    ИменаЭлементов.Добавить("КнопкаЭкспорт");
    ИменаЭлементов.Добавить("КнопкаСтатистика");
    ИменаЭлементов.Добавить("КнопкаОбновить");

    // Прочие элементы
    ИменаЭлементов.Добавить("ДекорацияЗаполнитель");
    
    // Итерация в обратном порядке — это самый надежный способ
    // для удаления вложенных элементов (сначала дети, потом родители).
    Для i = ИменаЭлементов.Количество() - 1 По 0 Цикл
        ИмяЭлемента = ИменаЭлементов[i];
        НайденныйЭлемент = Элементы.Найти(ИмяЭлемента);
        Если НайденныйЭлемент <> Неопределено Тогда
            Элементы.Удалить(НайденныйЭлемент);
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭлементы(Форма, ИменаЭлементов, Удалить = Ложь)
    
    МассивУдаляемыхЭлементов = Новый Массив;
    Если ТипЗнч(ИменаЭлементов) = Тип("Массив") Тогда
        Для Каждого ИмяЭлемента Из ИменаЭлементов Цикл
            Если Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
                МассивУдаляемыхЭлементов.Добавить(Форма.Элементы[ИмяЭлемента]);
            КонецЕсли;
        КонецЦикла;
    ИначеЕсли ТипЗнч(ИменаЭлементов) = Тип("Строка") Тогда
        Если Форма.Элементы.Найти(ИменаЭлементов) <> Неопределено Тогда
            МассивУдаляемыхЭлементов.Добавить(Форма.Элементы[ИменаЭлементов]);
        КонецЕсли;
    КонецЕсли;
    
    Если МассивУдаляемыхЭлементов.Количество() > 0 Тогда
        Если Удалить Тогда
            Форма.Элементы.Удалить(МассивУдаляемыхЭлементов);
        КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры

// Клиентские процедуры для работы с интерфейсом
&НаКлиенте
Процедура ОбновитьИнтерфейсДерева()
    
    Если Объект.Ссылка = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    // Обновляем информацию
    ОбновитьИнформациюОШаблоне();
    
    // --- ИЗМЕНЕНИЕ: Проверяем результат выполнения ---
    // Пытаемся обновить структуру дерева
    СтруктураВПорядке = ОбновитьСтруктуруДерева();
    
    // Если структура обновилась успешно, то обновляем и статистику.
    // Если нет - пропускаем, чтобы избежать падения.
    Если СтруктураВПорядке Тогда
        ОбновитьСтатистику();
    Иначе
        // Если структура не в порядке, очистим поле статистики
        ЭтотОбъект.СтатистикаТекст = "Статистика недоступна (структура дерева не загружена)";
    КонецЕсли;
    // --- КОНЕЦ ИЗМЕНЕНИЯ ---
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюОШаблоне()
    
    ЗаполнитьПолеИнформацииОТестах();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатистику()
    
    Попытка
        Если Объект.Ссылка = Неопределено Тогда
            ЭтотОбъект.СтатистикаТекст = "Шаблон не выбран";
            Возврат;
        КонецЕсли;
        
        // Проверяем наличие структуры
        ЕстьСтруктура = ПроверитьНаличиеСтруктурыДерева(Объект.Ссылка);
        
        Если НЕ ЕстьСтруктура Тогда
            ЭтотОбъект.СтатистикаТекст = "Структура не создана|nИспользуйте 'Тест'";
            Возврат;
        КонецЕсли;
        
        // --- ИЗМЕНЕНИЕ: ОДИН ВЫЗОВ ВМЕСТО ЧЕТЫРЕХ ---
        // Получаем всю статистику одной структурой с сервера
        ДанныеСтатистики = ТестированиеБинарноеДерево.ПолучитьСтатистикуДереваИзРегистра(Объект.Ссылка);
        
        // Формируем текст статистики
        ТекстСтатистики = "=== СТАТИСТИКА ДЕРЕВА ===" + Символы.ПС + Символы.ПС +
                         "Всего узлов: " + ДанныеСтатистики.ВсегоУзлов + Символы.ПС +
                         "Листовых узлов: " + ДанныеСтатистики.ЛистовыхУзлов + Символы.ПС +
                         "Глубина дерева: " + ДанныеСтатистики.Глубина;
        
        ЭтотОбъект.СтатистикаТекст = ТекстСтатистики;
        
    Исключение
        ЭтотОбъект.СтатистикаТекст = "Ошибка загрузки статистики: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
    КонецПопытки;
    
КонецПроцедуры

&НаСервере
Функция ПолучитьКорневойУзелИзРегистраВременное(Шаблон)
    
    Попытка
        // Ищем узел без родителя (корневой узел)
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    Структура.РодительскийУзел КАК Узел
        |ИЗ
        |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
        |ГДЕ
        |    Структура.ШаблонТеста = &Шаблон
        |    И Структура.РодительскийУзел = ЗНАЧЕНИЕ(Справочник.УзлыБинарногоДерева.ПустаяСсылка)";
        
        Запрос.УстановитьПараметр("Шаблон", Шаблон);
        Результат = Запрос.Выполнить().Выбрать();
        
        Если Результат.Следующий() Тогда
            Возврат Результат.Узел.ПолучитьОбъект();
        КонецЕсли;
        
        // Если не нашли узел без родителя, берем первый попавшийся родительский узел
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    РАЗЛИЧНЫЕ Структура.РодительскийУзел КАК Узел
        |ИЗ
        |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
        |ГДЕ
        |    Структура.ШаблонТеста = &Шаблон";
        
        Запрос.УстановитьПараметр("Шаблон", Шаблон);
        Результат = Запрос.Выполнить().Выбрать();
        
        Если Результат.Следующий() Тогда
            Возврат Результат.Узел.ПолучитьОбъект();
        КонецЕсли;
        
    Исключение
        // В случае ошибки возвращаем Неопределено
    КонецПопытки;
    
    Возврат Неопределено;
    
КонецФункции

&НаСервере
Функция ПолучитьКорневойУзелИзРегистраВременноеНаСервере(Шаблон)
    
    Возврат ПолучитьКорневойУзелИзРегистраВременное(Шаблон);
    
КонецФункции

&НаКлиенте
Функция ОбновитьСтруктуруДерева() // <-- Теперь это Функция
    
    Попытка
        Если Объект.Ссылка = Неопределено Тогда
            ЭтотОбъект.ТекстДерева = Неопределено;
            Возврат Истина; // Считаем успехом, просто очистили
        КонецЕсли;
        
        Сообщить(" Поиск корневого узла для шаблона: " + Объект.Ссылка);
        КорневойУзелСсылка = НайтиКорневойУзелВРегистре(Объект.Ссылка);
        
        Если КорневойУзелСсылка = Неопределено Тогда
            Сообщить("❌ Корневой узел не найден в регистре");
            СтруктураДляОтображения = Новый Структура;
            СтруктураДляОтображения.Вставить("Наименование", "ОШИБКА: Корневой узел не найден!");
            СтруктураДляОтображения.Вставить("ЯвляетсяЛистом", Истина);
            СтруктураДляОтображения.Вставить("ТекстВопроса", "Проверьте целостность данных или создайте структуру заново кнопкой 'Тест'.");
            ЭтотОбъект.ТекстДерева = СформироватьФорматированныйДокументИзСтруктуры(СтруктураДляОтображения);
            Возврат Ложь; // <-- Возвращаем НЕУДАЧУ
        Иначе
            Сообщить("✅ Найден корневой узел: " + КорневойУзелСсылка);
            Сообщить(" Получение полной структуры дерева...");
            СтруктураДляОтображения = ПолучитьСтруктуруДереваИзРегистра(Объект.Ссылка, КорневойУзелСсылка);
        КонецЕсли;

        Сообщить(" Формирование документа для отображения...");
        ЭтотОбъект.ТекстДерева = СформироватьФорматированныйДокументИзСтруктуры(СтруктураДляОтображения);
        
        Сообщить("✅ Дерево успешно загружено в поле просмотра");
        Возврат Истина; // <-- Возвращаем УСПЕХ
        
    Исключение
        Сообщить("❌ Ошибка при загрузке структуры дерева: " + ОписаниеОшибки());
        СтруктураОшибки = Новый Структура;
        СтруктураОшибки.Вставить("Наименование", "КРИТИЧЕСКАЯ ОШИБКА!");
        СтруктураОшибки.Вставить("ЯвляетсяЛистом", Истина);
        СтруктураОшибки.Вставить("ТекстВопроса", ОписаниеОшибки());
        ЭтотОбъект.ТекстДерева = СформироватьФорматированныйДокументИзСтруктуры(СтруктураОшибки);
        Возврат Ложь; // <-- Возвращаем НЕУДАЧУ
    КонецПопытки;
    
КонецФункции

&НаКлиенте
Функция СформироватьТекстовоеПредставлениеДерева(СтруктураДерева)
    
    Текст = "<pre style='font-family: monospace; font-size: 14px;'>";
    Текст = Текст + "<b>=== ДЕРЕВО 'УГАДАЙ ЖИВОТНОЕ' ===</b><br><br>"; // Используем <br> для переноса
    
    Если НЕ СтруктураДерева.Свойство("Наименование") Тогда
        Текст = Текст + "❌ Данные дерева не получены<br>";
        Возврат Текст + "</pre>"; // Не забываем закрыть тег
    КонецЕсли;
    
    Статистика = Новый Структура;
    Статистика.Вставить("ВсегоУзлов", 0);
    Статистика.Вставить("Вопросов", 0);
    Статистика.Вставить("Животных", 0);
    
    ТекстДерева = ОбойтиУзелИСформироватьТекстСоСтатистикой(СтруктураДерева, 0, Статистика);
    Текст = Текст + ТекстДерева;
    
    Текст = Текст + "<br><b>=== СТАТИСТИКА ===</b><br>";
    Текст = Текст + " Всего узлов: " + Статистика.ВсегоУзлов + "<br>";
    Текст = Текст + "❓ Вопросов: " + Статистика.Вопросов + "<br>";
    Текст = Текст + " Животных: " + Статистика.Животных + "<br>";
    
    Возврат Текст + "</pre>"; // Закрываем основной тег
    
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДереваИзРегистра(Шаблон, КорневойУзелСсылка)
    
    // Получаем полную структуру дерева с сервера
    Возврат ПолучитьСтруктуруДереваИзРегистраНаСервере(Шаблон, КорневойУзелСсылка);
    
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДереваИзРегистраНаСервере(Шаблон, КорневойУзелСсылка)
    
    // Получаем полную структуру дерева с рекурсивным обходом
    СтруктураДерева = Новый Структура;
    СтруктураДерева.Вставить("Шаблон", Шаблон);
    
    // Получаем информацию о корневом узле
    Попытка
        УзелОбъект = КорневойУзелСсылка.ПолучитьОбъект();
        СтруктураДерева.Вставить("Наименование", УзелОбъект.Наименование);
		ТекстВопросаДляСтруктуры = "";
        Если ЗначениеЗаполнено(УзелОбъект.Вопрос) Тогда
            ТекстВопросаДляСтруктуры = УзелОбъект.Вопрос.ТекстФормулировки;
        КонецЕсли;
        СтруктураДерева.Вставить("ТекстВопроса", ТекстВопросаДляСтруктуры);        СтруктураДерева.Вставить("ЯвляетсяЛистом", УзелОбъект.ЯвляетсяЛистом);
        СтруктураДерева.Вставить("Уровень", 0);
        
        // Получаем дочерние узлы
        Если НЕ УзелОбъект.ЯвляетсяЛистом Тогда
            ДочерниеУзлы = ПолучитьДочерниеУзлыИзРегистраНаСервере(Шаблон, КорневойУзелСсылка, 1);
            СтруктураДерева.Вставить("ДочерниеУзлы", ДочерниеУзлы);
        КонецЕсли;
        
    Исключение
	    // Вместо простого текста добавим контекст
	    СообщениеОбОшибке = "Не удалось получить объект узла по ссылке: " + КорневойУзелСсылка;
	    Сообщить("❌ " + СообщениеОбОшибке);
	    
	    СтруктураДерева.Вставить("Наименование", СообщениеОбОшибке);
	    СтруктураДерева.Вставить("ТекстВопроса", "");
	    СтруктураДерева.Вставить("ЯвляетсяЛистом", Ложь);
    КонецПопытки;
    
    Возврат СтруктураДерева;
    
КонецФункции

&НаСервере
Функция ПолучитьДочерниеУзлыИзРегистраНаСервере(Шаблон, РодительскийУзел, Уровень)
    
    ДочерниеУзлы = Новый Массив;
    
    Попытка
        // Ищем связи для данного родительского узла
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |    Структура.ТипОтвета,
        |    Структура.СледующийУзелДерева
        |ИЗ
        |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
        |ГДЕ
        |    Структура.ШаблонТеста = &Шаблон
        |    И Структура.РодительскийУзел = &РодительскийУзел";
        
        Запрос.УстановитьПараметр("Шаблон", Шаблон);
        Запрос.УстановитьПараметр("РодительскийУзел", РодительскийУзел);
        Результат = Запрос.Выполнить().Выбрать();
        
        Пока Результат.Следующий() Цикл
            Если Результат.СледующийУзелДерева <> Неопределено Тогда
                ДочернийУзел = Новый Структура;
                ДочернийУзел.Вставить("ТипОтвета", Результат.ТипОтвета);
                
                // Получаем информацию о дочернем узле
                Попытка
                    УзелОбъект = Результат.СледующийУзелДерева.ПолучитьОбъект();
                    ДочернийУзел.Вставить("Наименование", УзелОбъект.Наименование);
                    ТекстВопросаДляСтруктуры = "";
	                Если ЗначениеЗаполнено(УзелОбъект.Вопрос) Тогда
	                    ТекстВопросаДляСтруктуры = УзелОбъект.Вопрос.ТекстФормулировки;
	                КонецЕсли;
	                ДочернийУзел.Вставить("ТекстВопроса", ТекстВопросаДляСтруктуры);
                    ДочернийУзел.Вставить("ЯвляетсяЛистом", УзелОбъект.ЯвляетсяЛистом);
                    ДочернийУзел.Вставить("Уровень", Уровень);
                    
                    // Рекурсивно получаем поддерево
                    Если НЕ УзелОбъект.ЯвляетсяЛистом Тогда
                        Поддерево = ПолучитьДочерниеУзлыИзРегистраНаСервере(Шаблон, Результат.СледующийУзелДерева, Уровень + 1);
                        ДочернийУзел.Вставить("ДочерниеУзлы", Поддерево);
                    КонецЕсли;
                    
                Исключение
                    ДочернийУзел.Вставить("Наименование", "Ошибка загрузки узла");
                    ДочернийУзел.Вставить("ТекстВопроса", "");
                    ДочернийУзел.Вставить("ЯвляетсяЛистом", Ложь);
                    ДочернийУзел.Вставить("Уровень", Уровень);
                КонецПопытки;
                
                ДочерниеУзлы.Добавить(ДочернийУзел);
            КонецЕсли;
        КонецЦикла;
        
    Исключение
        Сообщить("❌ Ошибка при получении дочерних узлов: " + ОписаниеОшибки());
    КонецПопытки;
    
    Возврат ДочерниеУзлы;
    
КонецФункции

&НаКлиенте
Функция ОбойтиУзелИСформироватьТекстСоСтатистикой(УзелДанные, Уровень, Статистика)
    
    Текст = "";
    // Заменим пробелы на неразрывные (&nbsp;), чтобы HTML их не "съедал"
	Префикс = "";
    Для i = 1 По Уровень Цикл
        Префикс = Префикс + "&nbsp;&nbsp;&nbsp;&nbsp;";
    КонецЦикла;    
    // ... (код обновления статистики)
    Статистика.ВсегоУзлов = Статистика.ВсегоУзлов + 1;
    // Формируем строку узла
	Иконка = "";
    ТипУзла = "";
    Если УзелДанные.ЯвляетсяЛистом Тогда
        // Иконка для животного не нужна, оставляем пустой
        ТипУзла = "[ЖИВОТНОЕ]";
        Статистика.Животных = Статистика.Животных + 1;
    Иначе
        Иконка = "❓";
        ТипУзла = "[ВОПРОС]";
        Статистика.Вопросов = Статистика.Вопросов + 1;
    КонецЕсли;
    Текст = Текст + Префикс + Иконка + " " + ТипУзла + " " + УзелДанные.Наименование + "<br>";
    
    // Добавляем вопрос для не-листовых узлов
    Если НЕ УзелДанные.ЯвляетсяЛистом И УзелДанные.ТекстВопроса <> "" Тогда
        Текст = Текст + Префикс + "&nbsp;&nbsp;&nbsp;&nbsp;" + УзелДанные.ТекстВопроса + "<br>";
    КонецЕсли;
    
    // Обрабатываем дочерние узлы
    Если УзелДанные.Свойство("ДочерниеУзлы") Тогда
        Для Каждого ДочернийУзел Из УзелДанные.ДочерниеУзлы Цикл
            Стрелка = ?(ДочернийУзел.ТипОтвета = "Да", "✅ ДА →", "❌ НЕТ →");
            Текст = Текст + Префикс + "&nbsp;&nbsp;&nbsp;" + Стрелка + "<br>";
            
            Текст = Текст + ОбойтиУзелИСформироватьТекстСоСтатистикой(ДочернийУзел, Уровень + 1, Статистика);
        КонецЦикла;
    КонецЕсли;
    
    Возврат Текст;
    
КонецФункции

&НаКлиенте
Функция НайтиКорневойУзелВРегистре(Шаблон)
    
    Возврат НайтиКорневойУзелВРегистреНаСервере(Шаблон);
    
КонецФункции

&НаСервере
Функция НайтиКорневойУзелВРегистреНаСервере(Шаблон)
    
    Попытка
        Сообщить(" Поиск корневого узла в регистре для шаблона: " + Шаблон);
        
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    Структура.СледующийУзелДерева КАК Узел
        |ИЗ
        |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
        |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыБинарногоДерева КАК Узлы
        |        ПО Структура.СледующийУзелДерева = Узлы.Ссылка
        |ГДЕ
        |    Структура.ШаблонТеста = &Шаблон
        |    И Структура.РодительскийУзел = ЗНАЧЕНИЕ(Справочник.УзлыБинарногоДерева.ПустаяСсылка)
        |    И Узлы.Ссылка ЕСТЬ НЕ NULL"; // <-- Ключевая проверка, что объект узла существует
        
        Запрос.УстановитьПараметр("Шаблон", Шаблон);
        Результат = Запрос.Выполнить().Выбрать();
        
        Если Результат.Следующий() Тогда
            // Проверка на пустую ссылку все еще полезна на случай непредвиденных данных
            Если НЕ Результат.Узел.Пустая() Тогда
                Сообщить("✅ Найден существующий корневой узел: " + Результат.Узел);
                Возврат Результат.Узел;
            КонецЕсли;
        КонецЕсли;
        
        Сообщить("❌ Корневой узел не найден или был удален. Проверьте целостность данных в регистре.");
        
    Исключение
        Сообщить("❌ Ошибка при поиске корневого узла: " + ОписаниеОшибки());
    КонецПопытки;
    
    Возврат Неопределено;
    
КонецФункции

&НаКлиенте
Процедура ПоказатьСодержимоеРегистра(Команда)
    
    Если Объект.Ссылка = Неопределено Тогда
        Сообщить("⚠️ Сначала выберите шаблон");
        Возврат;
    КонецЕсли;
    
    Попытка
        ПоказатьСодержимоеРегистраНаСервере(Объект.Ссылка);
    Исключение
        Сообщить("❌ Ошибка: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаСервере
Процедура ПоказатьСодержимоеРегистраНаСервере(Шаблон)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Структура.ШаблонТеста,
    |    Структура.РодительскийУзел,
    |    Структура.ТипОтвета,
    |    Структура.СледующийУзелДерева
    |ИЗ
    |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
    |ГДЕ
    |    Структура.ШаблонТеста = &Шаблон";
    
    Запрос.УстановитьПараметр("Шаблон", Шаблон);
    Результат = Запрос.Выполнить().Выбрать();
    
    Сообщить("=== СОДЕРЖИМОЕ РЕГИСТРА ДЛЯ ШАБЛОНА: " + Шаблон + " ===");
    
    КоличествоЗаписей = 0;
    Пока Результат.Следующий() Цикл
        КоличествоЗаписей = КоличествоЗаписей + 1;
        Сообщить("Запись " + КоличествоЗаписей + ":");
        Сообщить("  РодительскийУзел: " + ?(Результат.РодительскийУзел = Неопределено, "Неопределено", Результат.РодительскийУзел));
        Сообщить("  ТипОтвета: " + ?(Результат.ТипОтвета = Неопределено, "Неопределено", Результат.ТипОтвета));
        Сообщить("  СледующийУзелДерева: " + ?(Результат.СледующийУзелДерева = Неопределено, "Неопределено", Результат.СледующийУзелДерева));
        Сообщить("---");
    КонецЦикла;
    
    Если КоличествоЗаписей = 0 Тогда
        Сообщить("❌ В регистре нет записей для этого шаблона!");
    Иначе
        Сообщить("✅ Всего записей: " + КоличествоЗаписей);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДанныеВРегистре()
    
    Если Объект.Ссылка = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        КоличествоСвязей = ПроверитьНаличиеСтруктурыДерева(Объект.Ссылка);
        Если КоличествоСвязей > 0 Тогда
            Сообщить("✅ В регистре найдено " + КоличествоСвязей + " связей дерева");
        Иначе
            Сообщить("ℹ️ Регистр пуст. Используйте 'Заполнить деревом Животное'");
        КонецЕсли;
    Исключение
        Сообщить("❌ Ошибка проверки регистра");
    КонецПопытки;
    
КонецПроцедуры

&НаКлиенте
Функция ОбойтиУзелИСформироватьТекст(Узел, Уровень)
    
    Текст = "";
    Префикс = Лев("    ", Уровень * 2);
    
    // Получаем информацию об узле
    ИнфоУзел = ТестированиеБинарноеДерево.ПолучитьИнформациюОбУзлеИзРегистра(Объект.Ссылка, Узел);
    Если ИнфоУзел = Неопределено Тогда
        Возврат Текст;
    КонецЕсли;
    
    // Определяем тип узла
    Если ИнфоУзел.ЯвляетсяЛистом Тогда
        Иконка = ""; // Листовой узел - животное
        ТипУзла = "[ЖИВОТНОЕ]";
    Иначе
        Иконка = "❓"; // Внутренний узел - вопрос
        ТипУзла = "[ВОПРОС]";
    КонецЕсли;
    
    // Формируем строку узла
    Текст = Текст + Префикс + Иконка + " " + ТипУзла + " " + ИнфоУзел.Наименование + Символы.ПС;
    
    Если НЕ ИнфоУзел.ЯвляетсяЛистом Тогда
        Текст = Текст + Префикс + "    Вопрос: " + ИнфоУзел.ТекстВопроса + Символы.ПС;
        
        // Получаем связи узла
        Связи = ТестированиеБинарноеДерево.ПолучитьСвязиУзлаИзРегистра(Объект.Ссылка, Узел);
        
        Для Каждого Связь Из Связи Цикл
            Если Связь.Активность Тогда
                Если Связь.ТипСвязи = "Да" Тогда
                    Текст = Текст + Префикс + "   ✅ ДА →" + Символы.ПС;
                Иначе
                    Текст = Текст + Префикс + "   ❌ НЕТ →" + Символы.ПС;
                КонецЕсли;
                Текст = Текст + ОбойтиУзелИСформироватьТекст(Связь.СледующийУзел, Уровень + 1);
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
    Возврат Текст;
    
КонецФункции

// Обработчики команд
&НаКлиенте
Процедура ОбновитьДерево(Команда)
	
	Попытка
		ОбновитьИнтерфейсДерева();
		ЭтотОбъект.ПрогрессОперации ="Дерево обновлено: " + ТекущаяДата();
		Сообщить("✅ Структура дерева обновлена");
	Исключение
		ЭтотОбъект.ПрогрессОперации ="Ошибка обновления: " + ОписаниеОшибки();
		Сообщить("❌ Ошибка обновления дерева: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЦелостность(Команда)
    
    Если Объект.Ссылка = Неопределено Тогда
        Сообщить("⚠️ Сначала выберите шаблон");
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭтотОбъект.ПрогрессОперации = "Проверка целостности...";
        ОбновитьИнтерфейсДерева(); // Обновляем на случай изменений
        
        // Вызываем нашу новую функцию из общего модуля
        Результат = ТестированиеБинарноеДерево.ПроверитьЦелостностьДереваВРегистре(Объект.Ссылка);
        
        Если Результат.ПроверкаПройдена Тогда
            ЭтотОбъект.ПрогрессОперации = "Целостность проверена успешно";
            Сообщить("✅ Целостность дерева проверена успешно!");
        Иначе
            // Выводим подробное сообщение об ошибке, которое вернула функция
            ЭтотОбъект.ПрогрессОперации = "Обнаружены проблемы в структуре";
            Сообщить("❌ " + Результат.СообщениеОбОшибке);
        КонецЕсли;
        
    Исключение
        ЭтотОбъект.ПрогрессОперации = "Ошибка проверки целостности: " + ОписаниеОшибки();
        Сообщить("❌ Ошибка проверки целостности: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортироватьДерево(Команда)
    
    Если Объект.Ссылка = Неопределено Тогда
        Сообщить("⚠️ Сначала выберите шаблон");
        Возврат;
    КонецЕсли;
    
    Попытка
        Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
        Диалог.Заголовок = "Экспорт структуры дерева";
        Диалог.ПолноеИмяФайла = Объект.Наименование + ".txt";
        Диалог.Фильтр = "Текстовые файлы (*.txt)|*.txt";
        
        Если Диалог.Выбрать() Тогда
            ЭтотОбъект.ПрогрессОперации = "Экспорт в файл...";
            
            // --- ИЗМЕНЕНИЕ ЛОГИКИ ЭКСПОРТА ---
            
            // 1. Вызываем серверную функцию, чтобы получить готовый текст
            ТекстДляЭкспорта = ПолучитьТекстДереваДляЭкспортаНаСервере(Объект.Ссылка);
            
            // 2. На клиенте создаем текстовый документ и записываем в него полученный текст
            ТекстовыйДокумент = Новый ТекстовыйДокумент;
            ТекстовыйДокумент.УстановитьТекст(ТекстДляЭкспорта);
            
            // 3. Сохраняем текстовый документ в выбранный пользователем файл
            ТекстовыйДокумент.Записать(Диалог.ПолноеИмяФайла, КодировкаТекста.UTF8);
            
            // --- КОНЕЦ ИЗМЕНЕНИЯ ---
            
            ЭтотОбъект.ПрогрессОперации = "Экспорт завершен: " + Диалог.ПолноеИмяФайла;
            Сообщить("✅ Структура дерева экспортирована в файл: " + Диалог.ПолноеИмяФайла);
        Иначе
            ЭтотОбъект.ПрогрессОперации = "Экспорт отменен";
            Сообщить("ℹ️ Экспорт отменен пользователем");
        КонецЕсли;
        
    Исключение
        ЭтотОбъект.ПрогрессОперации = "Ошибка экспорта: " + ОписаниеОшибки();
        Сообщить("❌ Ошибка экспорта: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстДереваДляЭкспортаНаСервере(Шаблон)
	Возврат ТестированиеБинарноеДерево.СформироватьТекстовоеПредставлениеДляЭкспорта(Шаблон);
КонецФункции

&НаКлиенте
Процедура ПоказатьСтатистику(Команда)
    
    Если Объект.Ссылка = Неопределено Тогда
        Сообщить("⚠️ Сначала выберите шаблон");
        Возврат;
    КонецЕсли;
    
    Попытка
        // Обновляем текст статистики в поле формы
        ОбновитьСтатистику();
        
        // Получаем данные для детальной статистики одним вызовом
        ДанныеСтатистики = ТестированиеБинарноеДерево.ПолучитьСтатистикуДереваИзРегистра(Объект.Ссылка);
        
        ВсегоУзлов = ДанныеСтатистики.ВсегоУзлов;
        ЛистовыхУзлов = ДанныеСтатистики.ЛистовыхУзлов;
        Глубина = ДанныеСтатистики.Глубина;
        Ветвей = ВсегоУзлов - ЛистовыхУзлов;
        
        // Рассчитываем коэффициент, избегая деления на ноль
        Коэффициент = 0;
        Если ЛистовыхУзлов > 0 Тогда
            Коэффициент = Ветвей / ЛистовыхУзлов;
        КонецЕсли;
        
        Сообщение = " Детальная статистика дерева:" + Символы.ПС + Символы.ПС +
                   "• Всего узлов: " + ВсегоУзлов + Символы.ПС +
                   "• Листовых узлов: " + ЛистовыхУзлов + Символы.ПС +
                   "• Ветвей (вопросов): " + Ветвей + Символы.ПС +
                   "• Глубина дерева: " + Глубина + Символы.ПС +
                   "• Коэффициент ветвления: " + Формат(Коэффициент, "ЧДЦ=2");
        
        Сообщить(Сообщение);
        ЭтотОбъект.ПрогрессОперации = "Статистика показана: " + ТекущаяДата();
        
    Исключение
        ЭтотОбъект.ПрогрессОперации = "Ошибка показа статистики: " + ОписаниеОшибки();
        Сообщить("❌ Ошибка показа статистики: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображение(Команда)
	
	Попытка
		// Полная перезагрузка интерфейса
		СоздатьИнтерфейсПросмотраДерева();
		ОбновитьИнтерфейсДерева();
		
		ЭтотОбъект.ПрогрессОперации ="Интерфейс полностью обновлен";
		Сообщить("✅ Интерфейс просмотра дерева обновлен");
		
	Исключение
		ЭтотОбъект.ПрогрессОперации ="Ошибка обновления интерфейса: " + ОписаниеОшибки();
		Сообщить("❌ Ошибка обновления интерфейса: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура СоздатьИнтерфейсПросмотраДереваНаКлиенте()
	СоздатьИнтерфейсПросмотраДерева();
КонецПроцедуры

#КонецОбласти