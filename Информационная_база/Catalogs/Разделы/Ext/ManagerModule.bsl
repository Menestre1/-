#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Печать.

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Групповое изменение объектов

// Возвращает список реквизитов, которые разрешается редактировать
// с помощью обработки группового изменения объектов.
//
Функция РеквизитыРедактируемыеВГрупповойОбработке() Экспорт
	
	РедактируемыеРеквизиты = Новый Массив;
	РедактируемыеРеквизиты.Добавить("Наименование");
	РедактируемыеРеквизиты.Добавить("НаименованиеПолное");
	РедактируемыеРеквизиты.Добавить("Вопросы.*");
	Возврат РедактируемыеРеквизиты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Интерфейс для работы с подсистемой Загрузка из файла.

// Устанавливает параметры загрузки.
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
// с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//   АдресЗагружаемыхДанных    - Строка - Адрес временного хранилища с таблицей значений, в которой
//                                        находятся загруженные данные из файла. Состав колонок:
//     * Идентификатор - Число - Порядковый номер строки;
//     * остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//   АдресТаблицыСопоставления - Строка - Адрес временного хранилища с пустой таблицей значений,
//                                        являющейся копией табличной части документа, 
//                                        которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//   СписокНеоднозначностей - ТаблицаЗначений - Список неоднозначных значений, для которых в ИБ имеется несколько
//                                              подходящих вариантов.
//     * Колонка       - Строка - Имя колонки, в которой была обнаружена неоднозначность;
//     * Идентификатор - Число  - Идентификатор строки, в которой была обнаружена неоднозначность.
//   ПолноеИмяТабличнойЧасти   - Строка - Полное имя табличной части, в которую загружаются данные.
//   ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	ТаблицаВопросы =  ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	//МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	//
	//Запрос = Новый Запрос;
	//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ПОДСТРОКА(ДанныеДляСопоставления.Формулировка, 1, 100) КАК Формулировка,
	//|	ДанныеДляСопоставления.Идентификатор
	//|ПОМЕСТИТЬ ДанныеДляСопоставления
	//|ИЗ
	//|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	//|ВЫБРАТЬ
	//|	МАКСИМУМ(ВопросыДляТестирования.Ссылка) КАК Ссылка,
	//|	ДанныеДляСопоставления.Идентификатор,
	//|	КОЛИЧЕСТВО(ВопросыДляТестирования.Ссылка) КАК Количество
	//|ИЗ
	//|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	//|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВопросыДляТестирования КАК ВопросыДляТестирования
	//|		ПО ДанныеДляСопоставления.Формулировка = ВопросыДляТестирования.Наименование
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ДанныеДляСопоставления.Идентификатор";
	//Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	//РезультатыЗапросов = Запрос.ВыполнитьПакет();
	//ТаблицаПодходящиеВопросы = РезультатыЗапросов[1].Выгрузить();
	
    КоличествоЗначенийПеречисления = Метаданные.Перечисления.ТипыОтветовНаВопрос.ЗначенияПеречисления.Количество();
    КолекцияЗначенийПеречисления = Метаданные.Перечисления.ТипыОтветовНаВопрос.ЗначенияПеречисления;
	
	Для каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		
		Строка = ТаблицаВопросы.Добавить();
		Строка.Идентификатор = СтрокаТаблицы.Идентификатор;
		
	//	СтрокаДокумент = ТаблицаПодходящиеВопросы.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
	//	Если СтрокаДокумент <> Неопределено Тогда 
	//		Если СтрокаДокумент.Количество = 1 Тогда 
	//			Строка.Вопрос = СтрокаДокумент.Ссылка;
	//		ИначеЕсли СтрокаДокумент.Количество > 1 Тогда
	//			ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
	//			ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
	//			ЗаписьОНеоднозначности.Колонка = "Формулировка";
	//		КонецЕсли;
	//
	//	Иначе
			
			Вопрос = ПланыВидовХарактеристик.ВопросыДляТестирования.СоздатьЭлемент();
			Вопрос.Наименование = Лев(СтрокаТаблицы.Формулировка,100);
			
			ФорматированныйТекст = Новый ФорматированныйДокумент;
			ФорматированныйТекст.Добавить(СтрокаТаблицы.Формулировка);
			Вопрос.Формулировка = Новый ХранилищеЗначения(ФорматированныйТекст, Новый СжатиеДанных(9));
		
			ТекстHTML = "";
			Вложения = Новый Структура;
			ФорматированныйТекст.ПолучитьHTML(ТекстHTML, Вложения);
			Вопрос.ТекстФормулировки = СтроковыеФункцииКлиентСервер.ИзвлечьТекстИзHTML(ТекстHTML);
			
			Вопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз;
			Для каждого ЗначПерем из КолекцияЗначенийПеречисления Цикл
		        Если СтрокаТаблицы.ТипОтвета = ЗначПерем.Синоним Тогда
					Вопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос[ЗначПерем.Имя];
		            Прервать;
		        КонецЕсли; 
		    КонецЦикла;        
		
			Если Вопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Строка Тогда
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Длина) Тогда
					Попытка
						Вопрос.Длина = ?(Число(СтрокаТаблицы.Длина) <= 0, 150, Число(СтрокаТаблицы.Длина));
					Исключение
						Вопрос.Длина = 150;
					КонецПопытки;
				Иначе
					Вопрос.Длина = 150;
				КонецЕсли;
			ИначеЕсли Вопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Текст Тогда
				Вопрос.Длина = 1024;
			ИначеЕсли Вопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Число Тогда 
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Длина) Тогда
					Попытка
						Вопрос.Длина = ?(Число(СтрокаТаблицы.Длина) <= 0, 10, Число(СтрокаТаблицы.Длина));
					Исключение
						Вопрос.Длина = 10;
					КонецПопытки;
				Иначе
					Вопрос.Длина = 10;
				КонецЕсли;
				
				Если Не ПустаяСтрока(СтрокаТаблицы.МинимальноеЗначение) Тогда
					Попытка
						Вопрос.МинимальноеЗначение = Число(СтрокаТаблицы.МинимальноеЗначение);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				Если Не ПустаяСтрока(СтрокаТаблицы.МаксимальноеЗначение) Тогда
					Попытка
						Вопрос.МаксимальноеЗначение = Число(СтрокаТаблицы.МаксимальноеЗначение);
					Исключение
					КонецПопытки;
				КонецЕсли;
				
				Если НЕ ПустаяСтрока(СтрокаТаблицы.Точность) Тогда
					Попытка
						Вопрос.Точность = ?(Число(СтрокаТаблицы.Точность) < 0, 0, Число(СтрокаТаблицы.Точность));
					Исключение
						Вопрос.Точность = 0;
					КонецПопытки;
				Иначе
					Вопрос.Точность = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Вопрос.ТребуетсяКомментарий	= СтрокаТаблицы.ТребуетсяКомментарий = "Да";
			Если Вопрос.ТребуетсяКомментарий
			   И ПустаяСтрока(СтрокаТаблицы.ПояснениеКомментария) Тогда
				Вопрос.ПояснениеКомментария	= "Пояснение";
			Иначе
				Вопрос.ПояснениеКомментария	= СтрокаТаблицы.ПояснениеКомментария;
			КонецЕсли;
			
			Вопрос.Обоснование	= СтрокаТаблицы.Обоснование;
			
			Вопрос.Записать();
			
			Если Вопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз
			   Или Вопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
			   	Для Счет = 1 По 6 Цикл
					Если Не ПустаяСтрока(СтрокаТаблицы["ВариантОтвета" + Счет]) Тогда
						Ответ = Справочники.ВариантыОтветовТестов.СоздатьЭлемент();
						Ответ.Владелец = Вопрос.Ссылка;
						Ответ.Наименование = СтрокаТаблицы["ВариантОтвета" + Счет];
						Ответ.НаименованиеПолное = СтрокаТаблицы["ВариантОтвета" + Счет];
					    Ответ.Записать();
						Если СтрокаТаблицы["Верен" + Счет] = "Да" Тогда
							ВерныйОтвет = Вопрос.ВерныеОтветы.Добавить();
							ВерныйОтвет.Ответ = Ответ.Ссылка;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				ВерныйОтвет = Вопрос.ВерныеОтветы.Добавить();
				Если ПустаяСтрока(СтрокаТаблицы.ВариантОтвета1) Тогда 
				ИначеЕсли Вопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Число Тогда
					Попытка
						ВерныйОтвет.Ответ = Число(СтрокаТаблицы.ВариантОтвета1);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Формат числа при указании верного ответа задан неверно.
								|В качестве разделителя целой и дробной части используется ""."" (точка)'"));
						ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
						ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
						ЗаписьОНеоднозначности.Колонка = "ВариантОтвета1";
					Исключение
						ЕстьНеоднозначность = Истина;
					КонецПопытки;
				ИначеЕсли Вопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Булево Тогда
					ВерныйОтвет.Ответ = СтрокаТаблицы.ВариантОтвета1 = "Да";
				ИначеЕсли Вопрос.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Дата Тогда
					Попытка
						ВерныйОтвет.Ответ = Дата(СтрокаТаблицы.ВариантОтвета1);
					Исключение
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Формат даты при указании верного ответа задан неверно.
								|Строка цифр вида ""ГГГГММДДччммсс"". Обязательно должно задаваться значение года, месяца и дня'"));
						ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
						ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
						ЗаписьОНеоднозначности.Колонка = "ВариантОтвета1";
					КонецПопытки;
				Иначе
					ВерныйОтвет.Ответ = СтрокаТаблицы.ВариантОтвета1;
				КонецЕсли;
			КонецЕсли;
				
			Вопрос.ТребуетсяКомментарий	= СтрокаТаблицы.ТребуетсяКомментарий = "Да";
			Вопрос.ПояснениеКомментария	= СтрокаТаблицы.ПояснениеКомментария;
			Вопрос.Обоснование	= СтрокаТаблицы.Обоснование;
			
			Вопрос.Записать();
			
			Строка.Вопрос = Вопрос.Ссылка;
			
		//КонецЕсли;
	
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТаблицаВопросы, АдресТаблицыСопоставления);

КонецПроцедуры

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  - Строка - Полное имя табличной части, в которую загружаются данные.
//  ИмяКолонки                - Строка - Имя колонки, в который возникла неоднозначность.
//  СписокНеоднозначностей    - Массив - Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока - Строка - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   - ЛюбойТип - Любые дополнительные сведения
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	//Если ИмяКолонки = "Вопрос" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВопросыДляТестирования.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.ВопросыДляТестирования КАК ВопросыДляТестирования
		|ГДЕ
		|	ВопросыДляТестирования.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", Лев(ЗагружаемыеЗначенияСтрока.Формулировка,100));
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	//КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецЕсли
