#Область ИнтерфейсШаблоновБинарныхДеревьев

// Создает интерфейс для работы с шаблонами бинарных деревьев
Процедура СоздатьИнтерфейсШаблоновБинарныхДеревьев(Форма) Экспорт
    
    // Очищаем существующие элементы
    УдалитьДинамическиеЭлементыФормы(Форма);
    
    // Создаем реквизиты для интерфейса
    СоздатьРеквизитыИнтерфейсаШаблонов(Форма);
    
    // Основная структура интерфейса
    СоздатьОсновнойИнтерфейсШаблонов(Форма);
    
    // Загружаем данные
    ЗагрузитьДанныеШаблонов(Форма);
    
    // +++ ДОБАВЛЕНО: Обновляем динамический список после создания +++
    Если Форма.Элементы.СписокШаблонов <> Неопределено Тогда
        Форма.Элементы.СписокШаблонов.Обновить();
    КонецЕсли;
    
КонецПроцедуры

// Создает реквизиты для интерфейса шаблонов
Процедура СоздатьРеквизитыИнтерфейсаШаблонов(Форма) Экспорт
    
    СтруктураРеквизитов = Новый Структура;
    
    // Основные реквизиты
    СтруктураРеквизитов.Вставить("ВыбранныйШаблон", ДФИ.ОписаниеТипаСправочник("ШаблоныБинарныхДеревьев"));
    СтруктураРеквизитов.Вставить("СтруктураДереваJSON", ДФИ.ОписаниеТипаСтрока(100000));
    СтруктураРеквизитов.Вставить("СтатусОперации", ДФИ.ОписаниеТипаСтрока(500));
    СтруктураРеквизитов.Вставить("РежимПросмотра", ДФИ.ОписаниеТипаСтрока(50));
    
    // Реквизиты для редактора
    СтруктураРеквизитов.Вставить("НовыйУзелНаименование", ДФИ.ОписаниеТипаСтрока(200));
    
    // Создаем описание типа для плана видов характеристик вручную
    ОписаниеТипаВопроса = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВопросыДляТестирования");
    СтруктураРеквизитов.Вставить("НовыйУзелВопрос", ОписаниеТипаВопроса);
    
    СтруктураРеквизитов.Вставить("РодительскийУзел", ДФИ.ОписаниеТипаСправочник("УзлыБинарногоДерева"));
    СтруктураРеквизитов.Вставить("ТипСвязи", ДФИ.ОписаниеТипаПеречисление("ТипыОтветовБинарногоДерева"));
    
    ДФИ.СоздатьРеквизиты(Форма, СтруктураРеквизитов);
    
КонецПроцедуры

// Создает основной интерфейс шаблонов
Процедура СоздатьОсновнойИнтерфейсШаблонов(Форма) Экспорт
    
    // Основной контейнер
    ОсновнаяГруппа = ДФИ.СздГруппаОбычнаяБезОтображения(Форма, "ОсновнаяГруппаШаблоны", Форма, 2, 1, 1);
    
    // Левая панель - список шаблонов
    СоздатьПанельСпискаШаблонов(Форма, ОсновнаяГруппа);
    
    // Правая панель - управление и просмотр
    СоздатьПанельУправленияШаблонами(Форма, ОсновнаяГруппа);
    
КонецПроцедуры

// Создает панель списка шаблонов
Процедура СоздатьПанельСпискаШаблонов(Форма, Родитель) Экспорт
    
    ГруппаСписка = ДФИ.СздГруппаОбычная(Форма, "ГруппаСпискаШаблонов", Родитель, "Шаблоны бинарных деревьев");
    ГруппаСписка.Ширина = 400;
    ГруппаСписка.РастягиватьПоВертикали = Истина;
    
    // Динамический список шаблонов
    ТекстЗапроса = 
    "ВЫБРАТЬ
    |    ШаблоныБинарныхДеревьев.Ссылка,
    |    ШаблоныБинарныхДеревьев.Наименование,
    |    ШаблоныБинарныхДеревьев.ТипТестирования,
    |    ШаблоныБинарныхДеревьев.ДатаСоздания
    |ИЗ
    |    Справочник.ШаблоныБинарныхДеревьев КАК ШаблоныБинарныхДеревьев
    |УПОРЯДОЧИТЬ ПО
    |    ШаблоныБинарныхДеревьев.Наименование";
    
    СписокШаблонов = ДФИ.СздДинамическийСписок(Форма, 
        "СписокШаблонов", 
        ГруппаСписка,
        ТекстЗапроса,
        Новый Структура,
        "ШаблоныБинарныхДеревьев",
        Неопределено, // БЕЗ КОЛОНОК
        Новый Структура("Высота", 300),
        Новый Структура("ПриАктивизацииСтроки", "ОбработатьВыборШаблона"),
        Ложь);
    
    // Остальной код без изменений...
КонецПроцедуры

// Создает панель управления шаблонами
Процедура СоздатьПанельУправленияШаблонами(Форма, Родитель) Экспорт
    
    ГруппаУправления = ДФИ.СздГруппаОбычная(Форма, "ГруппаУправленияШаблонами", Родитель, "Управление шаблоном");
    ГруппаУправления.РастягиватьПоГоризонтали = Истина;
    ГруппаУправления.РастягиватьПоВертикали = Истина;
    
    // Панель информации о шаблоне
    СоздатьПанельИнформацииШаблона(Форма, ГруппаУправления);
    
    // Панель визуализации дерева
    СоздатьПанельВизуализацииДерева(Форма, ГруппаУправления);
    
    // Панель редактора дерева
    СоздатьПанельРедактораДерева(Форма, ГруппаУправления);
    
КонецПроцедуры

// Создает панель информации о шаблоне
Процедура СоздатьПанельИнформацииШаблона(Форма, Родитель) Экспорт
    
    ГруппаИнформации = ДФИ.СздГруппаОбычная(Форма, "ГруппаИнформацииШаблона", Родитель, "Информация о шаблоне");
    ГруппаИнформации.РастягиватьПоГоризонтали = Истина;
    
    // Поле выбранного шаблона
    ДФИ.СздПоле(Форма, "ПолеВыбранныйШаблон", ГруппаИнформации, "Выбранный шаблон:", 1, "ВыбранныйШаблон");
    
    // Поле статуса
    ДФИ.СздПолеНадписи(Форма, "ПолеСтатус", ГруппаИнформации, "Статус:", Истина, "СтатусОперации");
    
    // Командная панель операций
    КоманднаяПанельОпераций = ДФИ.СздГруппаКоманднаяПанель(Форма, "КоманднаяПанельОпераций", ГруппаИнформации);
    
    // Команды операций
    ДФИ.СоздатьКоманду(Форма, "СоздатьСтруктуруДерева", "Создать структуру", "СоздатьСтруктуруДерева");
    ДФИ.СоздатьКоманду(Форма, "ПросмотретьДерево", "Просмотреть дерево", "ПросмотретьДеревоШаблона");
    ДФИ.СоздатьКоманду(Форма, "РедактироватьДерево", "Редактировать дерево", "РедактироватьДеревоШаблона");
    ДФИ.СоздатьКоманду(Форма, "ПроверитьЦелостность", "Проверить целостность", "ПроверитьЦелостностьДерева");
    ДФИ.СоздатьКоманду(Форма, "ЭкспортДерева", "Экспорт в JSON", "ЭкспортДереваВJSON");
    
    // Кнопки операций
    ДФИ.СздКнопка(Форма, "КнопкаСоздатьСтруктуру", КоманднаяПанельОпераций, "Создать структуру", "СоздатьСтруктуруДерева");
    ДФИ.СздКнопка(Форма, "КнопкаПросмотретьДерево", КоманднаяПанельОпераций, "Просмотреть", "ПросмотретьДеревоШаблона");
    ДФИ.СздКнопка(Форма, "КнопкаРедактироватьДерево", КоманднаяПанельОпераций, "Редактировать", "РедактироватьДеревоШаблона");
    ДФИ.СздКнопка(Форма, "КнопкаПроверитьЦелостность", КоманднаяПанельОпераций, "Проверить", "ПроверитьЦелостностьДерева");
    ДФИ.СздКнопка(Форма, "КнопкаЭкспортДерева", КоманднаяПанельОпераций, "Экспорт", "ЭкспортДереваВJSON");
    
КонецПроцедуры

// Создает панель визуализации дерева
Процедура СоздатьПанельВизуализацииДерева(Форма, Родитель) Экспорт
    
    ГруппаВизуализации = ДФИ.СздГруппаОбычная(Форма, "ГруппаВизуализацииДерева", Родитель, "Визуализация структуры дерева");
    ГруппаВизуализации.РастягиватьПоГоризонтали = Истина;
    ГруппаВизуализации.Высота = 400;
    
    // Поле для отображения JSON структуры
    ПолеJSON = ДФИ.СздПоле(Форма, "ПолеJSONДерева", ГруппаВизуализации, "Структура дерева (JSON):", 1, "СтруктураДереваJSON");
    ПолеJSON.МногострочныйРежим = Истина;
    ПолеJSON.РасширенноеРедактирование = Истина;
    ПолеJSON.Высота = 350;
    ПолеJSON.РастягиватьПоГоризонтали = Истина;
    
КонецПроцедуры

// Создает панель редактора дерева
Процедура СоздатьПанельРедактораДерева(Форма, Родитель) Экспорт
    
    ГруппаРедактора = ДФИ.СздГруппаОбычная(Форма, "ГруппаРедактораДерева", Родитель, "Редактор узлов дерева");
    ГруппаРедактора.РастягиватьПоГоризонтали = Истина;
    ГруппаРедактора.Видимость = Ложь; // Скрыта по умолчанию
    
    // Поля для создания нового узла
    ГруппаНовогоУзла = ДФИ.СздГруппаОбычнаяБезОтображения(Форма, "ГруппаНовогоУзла", ГруппаРедактора, 2, 1, 0);
    
    ДФИ.СздПоле(Форма, "ПолеНаименованиеУзла", ГруппаНовогоУзла, "Наименование узла:", 1, "НовыйУзелНаименование");
    ДФИ.СздПоле(Форма, "ПолеВопросУзла", ГруппаНовогоУзла, "Вопрос узла:", 1, "НовыйУзелВопрос");
    ДФИ.СздПоле(Форма, "ПолеРодительскийУзел", ГруппаНовогоУзла, "Родительский узел:", 1, "РодительскийУзел");
    ДФИ.СздПоле(Форма, "ПолеТипСвязи", ГруппаНовогоУзла, "Тип связи:", 1, "ТипСвязи");
    
    // Командная панель редактора
    КоманднаяПанельРедактора = ДФИ.СздГруппаКоманднаяПанель(Форма, "КоманднаяПанельРедактора", ГруппаРедактора);
    
    // Команды редактора
    ДФИ.СоздатьКоманду(Форма, "ДобавитьУзел", "Добавить узел", "ДобавитьУзелВДерево");
    ДФИ.СоздатьКоманду(Форма, "УдалитьУзел", "Удалить узел", "УдалитьУзелИзДерева");
    ДФИ.СоздатьКоманду(Форма, "ОбновитьДерево", "Обновить дерево", "ОбновитьОтображениеДерева");
    
    // Кнопки редактора
    ДФИ.СздКнопка(Форма, "КнопкаДобавитьУзел", КоманднаяПанельРедактора, "Добавить узел", "ДобавитьУзелВДерево");
    ДФИ.СздКнопка(Форма, "КнопкаУдалитьУзел", КоманднаяПанельРедактора, "Удалить узел", "УдалитьУзелИзДерева");
    ДФИ.СздКнопка(Форма, "КнопкаОбновитьДерево", КоманднаяПанельРедактора, "Обновить", "ОбновитьОтображениеДерева");
    
КонецПроцедуры

// Удаляет динамические элементы формы
Процедура УдалитьДинамическиеЭлементыФормы(Форма) Экспорт
    
    МассивДляУдаления = Новый Массив;
    
    ДинамическиеЭлементы = Новый Массив;
    ДинамическиеЭлементы.Добавить("ОсновнаяГруппаШаблоны");
    ДинамическиеЭлементы.Добавить("ГруппаСпискаШаблонов");
    ДинамическиеЭлементы.Добавить("ГруппаУправленияШаблонами");
    ДинамическиеЭлементы.Добавить("ГруппаИнформацииШаблона");
    ДинамическиеЭлементы.Добавить("ГруппаВизуализацииДерева");
    ДинамическиеЭлементы.Добавить("ГруппаРедактораДерева");
    
    Для Каждого ИмяЭлемента Из ДинамическиеЭлементы Цикл
        Если Форма.Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
            МассивДляУдаления.Добавить(ИмяЭлемента);
        КонецЕсли;
    КонецЦикла;
    
    Если МассивДляУдаления.Количество() > 0 Тогда
        ДФИ.УдлЭлементы(Форма, МассивДляУдаления);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиИнтерфейсаШаблонов

// Создает структуру дерева для выбранного шаблона
Процедура СоздатьСтруктуруДерева(Форма) Экспорт
    
    Если Форма.ВыбранныйШаблон = Неопределено Тогда
        Форма.СтатусОперации = "Ошибка: шаблон не выбран";
        Возврат;
    КонецЕсли;
    
    Попытка
        // Используем готовую функцию из ТестированиеБинарноеДерево
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Форма.ВыбранныйШаблон);
        
        Форма.СтатусОперации = "Структура дерева 'Угадай животное' создана для шаблона: " + Форма.ВыбранныйШаблон.Наименование;
        
        // Обновляем отображение
        ТестированиеБинарноеДерево.ЗагрузитьСтруктуруДереваДляШаблона(Форма, Форма.ВыбранныйШаблон);
        
    Исключение
        Форма.СтатусОперации = "Ошибка создания структуры: " + ОписаниеОшибки();
    КонецПопытки;
    
КонецПроцедуры


// Включает режим просмотра дерева
Процедура ПросмотретьДеревоШаблона(Форма) Экспорт
    
    Если Форма.ВыбранныйШаблон = Неопределено Тогда
        Форма.СтатусОперации = "Ошибка: шаблон не выбран";
        Возврат;
    КонецЕсли;
    
    Форма.РежимПросмотра = "Просмотр";
    Форма.Элементы.ГруппаРедактораДерева.Видимость = Ложь;
    Форма.Элементы.ГруппаВизуализацииДерева.Видимость = Истина;
    
    Форма.СтатусОперации = "Режим просмотра дерева для шаблона: " + Форма.ВыбранныйШаблон.Наименование;
    
КонецПроцедуры

// Включает режим редактирования дерева
Процедура РедактироватьДеревоШаблона(Форма) Экспорт
    
    Если Форма.ВыбранныйШаблон = Неопределено Тогда
        Форма.СтатусОперации = "Ошибка: шаблон не выбран";
        Возврат;
    КонецЕсли;
    
    Форма.РежимПросмотра = "Редактирование";
    Форма.Элементы.ГруппаРедактораДерева.Видимость = Истина;
    Форма.Элементы.ГруппаВизуализацииДерева.Видимость = Истина;
    
    Форма.СтатусОперации = "Режим редактирования дерева для шаблона: " + Форма.ВыбранныйШаблон.Наименование;
    
КонецПроцедуры

// Проверяет целостность структуры дерева
Процедура ПроверитьЦелостностьДерева(Форма) Экспорт
    
    Если Форма.ВыбранныйШаблон = Неопределено Тогда
        Форма.СтатусОперации = "Ошибка: шаблон не выбран";
        Возврат;
    КонецЕсли;
    
    Попытка
        Ошибки = ТестированиеБинарноеДерево.ПроверитьЦелостностьДереваШаблона(Форма.ВыбранныйШаблон);
        
        Если Ошибки.Количество() = 0 Тогда
            Форма.СтатусОперации = "Целостность дерева проверена: ошибок не найдено";
        Иначе
            ТекстОшибок = "";
            Для Каждого Ошибка Из Ошибки Цикл
                ТекстОшибок = ТекстОшибок + "• " + Ошибка + "|n";
            КонецЦикла;
            Форма.СтатусОперации = "Найдены ошибки целостности:|n" + ТекстОшибок;
        КонецЕсли;
        
    Исключение
        Форма.СтатусОперации = "Ошибка проверки целостности: " + ОписаниеОшибки();
    КонецПопытки;
    
КонецПроцедуры

// Добавляет узел в дерево
Процедура ДобавитьУзелВДерево(Форма) Экспорт
    
    Если Форма.ВыбранныйШаблон = Неопределено Тогда
        Форма.СтатусОперации = "Ошибка: шаблон не выбран";
        Возврат;
    КонецЕсли;
    
    Если СокрЛП(Форма.НовыйУзелНаименование) = "" Тогда
        Форма.СтатусОперации = "Ошибка: не указано наименование узла";
        Возврат;
    КонецЕсли;
    
    Если Форма.НовыйУзелВопрос = Неопределено Тогда
        Форма.СтатусОперации = "Ошибка: не выбран вопрос для узла";
        Возврат;
    КонецЕсли;
    
    Попытка
        // Используем готовые функции из ТестированиеБинарноеДерево
        НовыйУзел = ТестированиеБинарноеДерево.СоздатьУзелДерева(Форма.НовыйУзелНаименование, "Узел создан через редактор", Ложь, 0);
        
        // Если указан родительский узел, создаем связь
        Если Форма.РодительскийУзел <> Неопределено Тогда
            ТестированиеБинарноеДерево.ЗаписатьСвязьВРегистр(Форма.ВыбранныйШаблон, Форма.РодительскийУзел, Форма.ТипСвязи, НовыйУзел.Ссылка);
        КонецЕсли;
        
        // Очищаем поля
        Форма.НовыйУзелНаименование = "";
        Форма.НовыйУзелВопрос = Неопределено;
        Форма.РодительскийУзел = Неопределено;
        
        Форма.СтатусОперации = "Узел успешно добавлен в дерево";
        
        // Обновляем отображение
        ТестированиеБинарноеДерево.ЗагрузитьСтруктуруДереваДляШаблона(Форма, Форма.ВыбранныйШаблон);
        
    Исключение
        Форма.СтатусОперации = "Ошибка добавления узла: " + ОписаниеОшибки();
    КонецПопытки;
    
КонецПроцедуры


// Обновляет отображение дерева
Процедура ОбновитьОтображениеДерева(Форма) Экспорт
    
    Если Форма.ВыбранныйШаблон = Неопределено Тогда
        Форма.СтатусОперации = "Ошибка: шаблон не выбран";
        Возврат;
    КонецЕсли;
    
    ТестированиеБинарноеДерево.ЗагрузитьСтруктуруДереваДляШаблона(Форма, Форма.ВыбранныйШаблон);
    Форма.СтатусОперации = "Отображение дерева обновлено";
    
КонецПроцедуры

// Загружает данные шаблонов
Процедура ЗагрузитьДанныеШаблонов(Форма) Экспорт
    
    Форма.СтатусОперации = "Загрузка списка шаблонов...";
    
    // Обновляем динамический список
    Если Форма.Элементы.СписокШаблонов <> Неопределено Тогда
        Форма.Элементы.СписокШаблонов.Обновить();
    КонецЕсли;
    
    Форма.СтатусОперации = "Список шаблонов загружен";
    
КонецПроцедуры

// Обрабатывает выбор шаблона в списке
Процедура ОбработатьВыборШаблона(Форма) Экспорт
    
    ТекущаяСтрока = Форма.Элементы.СписокШаблонов.ТекущаяСтрока;
    Если ТекущаяСтрока = Неопределено Тогда
        Форма.ВыбранныйШаблон = Неопределено;
        Форма.СтатусОперации = "Шаблон не выбран";
        Возврат;
    КонецЕсли;
    
    Форма.ВыбранныйШаблон = ТекущаяСтрока.Ссылка;
    Форма.СтатусОперации = "Выбран шаблон: " + ТекущаяСтрока.Наименование;
    
    // Используем готовую функцию из ТестированиеБинарноеДерево
    ТестированиеБинарноеДерево.ЗагрузитьСтруктуруДереваДляШаблона(Форма, Форма.ВыбранныйШаблон);
    
КонецПроцедуры


#КонецОбласти

#Область СерверныеМетодыИнтерфейсаШаблонов



// Оптимизирует структуру дерева шаблона
Процедура ОптимизироватьДеревоШаблона(Шаблон) Экспорт
    
    // Удаляем неиспользуемые узлы
    ЗапросНеиспользуемые = Новый Запрос;
    ЗапросНеиспользуемые.Текст = 
    "ВЫБРАТЬ
    |    Узлы.Ссылка
    |ИЗ
    |    Справочник.УзлыБинарногоДерева КАК Узлы
    |ГДЕ
    |    Узлы.Ссылка НЕ В (
    |        ВЫБРАТЬ РАЗЛИЧНЫЕ
    |            Структура.СледующийУзелДерева
    |        ИЗ
    |            РегистрСведений.СтруктураБинарногоДерева КАК Структура
    |        ГДЕ
    |            Структура.ШаблонТеста = &Шаблон
    |    )
    |    И Узлы.Ссылка НЕ В (
    |        ВЫБРАТЬ РАЗЛИЧНЫЕ
    |            Структура.РодительскийУзел
    |        ИЗ
    |            РегистрСведений.СтруктураБинарногоДерева КАК Структура
    |        ГДЕ
    |            Структура.ШаблонТеста = &Шаблон
    |            И Структура.РодительскийУзел НЕ NULL
    |    )";
    
    ЗапросНеиспользуемые.УстановитьПараметр("Шаблон", Шаблон);
    Результат = ЗапросНеиспользуемые.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        Попытка
            ОбъектУзла = Выборка.Ссылка.ПолучитьОбъект();
            ОбъектУзла.Удалить();
        Исключение
            // Пропускаем ошибки удаления
        КонецПопытки;
    КонецЦикла;
    
    // Обновляем уровни узлов
    ОбновитьУровниУзловШаблона(Шаблон);
    
КонецПроцедуры

// Обновляет уровни узлов в дереве шаблона
Процедура ОбновитьУровниУзловШаблона(Шаблон)
    
    // Получаем все узлы дерева
    ЗапросУзлы = Новый Запрос;
    ЗапросУзлы.Текст = 
    "ВЫБРАТЬ РАЗЛИЧНЫЕ
    |    Структура.СледующийУзелДерева КАК Узел
    |ИЗ
    |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
    |ГДЕ
    |    Структура.ШаблонТеста = &Шаблон";
    
    ЗапросУзлы.УстановитьПараметр("Шаблон", Шаблон);
    Результат = ЗапросУзлы.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        Уровень = РассчитатьУровеньУзлаШаблона(Выборка.Узел, Шаблон);
        ОбъектУзла = Выборка.Узел.ПолучитьОбъект();
        ОбъектУзла.Уровень = Уровень;
        ОбъектУзла.Записать();
    КонецЦикла;
    
КонецПроцедуры

// Рекурсивно рассчитывает уровень узла в шаблоне
Функция РассчитатьУровеньУзлаШаблона(Узел, Шаблон)
    
    Если Узел = Неопределено Тогда
        Возврат 0;
    КонецЕсли;
    
    // Находим родителя узла
    ЗапросРодитель = Новый Запрос;
    ЗапросРодитель.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Структура.РодительскийУзел
    |ИЗ
    |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
    |ГДЕ
    |    Структура.ШаблонТеста = &Шаблон
    |    И Структура.СледующийУзелДерева = &Узел";
    
    ЗапросРодитель.УстановитьПараметр("Шаблон", Шаблон);
    ЗапросРодитель.УстановитьПараметр("Узел", Узел);
    Результат = ЗапросРодитель.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Родитель = Выборка.РодительскийУзел;
        Возврат РассчитатьУровеньУзлаШаблона(Родитель, Шаблон) + 1;
    Иначе
        // Это корневой узел
        Возврат 0;
    КонецЕсли;
    
КонецФункции

// Получает полный путь к узлу в дереве
Функция ПолучитьПутьКУзлу(Узел, Шаблон) Экспорт
    
    Если Узел = Неопределено Тогда
        Возврат "";
    КонецЕсли;
    
    Путь = Узел.Наименование;
    ТекущийУзел = Узел;
    
    // Поднимаемся по дереву до корня
    Пока Истина Цикл
        Родитель = НайтиРодителяУзла(ТекущийУзел, Шаблон);
        Если Родитель = Неопределено Тогда
            Прервать;
        КонецЕсли;
        
        Путь = Родитель.Наименование + " → " + Путь;
        ТекущийУзел = Родитель;
    КонецЦикла;
    
    Возврат Путь;
    
КонецФункции

// Находит родителя узла в шаблоне
Функция НайтиРодителяУзла(Узел, Шаблон)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Структура.РодительскийУзел
    |ИЗ
    |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
    |ГДЕ
    |    Структура.ШаблонТеста = &Шаблон
    |    И Структура.СледующийУзелДерева = &Узел";
    
    Запрос.УстановитьПараметр("Шаблон", Шаблон);
    Запрос.УстановитьПараметр("Узел", Узел);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.РодительскийУзел.ПолучитьОбъект();
    КонецЕсли;
    
    Возврат Неопределено;
    
КонецФункции

// Получает дочерние узлы для родительского узла
Функция ПолучитьДочерниеУзлы(РодительскийУзел, Шаблон) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Структура.СледующийУзелДерева,
    |    Структура.ТипОтвета,
    |    Узлы.Наименование,
    |    Узлы.ЯвляетсяЛистом,
    |    Узлы.Уровень
    |ИЗ
    |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
    |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыБинарногоДерева КАК Узлы
    |        ПО Структура.СледующийУзелДерева = Узлы.Ссылка
    |ГДЕ
    |    Структура.ШаблонТеста = &Шаблон
    |    И Структура.РодительскийУзел = &РодительскийУзел
    |УПОРЯДОЧИТЬ ПО
    |    Структура.ТипОтвета";
    
    Запрос.УстановитьПараметр("Шаблон", Шаблон);
    Запрос.УстановитьПараметр("РодительскийУзел", РодительскийУзел);
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции

// Создает копию шаблона с новой структурой дерева
Процедура СоздатьКопиюШаблона(ИсходныйШаблон, НовоеНаименование) Экспорт
    
    // Создаем новый шаблон
    НовыйШаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
    НовыйШаблон.Наименование = НовоеНаименование;
    НовыйШаблон.ТипТестирования = ИсходныйШаблон.ТипТестирования;
    НовыйШаблон.КонтролироватьВремя = ИсходныйШаблон.КонтролироватьВремя;
    НовыйШаблон.ВремяНаСдачу = ИсходныйШаблон.ВремяНаСдачу;
    НовыйШаблон.ПроцентДляСдачи = ИсходныйШаблон.ПроцентДляСдачи;
    НовыйШаблон.ПеремешиватьВариантыОтветов = ИсходныйШаблон.ПеремешиватьВариантыОтветов;
    НовыйШаблон.Записать();
    
    // Копируем структуру дерева
    СкопироватьСтруктуруДереваШаблона(ИсходныйШаблон, НовыйШаблон);
    
КонецПроцедуры

// Копирует структуру дерева из одного шаблона в другой
Процедура СкопироватьСтруктуруДереваШаблона(Источник, Приемник) Экспорт
    
    // Получаем все связи исходного шаблона
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Структура.РодительскийУзел,
    |    Структура.ТипОтвета,
    |    Структура.СледующийУзелДерева,
    |    Узлы.Наименование,
    |    Узлы.Вопрос,
    |    Узлы.ЯвляетсяЛистом,
    |    Узлы.Уровень
    |ИЗ
    |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
    |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыБинарногоДерева КАК Узлы
    |        ПО Структура.СледующийУзелДерева = Узлы.Ссылка
    |ГДЕ
    |    Структура.ШаблонТеста = &Источник";
    
    Запрос.УстановитьПараметр("Источник", Источник);
    Результат = Запрос.Выполнить().Выгрузить();
    
    // Создаем новые узлы и связи
    СоответствиеУзлов = Новый Соответствие; // СтарыйУзел -> НовыйУзел
    
    Для Каждого Связь Из Результат Цикл
        // Создаем копию узла
        Если Не СоответствиеУзлов.Получить(Связь.СледующийУзелДерева) Тогда
            НовыйУзел = Справочники.УзлыБинарногоДерева.СоздатьЭлемент();
            НовыйУзел.Наименование = Связь.Наименование + " (копия)";
            НовыйУзел.Вопрос = Связь.Вопрос;
            НовыйУзел.ЯвляетсяЛистом = Связь.ЯвляетсяЛистом;
            НовыйУзел.Уровень = Связь.Уровень;
            НовыйУзел.Записать();
            
            СоответствиеУзлов.Вставить(Связь.СледующийУзелДерева, НовыйУзел.Ссылка);
        КонецЕсли;
        
        // Определяем родительский узел для копии
        РодительскийУзелКопия = Неопределено;
        Если Связь.РодительскийУзел <> Неопределено Тогда
            РодительскийУзелКопия = СоответствиеУзлов.Получить(Связь.РодительскийУзел);
        КонецЕсли;
        
        // Создаем связь в новом шаблоне
        ТестированиеУтверждения.ЗаписатьСвязьВРегистр(Приемник, РодительскийУзелКопия, Связь.ТипОтвета, 
                              СоответствиеУзлов.Получить(Связь.СледующийУзелДерева));
    КонецЦикла;
    
КонецПроцедуры

#КонецОбласти

#Область УтилитыИнтерфейсаШаблонов

// Обновляет интерфейс в зависимости от выбранного шаблона
Процедура ОбновитьИнтерфейсПоШаблону(Форма) Экспорт
    
    Если Форма.ВыбранныйШаблон = Неопределено Тогда
        // Режим без выбранного шаблона
        Форма.Элементы.КнопкаСоздатьСтруктуру.Доступность = Ложь;
        Форма.Элементы.КнопкаПросмотретьДерево.Доступность = Ложь;
        Форма.Элементы.КнопкаРедактироватьДерево.Доступность = Ложь;
        Форма.Элементы.КнопкаПроверитьЦелостность.Доступность = Ложь;
        Форма.Элементы.КнопкаЭкспортДерева.Доступность = Ложь;
        Форма.Элементы.ГруппаРедактораДерева.Видимость = Ложь;
    Иначе
        // Режим с выбранным шаблоном
        Форма.Элементы.КнопкаСоздатьСтруктуру.Доступность = Истина;
        Форма.Элементы.КнопкаПросмотретьДерево.Доступность = Истина;
        Форма.Элементы.КнопкаРедактироватьДерево.Доступность = Истина;
        Форма.Элементы.КнопкаПроверитьЦелостность.Доступность = Истина;
        Форма.Элементы.КнопкаЭкспортДерева.Доступность = Истина;
        
        // Проверяем наличие структуры дерева
        ЕстьСтруктура = ПроверитьНаличиеСтруктурыДерева(Форма.ВыбранныйШаблон);
        Если ЕстьСтруктура Тогда
            Форма.Элементы.КнопкаСоздатьСтруктуру.Заголовок = "Пересоздать структуру";
        КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры

// Проверяет наличие структуры дерева для шаблона
Функция ПроверитьНаличиеСтруктурыДерева(Шаблон) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ КОЛИЧЕСТВО(*) КАК КоличествоСвязей
    |ИЗ
    |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
    |ГДЕ
    |    Структура.ШаблонТеста = &Шаблон";
    
    Запрос.УстановитьПараметр("Шаблон", Шаблон);
    Результат = Запрос.Выполнить().Выбрать();
    Результат.Следующий();
    
    Возврат Результат.КоличествоСвязей > 0;
    
КонецФункции

// Форматирует JSON для красивого отображения
Функция ФорматироватьJSONДляОтображения(JSONТекст) Экспорт
    
    Если ПустаяСтрока(JSONТекст) Тогда
        Возврат "";
    КонецЕсли;
    
    Попытка
        Данные = ПрочитатьJSON(JSONТекст);
        ЗаписьJSON = Новый ЗаписьJSON;
        ЗаписьJSON.УстановитьСтроку(Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "  "));
        ЗаписатьJSON(ЗаписьJSON, Данные);
        Возврат ЗаписьJSON.Закрыть();
    Исключение
        Возврат JSONТекст; // Возвращаем исходный текст в случае ошибки
    КонецПопытки;
    
КонецФункции

// Создает пример структуры дерева для нового шаблона
Процедура СоздатьПримерСтруктурыДерева(Шаблон) Экспорт
    
    // Создаем простую структуру для примера
    Вопрос1 = ТестированиеУтверждения.СоздатьВопрос("Это пример корневого вопроса?", "Пример вопроса для демонстрации");
    Вопрос2 = ТестированиеУтверждения.СоздатьВопрос("Это пример дочернего вопроса для ответа 'Да'?", "Пример вопроса");
    Вопрос3 = ТестированиеУтверждения.СоздатьВопрос("Это пример дочернего вопроса для ответа 'Нет'?", "Пример вопроса");
    
    Узел1 = ТестированиеУтверждения.СоздатьУзелДерева("Пример корневого узла", Вопрос1, Ложь, 0);
    Узел2 = ТестированиеУтверждения.СоздатьУзелДерева("Пример узла для ответа 'Да'", Вопрос2, Истина, 1);
    Узел3 = ТестированиеУтверждения.СоздатьУзелДерева("Пример узла для ответа 'Нет'", Вопрос3, Истина, 1);
    
    // Создаем связи
    ТестированиеУтверждения.ЗаписатьСвязьВРегистр(Шаблон, Неопределено, Неопределено, Узел1.Ссылка);
    ТестированиеУтверждения.ЗаписатьСвязьВРегистр(Шаблон, Узел1.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да, Узел2.Ссылка);
    ТестированиеУтверждения.ЗаписатьСвязьВРегистр(Шаблон, Узел1.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет, Узел3.Ссылка);
    
КонецПроцедуры

#КонецОбласти


 