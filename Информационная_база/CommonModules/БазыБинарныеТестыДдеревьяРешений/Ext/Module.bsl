
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Тестирование"
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Определяет тип тестирования для документа
//
// Параметры:
//  ДокументТеста - ДокументСсылка.Тест, ДокументСсылка.ТестБинарноеДерево
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ТипыТестирования
//
Функция ПолучитьТипТестирования(ДокументТеста) Экспорт
	
	Если ТипЗнч(ДокументТеста) = Тип("ДокументСсылка.ТестБинарноеДерево") Тогда
		Возврат Перечисления.ТипыТестирования.БинарноеДерево;
	КонецЕсли;
	
	// Для обычного теста определяем по шаблону
	Если ЗначениеЗаполнено(ДокументТеста.ШаблонТеста) Тогда
		Возврат ДокументТеста.ШаблонТеста.ТипТестирования;
	КонецЕсли;
	
	// Значение по умолчанию
	Возврат Перечисления.ТипыТестирования.Плоское;
	
КонецФункции

// Выполняет построение формы, согласно раздела шаблона анкеты
//
// Параметры
//  Форма                       - УправляемаяФорма - форма для которой получается информация
//  ТекущиеДанныеДеревоРазделов - ДанныеФормыЭлементДерева - текущий раздел, для которого строится форма заполнения
//
Процедура ПервоначальноеЗаполнениеРеквизитов(Форма) Экспорт

	
// Определяем тип тестирования из шаблона
	ТипТестирования = Форма.ШаблонТеста.ТипТестирования;
	
	Если ТипТестирования = Перечисления.ТипыТестирования.Плоское Тогда
		// Существующая логика...
		Для Каждого Раздел Из Форма.ТаблицаРазделов Цикл 
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РазделыВопросы.Вопрос
			|ИЗ
			|	Справочник.Разделы.Вопросы КАК РазделыВопросы
			|ГДЕ
			|	РазделыВопросы.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Раздел.Ссылка);
			МассивДоступныхВопросов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вопрос");
			
			КоличествоВопросовДляОтбора = Мин(МассивДоступныхВопросов.Количество(), Раздел.КоличествоВопросов);  
			Для Счетчик = 1 По КоличествоВопросовДляОтбора Цикл
				
				ГСЧ = Новый ГенераторСлучайныхЧисел();
				СлучайноеЧисло = ГСЧ.СлучайноеЧисло(0, КоличествоВопросовДляОтбора - Счетчик);
				ПодобранныйВопрос = МассивДоступныхВопросов[СлучайноеЧисло];
				
				НоваяСтрока = Форма.Объект.Вопросы.Добавить();
				ИдентификаторСтроки = Новый УникальныйИдентификатор;
				НоваяСтрока.ИдентификаторСтроки = Строка(ИдентификаторСтроки);
				НоваяСтрока.Раздел = Раздел.Ссылка;
				НоваяСтрока.Вопрос = МассивДоступныхВопросов[СлучайноеЧисло];
				
				МассивДоступныхВопросов.Удалить(СлучайноеЧисло);
				
			КонецЦикла;
			
		КонецЦикла;
	ИначеЕсли ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево Тогда
		// Новая логика бинарного дерева...
	КонецЕсли;	
	
	
 КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Формирование формы заполнения теста

 // Выполняет построение формы, согласно раздела
//
// Параметры
//  Форма                       - УправляемаяФорма - форма для которой получается информация
//
Процедура ПостроениеФормыЗаполненияПоРазделу(Форма, ДанныеТаблицаРазделов) Экспорт
	
	УдалитьДобавляемыеРеквизитыДляРаздела(Форма);
		
	Форма.ТаблицаВопросовРаздела.Очистить();
	Форма.ВариантыОтветовНаВопросы.Очистить();
	
	Раздел = ДанныеТаблицаРазделов.Ссылка;
	
	ПолучитьИнформациюПоВопросамРаздела(Форма, Раздел);
    СформироватьДобавляемыеРеквизитыДляРаздела(ДанныеТаблицаРазделов,Форма);
	
КонецПроцедуры

// Выполняет построение формы, согласно раздела шаблона анкеты
//
// Параметры
//  Форма                       - УправляемаяФорма - форма для которой получается информация
//  ТекущиеДанныеДеревоРазделов - ДанныеФормыЭлементДерева - текущий раздел, для которого строится форма заполнения
//
Процедура ПостроениеФормыЗаполненияПоВопросу(Форма, ТекущийВопрос) Экспорт
	
	Для Каждого Строка Из Форма.ТаблицаВопросовРаздела Цикл 

		ЭтоТекущийВопрос = Строка = ТекущийВопрос; 
		
		ЭлементВопрос = Форма.Элементы.Найти("ПерейтиКВопросу" + Строка(Форма.ТаблицаВопросовРаздела.Индекс(Строка) + 1));
		Если ЭлементВопрос <> Неопределено Тогда 
			Если Форма.Объект.Завершен Тогда 
				Если ЭтоТекущийВопрос Тогда
					ЭлементВопрос.ЦветФона = WebЦвета.СветлоЗолотистый;
				ИначеЕсли Не Строка.Проверен И Строка.ОтветПолучен Тогда 
					ЭлементВопрос.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;
				ИначеЕсли Строка.Правильность = 100 Тогда 
					ЭлементВопрос.ЦветФона = WebЦвета.НейтральноЗеленый;
				Иначе	
					ЭлементВопрос.ЦветФона = WebЦвета.ТусклоРозовый; 	
				КонецЕсли;
			Иначе
				Если ЭтоТекущийВопрос Тогда
					ЭлементВопрос.ЦветФона = WebЦвета.СветлоЗолотистый;
				ИначеЕсли Строка.ОтветПолучен Тогда 
					ЭлементВопрос.ЦветФона = WebЦвета.НейтральноЗеленый;
				Иначе	
					ЭлементВопрос.ЦветФона = ЦветаСтиля.ЦветФонаКнопки; 	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавитьРеквизитыДляВопроса(ТекущийВопрос,ДобавляемыеРеквизиты,Форма);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, Форма.ДобавленныеДинамическиРеквизиты.ВыгрузитьЗначения());
	
	//удаление ранее динамически сформированных элементов формы
	УдалитьЭлементыФормыЗаполнения(Форма);
	Форма.ДобавленныеДинамическиРеквизиты.Очистить();
	Для каждого ДобавленныйРеквизит Из ДобавляемыеРеквизиты Цикл
		Если ПустаяСтрока(ДобавленныйРеквизит.Путь) Тогда
			Форма.ДобавленныеДинамическиРеквизиты.Добавить(ДобавленныйРеквизит.Имя);
		КонецЕсли;
	КонецЦикла;

	Форма.ФорматированныйДокумент = ТекущийВопрос.Вопрос.Формулировка.Получить();	
	
	ДобавитьЭлементыВопрос(ТекущийВопрос, Форма);
	
 КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// Создание реквизитов формы заполеннеия теста

//Добавляет реквизиты формы для вопросов
//
// Параметры
//  СтрокаДерева         - СтрокаДереваЗначений - строка дерева шаблона анкеты
//  ДобавляемыеРеквизиты - Массив - предназначен для аккумулирования добавляемых реквизитов формы
//  Форма         - Управляемая форма- - форма для которой добавляются элементы
//
Процедура ДобавитьРеквизитыДляВопроса(СтрокаДерева,ДобавляемыеРеквизиты,Форма)
	
	ИмяВопроса = "Ответ";
	
	ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(500));
	
	Если СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Строка Тогда
		
		ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(СтрокаДерева.Длина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,ОписаниеТипаСтроки,,"Ответ"));
		
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Текст Тогда
		
		ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(СтрокаДерева.Длина));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,ОписаниеТипаСтроки,,"Ответ"));
		
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Булево Тогда
		
		ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,ОписаниеТипаБулево,,"Ответ"));
		
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Дата Тогда
		
		ОписаниеТипаДата = Новый ОписаниеТипов("Дата",Новый КвалификаторыДаты(ЧастиДаты.Дата));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,ОписаниеТипаДата,,"Ответ"));
		
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Число Тогда
		
		ОписаниеТипаЧисло = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(СтрокаДерева.Длина,СтрокаДерева.Точность));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,ОписаниеТипаЧисло,,"Ответ"));
		
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ЗначениеИнформационнойБазы Тогда
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,СтрокаДерева.ТипЗначения,,"Ответ"));
		
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз Тогда
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса,СтрокаДерева.ТипЗначения,,"Ответ"));
		
	ИначеЕсли СтрокаДерева.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
		
		ВариантыОтветовНаВопрос = ПолучитьВариантыОтветовНаВопрос(СтрокаДерева.Вопрос,Форма);
		
		ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150));
		ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
		
		Счетчик = 0;
		
		Для каждого ВариантОтвета Из ВариантыОтветовНаВопрос Цикл
			Счетчик = Счетчик + 1;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса + "_Реквизит_" + Счетчик,ОписаниеТипаБулево,,ВариантОтвета.Представление));
			Если ВариантОтвета.ТребуетОткрытогоОтвета Тогда
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса + "_Комментарий_" + Счетчик,ОписаниеТипаСтроки));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если (СтрокаДерева.ТипОтвета <> Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз) И (СтрокаДерева.ТребуетсяКомментарий) Тогда
		
		ОписаниеТипаСтроки = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяВопроса + "_Комментарий",ОписаниеТипаСтроки,,СтрокаДерева.ПояснениеКомментария));
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Создание элементов формы заполнения теста

//Добавляет элементы формы для вопросов
//
// Параметры
//  СтрокаТаблицы - ДанныеФормыЭлементКоллекции - строка таблицы вопросов раздела
//  ЭлементГруппы - ГруппаФормы - группа формы, для которой будут подчиняться добавляемые реквизиты
//  Форма         - Управляемая форма- - форма для которой добавляются элементы
//
Процедура ДобавитьЭлементыВопрос(СтрокаТаблицы, Форма)
	
	ИмяВопроса = "Ответ";
	
	ГруппаОтвет = Форма.Элементы.ГруппаОтвет;
		
	Если СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Строка Тогда
			
		Элемент = Форма.Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ГруппаОтвет);
		Элемент.Вид                        = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка         = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Элемент.ПутьКДанным                = ИмяВопроса;
			
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Текст Тогда
			
		Элемент = Форма.Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ГруппаОтвет);
		Элемент.Вид                       = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Элемент.ПутьКДанным               = ИмяВопроса;
		Элемент.РастягиватьПоВертикали    = Ложь;
		УстановитьПараметрыЭлементаЯчейкаТекст(Элемент); 
		
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Булево Тогда
		
		Элемент = Форма.Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ГруппаОтвет);
		Элемент.Вид                = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Элемент.ПутьКДанным        = ИмяВопроса;
		
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Дата Тогда
		
		Элемент = Форма.Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ГруппаОтвет);
		Элемент.Вид                       = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Элемент.ПутьКДанным               = ИмяВопроса;
		
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.Число Тогда
		
		Элемент = Форма.Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ГруппаОтвет);
		Элемент.Вид                       = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Элемент.МинимальноеЗначение       = ?(СтрокаТаблицы.МинимальноеЗначение = 0,Неопределено,СтрокаТаблицы.МинимальноеЗначение);
		Элемент.МаксимальноеЗначение      = ?(СтрокаТаблицы.МаксимальноеЗначение = 0,Неопределено,СтрокаТаблицы.МаксимальноеЗначение);
		Элемент.КнопкаВыбора              = Ложь;
		Элемент.ПутьКДанным               = ИмяВопроса;
		Если СтрокаТаблицы.МинимальноеЗначение <> 0 ИЛИ СтрокаТаблицы.МаксимальноеЗначение <> 0 Тогда
				Элемент.КнопкаРегулирования = Истина;
				
				ТекстПодсказки = "";
				Если СтрокаТаблицы.МинимальноеЗначение <> 0 И СтрокаТаблицы.МаксимальноеЗначение <> 0 Тогда
					ТекстПодсказки = СтрШаблон(НСтр("ru = 'Допустим ввод значения от %1 до %2'"),
						СтрокаТаблицы.МинимальноеЗначение, СтрокаТаблицы.МаксимальноеЗначение);
				ИначеЕсли СтрокаТаблицы.МинимальноеЗначение = 0 И СтрокаТаблицы.МаксимальноеЗначение <> 0 Тогда
					ТекстПодсказки = СтрШаблон(НСтр("ru = 'Допустим ввод значения до %1'"), СтрокаТаблицы.МаксимальноеЗначение);
				Иначе
					ТекстПодсказки = СтрШаблон(НСтр("ru = 'Допустим ввод значения от %1'"), СтрокаТаблицы.МинимальноеЗначение);
				КонецЕсли;
				
				Элемент.Подсказка = ТекстПодсказки;
				
		КонецЕсли;
		
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ЗначениеИнформационнойБазы Тогда
		
		Элемент = Форма.Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ГруппаОтвет);
		Элемент.Вид                       = ВидПоляФормы.ПолеВвода;
		Элемент.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Лево;
		Элемент.ПутьКДанным               = ИмяВопроса;
		
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.ОдинВариантИз Тогда	
		
		ВариантыОтветовНаВопрос = ПолучитьВариантыОтветовНаВопрос(СтрокаТаблицы.Вопрос,Форма);
		
		Элемент = Форма.Элементы.Добавить(ИмяВопроса,Тип("ПолеФормы"),ГруппаОтвет);
		Элемент.Вид                     = ВидПоляФормы.ПолеПереключателя;
		Элемент.ПоложениеЗаголовка      = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ПутьКДанным             = ИмяВопроса;
		Элемент.КоличествоКолонок       = 1;
		//Элемент.ВысотаЭлемента          = 1;
		Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		Для каждого ВариантОтвета Из ВариантыОтветовНаВопрос Цикл
			Элемент.СписокВыбора.Добавить(ВариантОтвета.Ответ,ВариантОтвета.Представление);
		КонецЦикла;
		
	ИначеЕсли СтрокаТаблицы.ТипОтвета = Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз Тогда
		
		ВариантыОтветовНаВопрос = ПолучитьВариантыОтветовНаВопрос(СтрокаТаблицы.Вопрос,Форма);
		Счётчик = 0;
		
		ЭлементГруппаВариантыОтветов = Форма.Элементы.Добавить(ИмяВопроса + "_Группа_Варианты",Тип("ГруппаФормы"),ГруппаОтвет);
		
		ЭлементГруппаВариантыОтветов.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		ЭлементГруппаВариантыОтветов.Отображение         = ОтображениеОбычнойГруппы.Нет;
		ЭлементГруппаВариантыОтветов.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		ЭлементГруппаВариантыОтветов.ОтображатьЗаголовок = Ложь;
		
		Для каждого ВариантОтвета Из ВариантыОтветовНаВопрос Цикл
			
			Счётчик = Счётчик + 1;
			
			ЭлементГруппаВариантОтвета = Форма.Элементы.Добавить(ИмяВопроса + "_Группа_ВариантОтвета_" + Строка(Счётчик),Тип("ГруппаФормы"),ЭлементГруппаВариантыОтветов);
			
			ЭлементГруппаВариантОтвета.Вид                        = ВидГруппыФормы.ОбычнаяГруппа;
			ЭлементГруппаВариантОтвета.Отображение                = ОтображениеОбычнойГруппы.Нет;
			ЭлементГруппаВариантОтвета.Группировка                = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ЭлементГруппаВариантОтвета.ОтображатьЗаголовок        = Ложь;
			ЭлементГруппаВариантОтвета.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Авто;
			ЭлементГруппаВариантОтвета.РастягиватьПоГоризонтали   = Истина;
			
			ИмяРеквизитаВопроса = "Ответ_Реквизит_" + Счётчик;
			Элемент = Форма.Элементы.Добавить(ИмяРеквизитаВопроса,Тип("ПолеФормы"),ЭлементГруппаВариантОтвета);
			
			Элемент.Вид                = ВидПоляФормы.ПолеФлажка;
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			Элемент.ПутьКДанным        = ИмяРеквизитаВопроса;
			Элемент.ВысотаЗаголовка    = Цел(СтрДлина(ВариантОтвета.Представление)/128)+1;
			
			Если ВариантОтвета.ТребуетОткрытогоОтвета Тогда
				ИмяРеквизитаКомментария = ИмяВопроса + "_Комментарий_" + Счётчик;
				Элемент = Форма.Элементы.Добавить(ИмяРеквизитаКомментария,Тип("ПолеФормы"),ЭлементГруппаВариантОтвета);
				Элемент.Вид 		= ВидПоляФормы.ПолеФлажка;
				Элемент.ПутьКДанным	= ИмяРеквизитаКомментария;
				Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;
	
	// Комментарии к вопросам
	Если (СтрокаТаблицы.ТипОтвета <> Перечисления.ТипыОтветовНаВопрос.НесколькоВариантовИз) И (СтрокаТаблицы.ТребуетсяКомментарий) Тогда
			
		Элемент             = Форма.Элементы.Добавить(ИмяВопроса + "_Комментарий",Тип("ПолеФормы"),ГруппаОтвет);
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяВопроса + "_Комментарий";
			
	КонецЕсли;
	
КонецПроцедуры

// Формирует массив добавляемых реквизитов.
//
// Параметры:
//  Форма                - Управляемая форма - форма для которой формируется массив реквизитов.
//
Процедура СформироватьДобавляемыеРеквизитыДляРаздела(ДанныеТаблицаРазделов,Форма)
	
	КоличествоВопросовРаздела = Форма.ТаблицаВопросовРаздела.Количество(); 
	Если КоличествоВопросовРаздела > 35 Тогда
		ШиринаКнопки = 2;
	ИначеЕсли КоличествоВопросовРаздела > 20 Тогда 
		ШиринаКнопки = 3;
	ИначеЕсли КоличествоВопросовРаздела > 10 Тогда 
		ШиринаКнопки = 4;
	Иначе
		ШиринаКнопки = 5;
	КонецЕсли;
	
	
	Для Счетчик = 1 По КоличествоВопросовРаздела Цикл 	
	
		КомандаКнопки = Форма.Команды.Добавить("ПерейтиКВопросу" + Счетчик);
		КомандаКнопки.Действие = "ПерейтиКВопросу";

		НоваяКнопка = Форма.Элементы.Добавить("ПерейтиКВопросу" + Счетчик, Тип("КнопкаФормы"), Форма.Элементы.ПанельВопросов);
		НоваяКнопка.ИмяКоманды 	= "ПерейтиКВопросу" + Счетчик;
		НоваяКнопка.Заголовок 	= Счетчик;
		НоваяКнопка.Отображение = ОтображениеКнопки.Текст;
		НоваяКнопка.Ширина = ШиринаКнопки;
			
	КонецЦикла;
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры формы заполнения теста

//Получает возможные варианты ответа на вопрос
//
//Параметры
//  ЭлементарныйВопрос - ПланВидовХарактеристикСсылка.ВопросыДляТестирования - вопрос для которого получаются ответы
//  Форма              - Управляемая форма - форма из которой происходит вызов 
//
// Возвращаемое значение:
//   Массив - массив строк таблицы значений, в которых содержаться варианты ответов на вопрос
//
Функция ПолучитьВариантыОтветовНаВопрос(Вопрос,Форма) Экспорт
	
	Возврат (Форма.ВариантыОтветовНаВопросы.НайтиСтроки(Новый Структура("Вопрос",Вопрос)));
	
КонецФункции

// Устанавливает значения параметров  и обработчик события "НачалоВыбора",
// для поля формы, предназначенного для ввода текста 
//
// Параметры
//  Элемент - ПолеФормы - элемент, для которого устанавливаются параметры
//
Процедура УстановитьПараметрыЭлементаЯчейкаТекст(Элемент)
	
	Элемент.КнопкаВыбора = Истина;
	Элемент.МногострочныйРежим = Истина;
	Элемент.УстановитьДействие("НачалоВыбора","Подключаемый_НачалоВыбораТекстовыхЯчеек");
	
КонецПроцедуры

// Удаляет ранее динамически сформированные элементы панели вопросов
//
// Параметры
//  Форма              - Управляемая форма - форма у которой удаляются элементы
//
Процедура УдалитьДобавляемыеРеквизитыДляРаздела(Форма)

	Для Счетчик = 1 По Форма.ТаблицаВопросовРаздела.Количество() Цикл 	

		УдаляемаяКоманда = Форма.Команды.Найти("ПерейтиКВопросу" + Счетчик);
		Если УдаляемаяКоманда <> Неопределено Тогда 
			Форма.Команды.Удалить(УдаляемаяКоманда);
		КонецЕсли;
		
		УдаляемыйЭлемент = Форма.Элементы.Найти("ПерейтиКВопросу" + Счетчик);
		Если УдаляемыйЭлемент <> Неопределено Тогда 
			Форма.Элементы.Удалить(УдаляемыйЭлемент);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Удаляет ранее динамически сформированные элементы группы ответа
//
// Параметры
//  Форма              - Управляемая форма - форма у которой удаляются элементы
//
Процедура УдалитьЭлементыФормыЗаполнения(Форма) 
	
	ЭлементФормы = Форма.Элементы.ГруппаОтвет;
	
	МассивПодчиненныеЭлементы = ЭлементФормы.ПодчиненныеЭлементы;
	Для каждого ПодчиненныйЭлемент Из МассивПодчиненныеЭлементы Цикл
		Форма.Элементы.Удалить(ПодчиненныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу разделов на форме.
//
// Параметры:
//  Форма           - Управляемая форма - форма для которой выполняется операция.
//  ДеревоРазделов  - ДанныеФормыДерево - дерево, для которого получаются данные.
//
Процедура ЗаполнитьТаблицуРазделов(Форма) Экспорт
	
	ПолучитьИнформациюПоРазделамШаблона(Форма, Форма.ШаблонТеста);
	
	СписокВыбора = Форма.Элементы.РедактируемыйРаздел.СписокВыбора; 
	СписокВыбора.Очистить();
	Для Каждого Строка Из Форма.ТаблицаРазделов Цикл 
		СписокВыбора.Добавить(Строка.Ссылка, Строка.Формулировка); 
	КонецЦикла;
	
КонецПроцедуры

// Получает иерархическую выборку по шаблону теста.
//
// Параметры:
//  ШаблонАнкеты  - СправочникСсылка.ШаблоныАнкет - шаблон анкеты по которому получается выборка.
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса - иерархическая выборка по разделам шаблона анкеты.
//
Процедура ПолучитьИнформациюПоРазделамШаблона(Форма, ШаблонТеста)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныТестовРазделы.Раздел КАК Ссылка,
	|	ШаблоныТестовРазделы.Раздел.НаименованиеПолное КАК Формулировка,
	|	ШаблоныТестовРазделы.КоличествоВопросов
	|ИЗ
	|	Справочник.ШаблоныБинарныхДеревьев.Разделы КАК ШаблоныТестовРазделы
	|ГДЕ
	|	ШаблоныТестовРазделы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ШаблоныТестовРазделы.НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", ШаблонТеста);
	
	РезультатЗапроса = Запрос.Выполнить();
	Форма.ТаблицаРазделов.Загрузить(РезультатЗапроса.Выгрузить());
	
КонецПроцедуры

// Получает необходимую информацию по разделу теста: вопросы, 
//необходимые реквизиты вопросов, варианты ответов. Помещает полученную информацию в 
// реквизиты формы
//
// Параметры
//  Форма            - УправляемаяФорма - форма для которой получается информация
//  МассивВопросов   - Массив - Массив с ссылками на подобранные к тесту вопросы
//
Процедура ПолучитьИнформациюПоВопросамРаздела(Форма, Раздел) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Вопросы.Вопрос КАК Вопрос,
	|	Вопросы.Раздел КАК Раздел,
	|	Вопросы.ОтветПолучен КАК ОтветПолучен,
	|	Вопросы.Правильность КАК Правильность,
	|	Вопросы.Проверен КАК Проверен,
	|	Вопросы.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	Вопросы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВопросыРаздела
	|ИЗ
	|	&Вопросы КАК Вопросы
	|ГДЕ
	|	Вопросы.Раздел = &Раздел
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Вопрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВопросыРаздела.Вопрос КАК Вопрос,
	|	ВопросыРаздела.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ВопросыРаздела.Раздел КАК Раздел,
	|	ВопросыРаздела.ОтветПолучен КАК ОтветПолучен,
	|	ВопросыРаздела.Правильность КАК Правильность,
	|	ВопросыРаздела.Проверен КАК Проверен,
	|	ВопросыДляТестирования.Наименование,
	|	ЕСТЬNULL(ВопросыДляТестирования.Длина, 0) КАК Длина,
	|	ВопросыДляТестирования.ТипЗначения КАК ТипЗначения,
	|	ЕСТЬNULL(ВопросыДляТестирования.ТребуетсяКомментарий, ЛОЖЬ) КАК ТребуетсяКомментарий,
	|	ЕСТЬNULL(ВопросыДляТестирования.ПояснениеКомментария, """") КАК ПояснениеКомментария,
	|	ЕСТЬNULL(ВопросыДляТестирования.МинимальноеЗначение, 0) КАК МинимальноеЗначение,
	|	ЕСТЬNULL(ВопросыДляТестирования.МаксимальноеЗначение, 0) КАК МаксимальноеЗначение,
	|	ЕСТЬNULL(ВопросыДляТестирования.ТипОтвета, ЗНАЧЕНИЕ(Перечисление.ТипыОтветовНаВопрос.ПустаяСсылка)) КАК ТипОтвета,
	|	ЕСТЬNULL(ВопросыДляТестирования.ТекстФормулировки, """") КАК Формулировка,
	|	ЕСТЬNULL(ВопросыДляТестирования.Точность, 0) КАК Точность,
	|	ЕСТЬNULL(ВопросыДляТестирования.Обоснование, """") КАК Обоснование,
	|	ВопросыДляТестирования.ВерныеОтветы.(
	|		Ответ
	|	)
	|ИЗ
	|	ВопросыРаздела КАК ВопросыРаздела
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ВопросыДляТестирования КАК ВопросыДляТестирования
	|		ПО ВопросыРаздела.Вопрос = ВопросыДляТестирования.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВопросыРаздела.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыОтветовТестов.Владелец КАК Вопрос,
	|	ВариантыОтветовТестов.Ссылка КАК Ответ,
	|	ВариантыОтветовТестов.НаименованиеПолное КАК Представление,
	|	ВариантыОтветовТестов.ТребуетОткрытогоОтвета
	|ИЗ
	|	Справочник.ВариантыОтветовТестов КАК ВариантыОтветовТестов
	|ГДЕ
	|	ВариантыОтветовТестов.Владелец В
	|			(ВЫБРАТЬ
	|				ВопросыРаздела.Вопрос
	|			ИЗ
	|				ВопросыРаздела КАК ВопросыРаздела)
	|	И НЕ ВариантыОтветовТестов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантыОтветовТестов.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("Вопросы", Форма.Объект.Вопросы.Выгрузить());
	Запрос.УстановитьПараметр("Раздел", Раздел);
	
	МассивРезультатовЗапросов = Запрос.ВыполнитьПакет();

	//Вопросы теста
	ВыборкаВопросов = МассивРезультатовЗапросов[1].Выбрать();
	Пока ВыборкаВопросов.Следующий() Цикл
		НовыяСтрока = Форма.ТаблицаВопросовРаздела.Добавить();
		ЗаполнитьЗначенияСвойств(НовыяСтрока, ВыборкаВопросов,,"ВерныеОтветы");
		НовыяСтрока.ВерныеОтветы.Загрузить(ВыборкаВопросов.ВерныеОтветы.Выгрузить()); 
	КонецЦикла;
	
	//Варианты ответов
	Форма.ВариантыОтветовНаВопросы.Загрузить(МассивРезультатовЗапросов[2].Выгрузить());
	Если Форма.ПеремешиватьВариантыОтветов Тогда 
		ГСЧ = Новый ГенераторСлучайныхЧисел();	
		Для Каждого Строка Из Форма.ВариантыОтветовНаВопросы Цикл
		     Строка.НомерДляСортировки = ГСЧ.СлучайноеЧисло(0, 99999);
		КонецЦикла;
		Форма.ВариантыОтветовНаВопросы.Сортировать("НомерДляСортировки");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прочее

// Получает таблицу доступных на данный момент респонденту анкет
//
// Параметры
//  Респондент  - СправочникСсылка - респондент для которого получается список анкет
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица, содержащая информацию о доступных респонденту анкетах.
//   Неопределено       - в случае если для респондента нет достунпых анкет.
//
Функция ПолучитьТаблицуДоступныхРеспондентуАнкет(Респондент) Экспорт
	
	Если  ЗначениеЗаполнено(Респондент) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НазначениеОпросов.Ссылка,
			|	НазначениеОпросов.СвободныйОпрос,
			|	НазначениеОпросов.ДатаОкончания,
			|	НазначениеОпросов.Наименование
			|ПОМЕСТИТЬ ДействующиеОпросы
			|ИЗ
			|	Документ.НазначениеОпросов КАК НазначениеОпросов
			|ГДЕ
			|	НазначениеОпросов.Проведен
			|	И НЕ НазначениеОпросов.ПометкаУдаления
			|	И (НазначениеОпросов.ДатаНачала = &ПустаяДата
			|			ИЛИ НАЧАЛОПЕРИОДА(НазначениеОпросов.ДатаНачала, ДЕНЬ) < &ТекущаяДата)
			|	И (НазначениеОпросов.ДатаОкончания = &ПустаяДата
			|			ИЛИ КОНЕЦПЕРИОДА(НазначениеОпросов.ДатаОкончания, ДЕНЬ) > &ТекущаяДата)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ДействующиеОпросы.Ссылка,
			|	ДействующиеОпросы.ДатаОкончания,
			|	ДействующиеОпросы.Наименование
			|ПОМЕСТИТЬ ДействующиеОпросыОтборПоРеспонденту
			|ИЗ
			|	ДействующиеОпросы КАК ДействующиеОпросы
			|ГДЕ
			|	ДействующиеОпросы.СвободныйОпрос
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НазначениеОпросовРеспонденты.Ссылка,
			|	НазначениеОпросов.ДатаОкончания,
			|	НазначениеОпросов.Наименование
			|ИЗ
			|	Документ.НазначениеОпросов.Респонденты КАК НазначениеОпросовРеспонденты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НазначениеОпросов КАК НазначениеОпросов
			|		ПО НазначениеОпросовРеспонденты.Ссылка = НазначениеОпросов.Ссылка
			|ГДЕ
			|	НазначениеОпросовРеспонденты.Респондент = &Респондент
			|	И НазначениеОпросовРеспонденты.Ссылка В
			|			(ВЫБРАТЬ
			|				ДействующиеОпросы.Ссылка
			|			ИЗ
			|				ДействующиеОпросы КАК ДействующиеОпросы
			|			ГДЕ
			|				НЕ ДействующиеОпросы.СвободныйОпрос)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА АнкетыПоДействующимЗапросам.Ссылка ЕСТЬ NULL
			|			ТОГДА ""Опросы""
			|		ИНАЧЕ ""Тесты""
			|	КОНЕЦ КАК Статус,
			|	ВЫБОР
			|		КОГДА АнкетыПоДействующимЗапросам.Ссылка ЕСТЬ NULL
			|			ТОГДА ДействующиеОпросыОтборПоРеспонденту.Ссылка
			|		ИНАЧЕ АнкетыПоДействующимЗапросам.Ссылка
			|	КОНЕЦ КАК АнкетаОпрос,
			|	ДействующиеОпросыОтборПоРеспонденту.ДатаОкончания КАК ДатаОкончания,
			|	ДействующиеОпросыОтборПоРеспонденту.Наименование,
			|	АнкетыПоДействующимЗапросам.Дата КАК ДатаАнкеты,
			|	ЕСТЬNULL(АнкетыПоДействующимЗапросам.Проведен, ЛОЖЬ) КАК Проведен
			|ПОМЕСТИТЬ НеотвеченныеОпросыСохраненныеАнкеты
			|ИЗ
			|	ДействующиеОпросыОтборПоРеспонденту КАК ДействующиеОпросыОтборПоРеспонденту
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Тест.Ссылка КАК Ссылка,
			|			Тест.ДатаРедактирования КАК Дата,
			|			Тест.Проведен КАК Проведен,
			|			Тест.Опрос КАК Опрос
			|		ИЗ
			|			Документ.ТестБинарноеДерево КАК Тест
			|		ГДЕ
			|			Тест.Опрос В
			|					(ВЫБРАТЬ
			|						ДействующиеОпросыОтборПоРеспонденту.Ссылка
			|					ИЗ
			|						ДействующиеОпросыОтборПоРеспонденту КАК ДействующиеОпросыОтборПоРеспонденту)
			|			И Тест.Респондент = &Респондент
			|			И НЕ Тест.ПометкаУдаления) КАК АнкетыПоДействующимЗапросам
			|		ПО ДействующиеОпросыОтборПоРеспонденту.Ссылка = АнкетыПоДействующимЗапросам.Опрос
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	""Опросы"" КАК Статус,
			|	ДействующиеОпросыОтборПоРеспонденту.Ссылка КАК АнкетаОпрос,
			|	ДействующиеОпросыОтборПоРеспонденту.ДатаОкончания,
			|	ДействующиеОпросыОтборПоРеспонденту.Наименование,
			|	ВЫБОР
			|		КОГДА ВложенныйЗапрос.Ссылка ЕСТЬ NULL
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК Проведен
			|ПОМЕСТИТЬ ОпросыБезЭкзаменов
			|ИЗ
			|	ДействующиеОпросыОтборПоРеспонденту КАК ДействующиеОпросыОтборПоРеспонденту
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			Тест.Опрос КАК Опрос,
			|			Тест.Ссылка КАК Ссылка
			|		ИЗ
			|			Документ.ТестБинарноеДерево КАК Тест
			|		ГДЕ
			|			НЕ Тест.Проведен
			|			И Тест.Опрос В
			|					(ВЫБРАТЬ
			|						ДействующиеОпросыОтборПоРеспонденту.Ссылка
			|					ИЗ
			|						ДействующиеОпросыОтборПоРеспонденту КАК ДействующиеОпросыОтборПоРеспонденту)
			|			И Тест.Респондент = &Респондент
			|			И НЕ Тест.ПометкаУдаления) КАК ВложенныйЗапрос
			|		ПО ДействующиеОпросыОтборПоРеспонденту.Ссылка = ВложенныйЗапрос.Опрос
			|ГДЕ
			|	НЕ ДействующиеОпросыОтборПоРеспонденту.Ссылка.Экзамен
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВложенныйЗапрос.Статус,
			|	ВложенныйЗапрос.АнкетаОпрос,
			|	ВложенныйЗапрос.ДатаОкончания,
			|	ВложенныйЗапрос.Наименование,
			|	ВложенныйЗапрос.ДатаАнкеты
			|ИЗ
			|	(ВЫБРАТЬ
			|		НеотвеченныеОпросыСохраненныеАнкеты.Статус КАК Статус,
			|		НеотвеченныеОпросыСохраненныеАнкеты.АнкетаОпрос КАК АнкетаОпрос,
			|		НеотвеченныеОпросыСохраненныеАнкеты.ДатаОкончания КАК ДатаОкончания,
			|		НеотвеченныеОпросыСохраненныеАнкеты.Наименование КАК Наименование,
			|		НеотвеченныеОпросыСохраненныеАнкеты.ДатаАнкеты КАК ДатаАнкеты
			|	ИЗ
			|		НеотвеченныеОпросыСохраненныеАнкеты КАК НеотвеченныеОпросыСохраненныеАнкеты
			|	ГДЕ
			|		НЕ НеотвеченныеОпросыСохраненныеАнкеты.Проведен
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОпросыБезЭкзаменов.Статус,
			|		ОпросыБезЭкзаменов.АнкетаОпрос,
			|		ОпросыБезЭкзаменов.ДатаОкончания,
			|		ОпросыБезЭкзаменов.Наименование,
			|		NULL
			|	ИЗ
			|		ОпросыБезЭкзаменов КАК ОпросыБезЭкзаменов
			|	ГДЕ
			|		НЕ ОпросыБезЭкзаменов.Проведен) КАК ВложенныйЗапрос";
		
		Запрос.УстановитьПараметр("Респондент", Респондент);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		Запрос.УстановитьПараметр("ПустаяДата" ,Дата(1, 1, 1));
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			
			Возврат Результат.Выгрузить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Для бинарного дерева

#Область БинарноеДерево

// Инициализирует бинарное дерево для теста
//
// Параметры:
//  Форма - УправляемаяФорма - форма теста
//
Процедура ИнициализироватьБинарноеДеревоДляТеста(Форма) Экспорт
	
	Если Форма.ШаблонТеста.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево Тогда
		
		// Очищаем существующие вопросы
		Форма.Объект.Вопросы.Очистить();
		
		// Создаем корневой узел
		КорневойУзел = СоздатьКорневойУзелДерева(Форма.ШаблонТеста);
		Если КорневойУзел = Неопределено Тогда
			ВызватьИсключение "Не удалось создать корневой узел для бинарного дерева";
		КонецЕсли;
		
		// Сохраняем текущий узел в документе
		Форма.Объект.ТекущийУзелДерева = КорневойУзел;
		
		// Добавляем первый вопрос в табличную часть
		ДобавитьВопросВТест(Форма.Объект, КорневойУзел, 1, Перечисления.ТипыПереходовБинарногоДерева.КорневойУзел);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает корневой узел дерева
//
// Параметры:
//  ШаблонТеста - СправочникСсылка.ШаблоныТестов
//
// Возвращаемое значение:
//   СправочникСсылка.УзлыБинарногоДерева
//
Функция СоздатьКорневойУзелДерева(ШаблонТеста)
	
	// Получаем все вопросы по шаблону
	Вопросы = ПолучитьВсеВопросыПоШаблону(ШаблонТеста);
	Если Вопросы.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Выбираем случайный вопрос для корневого узла
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	СлучайныйИндекс = ГСЧ.СлучайноеЧисло(0, Вопросы.Количество() - 1);
	ВопросКорня = Вопросы[СлучайныйИндекс];
	
	// Создаем узел
	НовыйУзел = Справочники.УзлыБинарногоДерева.СоздатьЭлемент();
	НовыйУзел.Наименование = "Корневой узел: " + ВопросКорня.Наименование;
	НовыйУзел.Вопрос = ВопросКорня;
	НовыйУзел.Уровень = 0;
	НовыйУзел.ЯвляетсяЛистом = Ложь;
	НовыйУзел.Записать();
	
	Возврат НовыйУзел;
	
КонецФункции

// Получает все вопросы по шаблону теста
//
// Параметры:
//  ШаблонТеста - СправочникСсылка.ШаблоныТестов
//
// Возвращаемое значение:
//   Массив - массив ссылок на вопросы
//
Функция ПолучитьВсеВопросыПоШаблону(ШаблонТеста)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазделыВопросы.Вопрос
	|ИЗ
	|	Справочник.ШаблоныБинарныхДеревьев.Разделы КАК ШаблоныТестовРазделы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Разделы.Вопросы КАК РазделыВопросы
	|		ПО ШаблоныТестовРазделы.Раздел = РазделыВопросы.Ссылка
	|ГДЕ
	|	ШаблоныТестовРазделы.Ссылка = &ШаблонТеста";
	
	Запрос.УстановитьПараметр("ШаблонТеста", ШаблонТеста);
	
	Результат = Запрос.Выполнить().Выгрузить();
	МассивВопросов = Новый Массив;
	
	Для Каждого Строка Из Результат Цикл
		МассивВопросов.Добавить(Строка.Вопрос);
	КонецЦикла;
	
	Возврат МассивВопросов;
	
КонецФункции

// Добавляет вопрос в тест
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//  Узел - СправочникСсылка.УзлыБинарногоДерева
//  Порядок - Число
//  ТипПерехода - ПеречислениеСсылка.ТипыПереходовБинарногоДерева
//
Процедура ДобавитьВопросВТест(Тест, Узел, Порядок, ТипПерехода)
	
	НоваяСтрока = Тест.ВопросыБинарногоДерева.Добавить();
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	НоваяСтрока.УзелДерева = Узел;
	НоваяСтрока.Вопрос = Узел.Вопрос;
	НоваяСтрока.УровеньДерева = Узел.Уровень;
	НоваяСтрока.ТипПерехода = ТипПерехода;
	НоваяСтрока.ПорядокПрохождения = Порядок;
	НоваяСтрока.ВремяВопроса = ТекущаяДата();
	НоваяСтрока.СтатусУзла = Перечисления.СтатусыУзловБинарногоДерева.Текущий;
	
КонецПроцедуры

// Обрабатывает ответ в бинарном дереве
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//  Ответ - ПеречислениеСсылка.ТипыОтветовБинарногоДерева
//
Процедура ОбработатьОтветБинарноеДерево(Тест, Ответ) Экспорт
	
	ТекущийУзел = Тест.ТекущийУзелДерева;
	Если ТекущийУзел = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Записываем ответ
	ЗаписатьОтветБинарноеДерево(Тест, ТекущийУзел, Ответ);
	
	// Находим следующий узел
	СледующийУзел = НайтиСледующийУзел(ТекущийУзел, Ответ);
	
	Если СледующийУзел = Неопределено Тогда
		// Создаем новый узел или завершаем тест
		СоздатьНовыйУзелДерева(Тест, ТекущийУзел, Ответ);
		Тест.Завершен = Истина;
	Иначе
		// Переходим к следующему вопросу
		Тест.ТекущийУзелДерева = СледующийУзел;
		Порядок = Тест.ВопросыБинарногоДерева.Количество() + 1;
		ТипПерехода = ?(Ответ = Перечисления.ТипыОтветовБинарногоДерева.Да, 
			Перечисления.ТипыПереходовБинарногоДерева.ПереходПоДа,
			Перечисления.ТипыПереходовБинарногоДерева.ПереходПоНет);
		ДобавитьВопросВТест(Тест, СледующийУзел, Порядок, ТипПерехода);
	КонецЕсли;
	
КонецПроцедуры

// Находит следующий узел по ответу
//
// Параметры:
//  ТекущийУзел - СправочникСсылка.УзлыБинарногоДерева
//  Ответ - ПеречислениеСсылка.ТипыОтветовБинарногоДерева
//
// Возвращаемое значение:
//   СправочникСсылка.УзлыБинарногоДерева
//
Функция НайтиСледующийУзел(ТекущийУзел, Ответ)
	
	// В реальной реализации здесь будет поиск в структуре дерева
	// Пока возвращаем Неопределено для демонстрации
	Возврат Неопределено;
	
КонецФункции

// Записывает ответ пользователя
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//  Узел - СправочникСсылка.УзлыБинарногоДерева
//  Ответ - ПеречислениеСсылка.ТипыОтветовБинарногоДерева
//
Процедура ЗаписатьОтветБинарноеДерево(Тест, Узел, Ответ)
	
	НоваяСтрока = Тест.ОтветыБинарногоДерева.Добавить();
	НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор;
	НоваяСтрока.УзелДерева = Узел;
	НоваяСтрока.Вопрос = Узел.Вопрос;
	НоваяСтрока.ТипОтветаБинарный = Ответ;
	НоваяСтрока.ВремяОтвета = ТекущаяДата();
	НоваяСтрока.НомерШага = Тест.ОтветыБинарногоДерева.Количество();
	
КонецПроцедуры

// Создает новый узел в дереве
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//  РодительскийУзел - СправочникСсылка.УзлыБинарногоДерева
//  Ответ - ПеречислениеСсылка.ТипыОтветовБинарногоДерева
//
Процедура СоздатьНовыйУзелДерева(Тест, РодительскийУзел, Ответ)
	
	// Логика создания нового узла при достижении листа дерева
	// В реальной реализации здесь будет создание нового вопроса и узла
	
КонецПроцедуры

// Получает текущий вопрос для бинарного дерева
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//
// Возвращаемое значение:
//   ПланВидовХарактеристикСсылка.ВопросыДляТестирования
//
Функция ПолучитьТекущийВопросБинарноеДерево(Тест) Экспорт
	
	Если Тест.ТекущийУзелДерева = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Тест.ТекущийУзелДерева.Вопрос;
	
КонецФункции

// Проверяет завершение теста с бинарным деревом
//
// Параметры:
//  Тест - ДокументСсылка.ТестБинарноеДерево
//
// Возвращаемое значение:
//   Булево
//
Функция ТестЗавершенБинарноеДерево(Тест) Экспорт
	
	Если Тест.Завершен Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Тест.ТекущийУзелДерева = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Тест.ТекущийУзелДерева.ЯвляетсяЛистом;
	
КонецФункции

#КонецОбласти

#КонецОбласти


&НаСервере
Функция ЭтоБинарноеДеревоНаСервере(ШаблонТеста) Экспорт
	
	// На сервере можем безопасно обращаться к перечислениям
	Возврат ШаблонТеста.ТипТестирования = ПредопределенноеЗначение("Перечисление.ТипыТестирования.БинарноеДерево");
	
КонецФункции

&НаСервере
Процедура ОбработатьОтветБинарноеДеревоНаСервере(Тест, Ответ) Экспорт
	
	// Конвертируем булево значение в перечисление на сервере
	ТипОтвета = ?(Ответ, 
		ПредопределенноеЗначение("Перечисление.ТипыОтветовБинарногоДерева.Да"),
		ПредопределенноеЗначение("Перечисление.ТипыОтветовБинарногоДерева.Нет"));
	
	// Вызываем метод из основного модуля тестирования
	ОбработатьОтветБинарноеДерево(Тест, ТипОтвета);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТекущийВопросБинарноеДеревоНаСервере(Форма) Экспорт
	
	ТекущийВопрос = БазыБинарныеТестыДдеревьяРешений.ПолучитьТекущийВопросБинарноеДерево(Форма.Объект);
	Если ТекущийВопрос <> Неопределено Тогда
		Форма.ФорматированныйДокумент = ТекущийВопрос.Формулировка.Получить();
	КонецЕсли;
	
КонецПроцедуры
