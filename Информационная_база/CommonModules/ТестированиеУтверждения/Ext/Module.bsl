//========================
// Общий модуль ТестированиеУтверждения (Сервер, Вызов сервера)
//========================

#Область Служебные

// Вспомогательная функция для утверждений
Процедура Утвердить(Описание, Условие) Экспорт
    Если НЕ Условие Тогда
	    Сообщить("УТВЕРЖДЕНИЕ НЕ ВЫПОЛНЕНО: " + Описание);
        ВызватьИсключение "УТВЕРЖДЕНИЕ НЕ ВЫПОЛНЕНО: " + Описание;
    КонецЕсли;
    Сообщить("   ✓ " + Описание);
КонецПроцедуры

Процедура УтвержденияПроверитьРавенство(Результат, ОжидаемыйРезультат, ОписаниеТеста) Экспорт
    
    Если Результат <> ОжидаемыйРезультат Тогда
        Сообщить("Ошибка в тесте: " + ОписаниеТеста + ". 
                 |Ожидаемый результат: " + ОжидаемыйРезультат + ", 
                 |Фактический результат: " + Результат, СтатусСообщения.ОченьВажное);
        ВызватьИсключение "Тест не пройден: " + ОписаниеТеста;
    Иначе
        Сообщить("Тест пройден: " + ОписаниеТеста, СтатусСообщения.Информация);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти


#Область Тесты

// Комплексный тест всех основных веток после рефакторинга архитектуры.
// Проверяет создание теста из шаблона и прохождение по всем возможным путям дерева "Угадай животное".
Процедура Тест_ВсеОсновныеВетки_ПослеРефакторинга() Экспорт
    
    Сообщить("=== КОМПЛЕКСНЫЙ ТЕСТ (ПОСЛЕ РЕФАКТОРИНГА) ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // --- ЭТАП 1: Создание эталонного шаблона ОДИН РАЗ ---
        Сообщить("--- Этап 1: Создание эталонного шаблона ---");
        ЭталонныйШаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
        ЭталонныйШаблон.Наименование = "Эталон Угадай Животное";
        ЭталонныйШаблон.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
        ЭталонныйШаблон.Записать(); // Получаем ссылку
        
        // Эта процедура должна быть адаптирована для принятия объекта шаблона
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(ЭталонныйШаблон);
        Утвердить("Эталонный шаблон создан и структура в регистре заполнена", Истина);

        // --- ЭТАП 2: Подготовка сценариев ---
        Сообщить("--- Этап 2: Подготовка сценариев ---");
        ТестовыеСценарии = Новый Массив;
        
        // Сценарий 1: Кит (Да -> Да -> Да)
        Сценарий = Новый Структура("Ответы, ОжидаемыйУзел"); Сценарий.Ответы = Новый Массив;
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.ОжидаемыйУзел = "кит"; ТестовыеСценарии.Добавить(Сценарий);
        
        // Сценарий 2: Акула (Да -> Да -> Нет)
        Сценарий = Новый Структура("Ответы, ОжидаемыйУзел"); Сценарий.Ответы = Новый Массив;
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.ОжидаемыйУзел = "акула"; ТестовыеСценарии.Добавить(Сценарий);
        
        // Сценарий 3: Рыба (Да -> Нет -> Да)
        Сценарий = Новый Структура("Ответы, ОжидаемыйУзел"); Сценарий.Ответы = Новый Массив;
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.ОжидаемыйУзел = "рыба"; ТестовыеСценарии.Добавить(Сценарий);
        
        // Сценарий 4: Осьминог (Да -> Нет -> Нет)
        Сценарий = Новый Структура("Ответы, ОжидаемыйУзел"); Сценарий.Ответы = Новый Массив;
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.ОжидаемыйУзел = "осьминог"; ТестовыеСценарии.Добавить(Сценарий);
        
        // Сценарий 5: Лев (Нет -> Да -> Да)
        Сценарий = Новый Структура("Ответы, ОжидаемыйУзел"); Сценарий.Ответы = Новый Массив;
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.ОжидаемыйУзел = "лев"; ТестовыеСценарии.Добавить(Сценарий);
        
        // Сценарий 6: Собака (Нет -> Да -> Нет)
        Сценарий = Новый Структура("Ответы, ОжидаемыйУзел"); Сценарий.Ответы = Новый Массив;
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.ОжидаемыйУзел = "собака"; ТестовыеСценарии.Добавить(Сценарий);
        
        // Сценарий 7: Птица (Нет -> Нет -> Да)
        Сценарий = Новый Структура("Ответы, ОжидаемыйУзел"); Сценарий.Ответы = Новый Массив;
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий.ОжидаемыйУзел = "птица"; ТестовыеСценарии.Добавить(Сценарий);
        
        // Сценарий 8: Змея (Нет -> Нет -> Нет)
        Сценарий = Новый Структура("Ответы, ОжидаемыйУзел"); Сценарий.Ответы = Новый Массив;
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий.ОжидаемыйУзел = "змея"; ТестовыеСценарии.Добавить(Сценарий);

        // --- ЭТАП 3: Прогон сценариев ---
        Сообщить("--- Этап 3: Прогон сценариев ---");
        УспешноТестов = 0;
        ВсегоТестов = ТестовыеСценарии.Количество();
        
        Для Каждого Сценарий Из ТестовыеСценарии Цикл
            Попытка
                Сообщить("--- Тест сценария: " + Сценарий.ОжидаемыйУзел + " ---");
                
                // Создаем НОВЫЙ ТЕСТ ИЗ ШАБЛОНА
                Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
                Тест.Заполнить(ЭталонныйШаблон.Ссылка); // Вызываем ОбработкуЗаполнения
                Тест.Записать(); 
                Тест = Тест.Ссылка.ПолучитьОбъект();

                // Проверяем, что подготовка прошла успешно
                Утвердить("Структура скопирована в тест", Тест.СтруктураДереваТеста.Количество() > 0);
                Утвердить("Корневой узел инициализирован", ЗначениеЗаполнено(Тест.ТекущийУзелДерева));
                
                // ОБРАБАТЫВАЕМ ОТВЕТЫ ПО СЦЕНАРИЮ
                Для Каждого Ответ Из Сценарий.Ответы Цикл
                    ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Ответ);
                    Тест = Тест.Ссылка.ПолучитьОбъект();
                КонецЦикла;
                
                // ПРОВЕРЯЕМ РЕЗУЛЬТАТ
                Утвердить("Сценарий '" + Сценарий.ОжидаемыйУзел + "': тест завершен", Тест.Завершен);
                Утвердить("Сценарий '" + Сценарий.ОжидаемыйУзел + "': результат Сдан", Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан);
                Утвердить("Сценарий '" + Сценарий.ОжидаемыйУзел + "': финальный узел содержит '" + Сценарий.ОжидаемыйУзел + "'", 
                    СтрНайти(НРег(Тест.ТекущийУзелДерева.Наименование), НРег(Сценарий.ОжидаемыйУзел)) > 0);
                
                УспешноТестов = УспешноТестов + 1;
                Сообщить("   ✅ " + Сценарий.ОжидаемыйУзел + " - УСПЕХ");
                
            Исключение
                Сообщить("   ❌ " + Сценарий.ОжидаемыйУзел + " - ОШИБКА: " + ОписаниеОшибки());
            КонецПопытки;
        КонецЦикла;
        
        Сообщить("=== ИТОГИ КОМПЛЕКСНОГО ТЕСТА ===");
        Сообщить("   Успешно: " + УспешноТестов + " из " + ВсегоТестов);
        Если УспешноТестов <> ВсегоТестов Тогда
            ВызватьИсключение "Не все тесты пройдены: " + УспешноТестов + "/" + ВсегоТестов;
        КонецЕсли;
        
    Исключение
        Сообщить("❌ КОМПЛЕКСНЫЙ ТЕСТ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Остальные ваши тесты, адаптированные для вызова из этого модуля

Процедура Тест_ЗавершениеТестаПриЛистовомУзле() Экспорт
    Сообщить("=== ТЕСТ: ЗАВЕРШЕНИЕ ТЕСТА ПРИ ДОСТИЖЕНИИ ЛИСТОВОГО УЗЛА ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        ТестированиеБинарноеДерево.СоздатьМинимальноеДеревоДляТеста2(Тест);
		Тест.ТекущийУзелДерева = Справочники.УзлыБинарногоДерева.НайтиПоНаименованию("Корневой узел");
		Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("Тест не завершен изначально", Тест.Завершен = Ложь);
        
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("Тест завершен", Тест.Завершен = Истина);
        Утвердить("Результат = Сдан", Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан);
        Утвердить("Процент = 100", Тест.ПроцентЗавершения = 100);
        
        Сообщить("✅ ТЕСТ ЗАВЕРШЕНИЯ ТЕСТА ПРОЙДЕН");
    Исключение
        Сообщить("❌ ТЕСТ ЗАВЕРШЕНИЯ ТЕСТА ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры

// И так далее для всех остальных ваших тестов...
// Просто добавьте "ТестированиеБинарноеДерево." перед каждой процедурой, 
// которая была перемещена из этого модуля.

// Добавьте эту процедуру для диагностики
Процедура ДиагностикаПроблемы() Экспорт
    
    Сообщить("=== МИНИМАЛЬНАЯ ДИАГНОСТИКА ===");
    
    // 1. Проверим создание узла
    Сообщить("1. Тест создания узла:");
    Вопрос = ТестированиеБинарноеДерево.СоздатьВопрос("Тестовый вопрос", "Для диагностики");
    Узел = ТестированиеБинарноеДерево.СоздатьУзел("Тестовый узел", Вопрос);
    
    Если Узел = Неопределено Тогда
        Сообщить("   ОШИБКА: Узел не создан!");
        Возврат;
    Иначе
        Сообщить("   ✓ Узел создан: " + Узел.Наименование);
    КонецЕсли;
    
    // 2. Проверим запись в табличную часть
    Сообщить("2. Тест записи в табличную часть:");
    Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
    Тест.Дата = ТекущаяДата();
    
    Попытка
        ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, Неопределено, Неопределено, Узел, Вопрос, Ложь);
        Сообщить("   ✓ Запись в табличную часть выполнена");
    Исключение
        Сообщить("   ОШИБКА записи: " + ОписаниеОшибки());
        Возврат;
    КонецПопытки;
    
    // 3. Проверим что записалось
    Сообщить("3. Проверка содержимого табличной части:");
    Сообщить("   Количество строк: " + Тест.СтруктураДереваТеста.Количество());
    
    Для Каждого Строка Из Тест.СтруктураДереваТеста Цикл
        Сообщить("   УзелДерева: " + ?(Строка.УзелДерева = Неопределено, "НЕОПРЕДЕЛЕНО", Строка.УзелДерева.Наименование));
        Сообщить("   РодительскийУзел: " + ?(Строка.РодительскийУзел = Неопределено, "НЕОПРЕДЕЛЕНО", Строка.РодительскийУзел.Наименование));
    КонецЦикла;
    
    // 4. Попробуем записать документ
    Сообщить("4. Тест записи документа:");
    Попытка
        Тест.Записать();
        Сообщить("   ✓ Документ записан");
    Исключение
        Сообщить("   ОШИБКА записи документа: " + ОписаниеОшибки());
    КонецПопытки;
    
    Сообщить("=== ДИАГНОСТИКА ЗАВЕРШЕНА ===");
    
КонецПроцедуры

// Детальная диагностика табличной части
Процедура ДиагностикаТабличнойЧасти() Экспорт
    
    Сообщить("=== ДЕТАЛЬНАЯ ДИАГНОСТИКА ТАБЛИЧНОЙ ЧАСТИ СтруктураДереваТеста ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    // Создаем тестовый узел
    Вопрос = ТестированиеБинарноеДерево.СоздатьВопрос("Тестовый вопрос", "Для диагностики");
    Узел = ТестированиеБинарноеДерево.СоздатьУзел("Тестовый узел", Вопрос);
    
    // Создаем документ
    Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
    Тест.Дата = ТекущаяДата();
    
    // 1. Проверим узел ДО записи в табличную часть
    Сообщить("1. Узел перед записью в табличную часть:");
    Сообщить("   Ссылка узла: " + Узел.Ссылка);
    Сообщить("   Пустая ссылка: " + Узел.Ссылка.Пустая());
    
    // 2. Записываем в табличную часть
    НоваяСтрока = Тест.СтруктураДереваТеста.Добавить();
    НоваяСтрока.УзелДерева = Узел.Ссылка;
    НоваяСтрока.РодительскийУзел = Неопределено;
    НоваяСтрока.ТипСвязи = Неопределено;
    НоваяСтрока.Вопрос = Вопрос.Ссылка;
    НоваяСтрока.ЯвляетсяЛистом = Ложь;
    НоваяСтрока.Активность = Истина;
    НоваяСтрока.Уровень = 0;
    
    // 3. Проверим табличную часть ДО записи документа
    Сообщить("2. Табличная часть ДО записи документа:");
    Для Каждого Строка Из Тест.СтруктураДереваТеста Цикл
        Сообщить("   УзелДерева: " + Строка.УзелДерева);
        Сообщить("   УзелДерева = Неопределено: " + (Строка.УзелДерева = Неопределено));
		Если Строка.УзелДерева <> Неопределено Тогда
			Если Строка.УзелДерева.Пустая() Тогда
				Сообщить("Строка.УзелДерева ПУСТАЯ ДО записи документа");
			Иначе
				Попытка
					УзелОбъект = Строка.УзелДерева.ПолучитьОбъект();
					Если УзелОбъект <> Неопределено Тогда
						Сообщить("   Наименование узла: " + УзелОбъект.Наименование);
					Иначе
						Сообщить("   ОШИБКА: Объект узла не найден");
					КонецЕсли;
				Исключение
					Сообщить("   ОШИБКА чтения наименования: " + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
    КонецЦикла;
    
    // 4. Записываем документ
    Тест.Записать();
    
    // 5. Проверим табличную часть ПОСЛЕ записи документа
    Сообщить("3. Табличная часть ПОСЛЕ записи документа:");
    Для Каждого Строка Из Тест.СтруктураДереваТеста Цикл
        Сообщить("   УзелДерева: " + Строка.УзелДерева);
        Сообщить("   УзелДерева = Неопределено: " + (Строка.УзелДерева = Неопределено));
		Если Строка.УзелДерева <> Неопределено Тогда
			Если Строка.УзелДерева.Пустая() Тогда
				Сообщить("Строка.УзелДерева ПОСЛЕ записи документа - пустая ссылка (структуру дерева неработоспособн)");
			Иначе
				Попытка
					УзелОбъект = Строка.УзелДерева.ПолучитьОбъект();
					Если УзелОбъект <> Неопределено Тогда
						Сообщить("   Наименование узла: " + УзелОбъект.Наименование);
					Иначе
						Сообщить("   ОШИБКА: Не удалось получить объект узла");
					КонецЕсли;
				Исключение
					Сообщить("   ОШИБКА чтения узла: " + ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
    
    Сообщить("=== ДИАГНОСТИКА ЗАВЕРШЕНА ===");
    ТестированиеБинарноеДерево.ПроверитьЦелостностьДанных();
КонецПроцедуры


// Тест создания и прохождения бинарного дерева
Процедура Тест_СозданиеИПрохождениеБинарногоДерева()
    
    Сообщить("=== Тест создания и прохождения бинарного дерева ===");
    
    // 1. Создаем шаблон бинарного дерева
    Шаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
    Шаблон.Наименование = "Угадай животное - тест";
    Шаблон.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
    Шаблон.КонтролироватьВремя = Ложь;
    
    // 2. Добавляем раздел в шаблон (правильный способ для табличной части)
    Раздел = Справочники.Разделы.НайтиПоНаименованию("Бинарные деревья - Угадай животное");
    Если Не Раздел.Пустая() Тогда
        // Правильное добавление в табличную часть
        НоваяСтрока = Шаблон.Разделы.Добавить();
        НоваяСтрока.Раздел = Раздел;
        НоваяСтрока.КоличествоВопросов = 7;
        Сообщить("2. Добавлен раздел в шаблон: " + Раздел.Наименование);
    КонецЕсли;
    
    Шаблон.Записать();
    Сообщить("1. Создан шаблон бинарного дерева: " + Шаблон.Наименование);
    
    // 3. Создаем тест
    Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
    Тест.ШаблонТеста = Шаблон;
    
    // Находим респондента
    Респондент = ТестированиеБинарноеДерево.НайтиПервогоРеспондента();
    Тест.Респондент = Респондент;
    Тест.ВремяНачалаТеста = ТекущаяДата();
    Тест.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
	Тест.Дата = ТекущаяДата();
	Тест.Записать();
    Сообщить("3. Создан тест бинарного дерева");
    
    // 4. Инициализируем структуру дерева для теста
    ТестированиеБинарноеДерево.ИнициализироватьСтруктуруДереваДляТеста(Тест);
    Сообщить("4. Структура дерева инициализирована");
    
    // 5. Устанавливаем корневой узел
    ТестированиеБинарноеДерево.УстановитьКорневойУзелДляТеста(Тест);
    Сообщить("5. Установлен корневой узел: " + Тест.ТекущийУзелДерева.Наименование);
    
    // 6. Получаем первый вопрос
    ПервыйВопрос = ТестированиеБинарноеДерево.ПолучитьТекущийВопросБинарногоДерева(Тест);
    Если Не ПервыйВопрос.Пустая() Тогда
        Сообщить("6. Первый вопрос: " + ПервыйВопрос.ТекстФормулировки);
    КонецЕсли;
    
    // 7. Обрабатываем ответ "Нет" на первый вопрос
    Сообщить("7. Обрабатываем ответ 'Нет' на первый вопрос");
    ТестированиеБинарноеДерево.ОбработатьОтветБинарногоДерева(Тест, Перечисления.ТипыОтветовБинарногоДерева.Нет);
    
    // 8. Проверяем состояние
    Если ТестированиеБинарноеДерево.ТестЗавершенБинарноеДерево(Тест) Тогда
        Сообщить("8. Тест завершен!");
    Иначе
        СледующийВопрос = ТестированиеБинарноеДерево.ПолучитьТекущийВопросБинарногоДерева(Тест);
        Если Не СледующийВопрос.Пустая() Тогда
            Сообщить("8. Следующий вопрос: " + СледующийВопрос.ТекстФормулировки);
        КонецЕсли;
    КонецЕсли;
    
    Сообщить("=== Тест завершен успешно ===");
    
КонецПроцедуры

// Тест создания и прохождения бинарного дерева с использованием API модуля
Процедура Тест_СозданиеИПрохождениеБинарногоДерева_Новый()
    
    Сообщить("=== Тест создания и прохождения бинарного дерева (новый API) ===");
    
    Попытка
        // 1. Создаем шаблон бинарного дерева
        Шаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
        Шаблон.Наименование = "Угадай животное - тест API";
        Шаблон.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
        Шаблон.КонтролироватьВремя = Ложь;
        
        // 2. Создаем структуру дерева "Угадай животное"
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Шаблон);
        Сообщить("1. Создана структура дерева 'Угадай животное'");
        
        Шаблон.Записать();
        Сообщить("2. Шаблон бинарного дерева записан: " + Шаблон.Наименование);
        
        // 3. Создаем тест
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.ШаблонТеста = Шаблон;
        
        // Находим респондента
        Респондент = ТестированиеБинарноеДерево.НайтиПервогоРеспондента();
        Тест.Респондент = Респондент;
        Тест.ВремяНачалаТеста = ТекущаяДата();
        Тест.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
		Тест.Дата = ТекущаяДата();
        Тест.Записать();
        Сообщить("3. Создан тест бинарного дерева");
        
        // 4. Инициализируем бинарное дерево для теста (используем API модуля)
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Сообщить("4. Бинарное дерево инициализировано для теста");
        
        // 5. Получаем первый вопрос через API модуля
        ПервыйВопрос = ТестированиеБинарноеДерево.ПолучитьТекущийВопрос(Тест);
        Если ПервыйВопрос <> Неопределено Тогда
            Сообщить("5. Первый вопрос: " + ПервыйВопрос.ТекстФормулировки);
        Иначе
            Сообщить("5. Первый вопрос не найден");
        КонецЕсли;
        Тест.Записать();
        // 6. Обрабатываем ответ "Нет" на первый вопрос через API модуля
        Сообщить("6. Обрабатываем ответ 'Нет' на первый вопрос");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        // 7. Проверяем состояние теста через API модуля
        Если ТестированиеБинарноеДерево.ТестЗавершен(Тест) Тогда
            Сообщить("7. Тест завершен!");
        Иначе
            СледующийВопрос = ТестированиеБинарноеДерево.ПолучитьТекущийВопрос(Тест);
            Если СледующийВопрос <> Неопределено Тогда
                Сообщить("7. Следующий вопрос: " + СледующийВопрос.ТекстФормулировки);
            КонецЕсли;
        КонецЕсли;
        Тест.Записать();
        // 8. Продолжаем тест - обрабатываем еще один ответ
        Сообщить("8. Обрабатываем ответ 'Да' на следующий вопрос");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        
        // 9. Проверяем финальное состояние
        Если ТестированиеБинарноеДерево.ТестЗавершен(Тест) Тогда
            Сообщить("9. Тест завершен! Результат: " + Тест.РезультатСдачи);
        Иначе
            Сообщить("9. Тест продолжается...");
        КонецЕсли;
        
        Сообщить("=== Тест завершен успешно ===");
        
    Исключение
        Сообщить("Ошибка при выполнении теста: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест полного прохождения по одному из путей
Процедура Тест_ПолноеПрохождениеПоПути()
    
    Сообщить("=== Тест полного прохождения по пути 'Наземные животные' ===");
    
    Попытка
        // Создаем шаблон
        Шаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
        Шаблон.Наименование = "Тест полного прохождения";
        Шаблон.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Шаблон);
        Шаблон.Записать();
        
        // Создаем тест
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.ШаблонТеста = Шаблон;
        Тест.Респондент = ТестированиеБинарноеДерево.НайтиПервогоРеспондента();
        Тест.ВремяНачалаТеста = ТекущаяДата();
		Тест.Дата = ТекущаяДата();
        Тест.Записать();
        
        // Инициализируем
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест.Записать();
        // Проходим по пути: НЕТ -> НЕТ -> ДА (должны прийти к птице)
        Сообщить("Шаг 1: Корневой вопрос - 'Оно живет в воде?' -> Ответ: НЕТ");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        Сообщить("Шаг 2: Вопрос - 'У него 4 ноги?' -> Ответ: НЕТ");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        Сообщить("Шаг 3: Вопрос - 'У него есть крылья?' -> Ответ: ДА");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        
        // Проверяем результат
        Если ТестированиеБинарноеДерево.ТестЗавершен(Тест) Тогда
            ТекущийВопрос = ТестированиеБинарноеДерево.ПолучитьТекущийВопрос(Тест);
            Если ТекущийВопрос <> Неопределено Тогда
                Сообщить("Финальный вопрос: " + ТекущийВопрос.ТекстФормулировки);
                Сообщить("Результат теста: " + Тест.РезультатСдачи);
                Сообщить("Процент завершения: " + Тест.ПроцентЗавершения + "%");
            КонецЕсли;
        КонецЕсли;
        
        Сообщить("=== Полное прохождение завершено ===");
        
    Исключение
        Сообщить("Ошибка при полном прохождении: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры



Процедура Тест_БазовыеФункцииДерева() Экспорт
    
    // 1. Тест создания узла
    Вопрос = ТестированиеБинарноеДерево.СоздатьВопрос("Тестовый вопрос", "Для тестирования");
    Узел = ТестированиеБинарноеДерево.СоздатьУзел("Тестовый узел", Вопрос);
    Утвердить("Узел создан", Узел <> Неопределено);
    
    // 2. Тест записи в структуру
    Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
    Тест.Дата = ТекущаяДата();
    ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, Неопределено, Неопределено, Узел, Вопрос, Ложь);
    Утвердить("Узел записан в структуру", Тест.СтруктураДереваТеста.Количество() = 1);
    
    // 3. Тест поиска корневого узла
    КорневойУзел = ТестированиеБинарноеДерево.НайтиКорневойУзел(Тест);
    Утвердить("Корневой узел найден", КорневойУзел <> Неопределено);
    
КонецПроцедуры

Процедура Тест_ПостроениеДерева() Экспорт
    
    Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
    Тест.Дата = ТекущаяДата();
    
    // Создаем тестовые вопросы
    Вопросы = Новый Массив;
    Вопросы.Добавить(ТестированиеБинарноеДерево.СоздатьВопрос("Вопрос 1", "Первый вопрос"));
    Вопросы.Добавить(ТестированиеБинарноеДерево.СоздатьВопрос("Вопрос 2", "Второй вопрос"));
    Вопросы.Добавить(ТестированиеБинарноеДерево.СоздатьВопрос("Вопрос 3", "Третий вопрос"));
    
    // Создаем универсальное дерево
    ТестированиеБинарноеДерево.СоздатьУниверсальноеБинарноеДерево(Тест, Вопросы);
    
    // Проверяем результат
    Утвердить("Структура создана", Тест.СтруктураДереваТеста.Количество() > 0);
    Утвердить("Целостность проверена", ТестированиеБинарноеДерево.ПроверитьЦелостностьСтруктурыДерева(Тест));
    
КонецПроцедуры


// Финальный тест
Процедура Тест_ФинальнаяПроверка() Экспорт
    Сообщить("=== ФИНАЛЬНАЯ ПРОВЕРКА РАБОТЫ БИНАРНОГО ДЕРЕВА ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    Попытка
	    ТестированиеБинарноеДерево.ПроверитьЦелостностьВСистеме();
        // Создаем тест
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
		//Тест.Наименование = "Финальный тест бинарного дерева";
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        // Создаем структуру дерева
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Тест);
        
        // Инициализируем
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        
        // Проверяем результат
        Сообщить("1. Проверка инициализации:");
        Сообщить("   Текущий узел: " + Тест.ТекущийУзелДерева.Наименование);
        Сообщить("   Вопрос: " + Тест.ТекущийУзелДерева.Вопрос.ТекстФормулировки);
        Тест.Записать();
        // Обрабатываем ответ
        Сообщить("2. Обработка ответа 'НЕТ':");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        Сообщить("3. Результат после ответа:");
        Сообщить("   Текущий узел: " + Тест.ТекущийУзелДерева.Наименование);
        Сообщить("   Вопрос: " + Тест.ТекущийУзелДерева.Вопрос.ТекстФормулировки);
        Сообщить("   Количество ответов: " + Тест.ОтветыБинарногоДерева.Количество());
        
        Сообщить("=== ФИНАЛЬНЫЙ ТЕСТ УСПЕШНО ЗАВЕРШЕН ===");
        
    Исключение
        Сообщить("ОШИБКА: " + ОписаниеОшибки());
    КонецПопытки;
	ТестированиеБинарноеДерево.ПроверитьЦелостностьДанных();
КонецПроцедуры

Процедура Тест_КоличествоОтветовПовышается() Экспорт
    
    Сообщить("=== ТЕСТ: КОЛИЧЕСТВО ОТВЕТОВ ПОВЫШАЕТСЯ ПОСЛЕ ОБРАБОТКИ ===");

    Попытка
        // ПОДГОТОВКА ТЕСТА
        Сообщить("1. Подготовка тестового окружения...");
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        // СОЗДАНИЕ СТРУКТУРЫ ДЕРЕВА
        Сообщить("2. Создание структуры бинарного дерева...");
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        
        // ПРОВЕРКА НАЧАЛЬНОГО СОСТОЯНИЯ
        Сообщить("3. Проверка начального состояния...");
        Если Тест.ОтветыБинарногоДерева.Количество() <> 0 Тогда
            ВызватьИсключение "ОШИБКА: В начальном состоянии должно быть 0 ответов!";
        КонецЕсли;
        Сообщить("   ✓ Начальное состояние: " + Тест.ОтветыБинарногоДерева.Количество() + " ответов");
        
        // ЗАПОМИНАЕМ КОРНЕВОЙ УЗЕЛ
        НачальныйУзел = Тест.ТекущийУзелДерева;
        Сообщить("   ✓ Корневой узел: " + НачальныйУзел.Наименование);
        
        // ВЫПОЛНЕНИЕ ДЕЙСТВИЯ - ОБРАБОТКА ОТВЕТА
        Сообщить("4. Обработка ответа 'НЕТ'...");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        // ⭐ ЯВНАЯ ПРОВЕРКА: КОЛИЧЕСТВО ОТВЕТОВ > 0
        Сообщить("5. ВЫПОЛНЕНИЕ ГЛАВНОЙ ПРОВЕРКИ...");
        Если Тест.ОтветыБинарногоДерева.Количество() = 0 Тогда
            ВызватьИсключение "ТЕСТ ПРОВАЛЕН: После обработки ответа количество ответов осталось 0!";
        КонецЕсли;
        
        // ДОПОЛНИТЕЛЬНЫЕ ПОДТВЕРЖДАЮЩИЕ ПРОВЕРКИ
        Сообщить("6. Дополнительные проверки...");
        
        // Проверка точного количества
        Если Тест.ОтветыБинарногоДерева.Количество() <> 1 Тогда
            ВызватьИсключение "ОШИБКА: После одного ответа должно быть ровно 1 запись!";
        КонецЕсли;
        Сообщить("   ✓ Количество ответов: " + Тест.ОтветыБинарногоДерева.Количество() + " (ожидалось: 1)");
        
        // Проверка что узел изменился
        Если Тест.ТекущийУзелДерева = НачальныйУзел Тогда
            ВызватьИсключение "ОШИБКА: Текущий узел не изменился после ответа!";
        КонецЕсли;
        Сообщить("   ✓ Узел обновлен: " + НачальныйУзел.Наименование + " → " + Тест.ТекущийУзелДерева.Наименование);
        
        // Проверка содержимого ответа
        Ответ = Тест.ОтветыБинарногоДерева[0];
        Если Ответ.ТипОтветаБинарный <> Перечисления.ТипыОтветовБинарногоДерева.Нет Тогда
            ВызватьИсключение "ОШИБКА: Тип ответа должен быть 'Нет'!";
        КонецЕсли;
        Сообщить("   ✓ Тип ответа корректен: Нет");
        
        // ФИНАЛЬНЫЙ ВЫВОД
        Сообщить("=== ТЕСТ ПРОЙДЕН УСПЕШНО! ===");
        Сообщить("✅ ГЛАВНАЯ ПРОВЕРКА: Тест.ОтветыБинарногоДерева.Количество() > 0 - ВЫПОЛНЕНА");
        Сообщить("   Результат: " + Тест.ОтветыБинарногоДерева.Количество() + " > 0 ✓");
        Сообщить("   Ответы действительно добавляются в табличную часть!");
        
    Исключение
        Сообщить("=== ТЕСТ ПРОВАЛЕН! ===");
        Сообщить("❌ ОШИБКА: " + ОписаниеОшибки());
        Сообщить("❌ ГЛАВНАЯ ПРОВЕРКА: Тест.ОтветыБинарногоДерева.Количество() > 0 - НЕ ВЫПОЛНЕНА");
    КонецПопытки;
    
КонецПроцедуры

Процедура Тест_КоличествоОтветовПовышается_Минимальная() Экспорт
    
    Сообщить("=== ТЕСТ: КОЛИЧЕСТВО ОТВЕТОВ > 0 ПОСЛЕ ОБРАБОТКИ ===");

    Попытка
        // БЫСТРАЯ ПОДГОТОВКА
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        
        // ПРЕДУСЛОВИЕ: 0 ответов до обработки
        Утвердить("0 ответов до обработки", Тест.ОтветыБинарногоДерева.Количество() = 0);
        
        // ДЕЙСТВИЕ: обрабатываем ответ
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        // ⭐ ГЛАВНАЯ ПРОВЕРКА: количество ответов > 0
        Утвердить("Количество ответов > 0 после обработки", Тест.ОтветыБинарногоДерева.Количество() > 0);
        
        Сообщить("✅ ТЕСТ ПРОЙДЕН: Ответы добавляются в табличную часть!");
        
    Исключение
        Сообщить("❌ ТЕСТ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

Процедура Тест_КоличествоОтветовРастетСКаждымОтветом() Экспорт
    
    Сообщить("=== ТЕСТ: КОЛИЧЕСТВО ОТВЕТОВ РАСТЕТ С КАЖДЫМ ОТВЕТОМ ===");

    Попытка
        // ПОДГОТОВКА
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        // СОЗДАНИЕ СТРУКТУРЫ ДЕРЕВА - ТОЛЬКО ОДИН РАЗ
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        
        // ⭐⭐ ВАЖНО: Перечитываем объект после инициализации
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // ТЕСТИРУЕМ ПОСЛЕДОВАТЕЛЬНОСТЬ ОТВЕТОВ
        ОтветыДляОбработки = Новый Массив;
        ОтветыДляОбработки.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);  // 1-й ответ
        ОтветыДляОбработки.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);   // 2-й ответ
        ОтветыДляОбработки.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);  // 3-й ответ
        
        ОжидаемоеКоличествоОтветов = 0;
        
        Для Каждого Ответ Из ОтветыДляОбработки Цикл
            // Обрабатываем ответ
            ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Ответ);
            
            // ⭐⭐ ВАЖНО: Перечитываем объект после каждого ответа
            Тест = Тест.Ссылка.ПолучитьОбъект();
            
            ОжидаемоеКоличествоОтветов = ОжидаемоеКоличествоОтветов + 1;
            
            // ⭐ ГЛАВНАЯ ПРОВЕРКА ПОСЛЕ КАЖДОГО ОТВЕТА
            Если Тест.ОтветыБинарногоДерева.Количество() <= 0 Тогда
                ВызватьИсключение "ТЕСТ ПРОВАЛЕН: После ответа №" + ОжидаемоеКоличествоОтветов + 
                                " количество ответов = " + Тест.ОтветыБинарногоДерева.Количество() + " (ожидалось > 0)";
            КонецЕсли;
            
            // Дополнительная проверка точного количества
            Если Тест.ОтветыБинарногоДерева.Количество() <> ОжидаемоеКоличествоОтветов Тогда
                ВызватьИсключение "ОШИБКА: После ответа №" + ОжидаемоеКоличествоОтветов + 
                                " количество ответов = " + Тест.ОтветыБинарногоДерева.Количество() + 
                                " (ожидалось " + ОжидаемоеКоличествоОтветов + ")";
            КонецЕсли;
            
            Сообщить("   ✓ Ответ №" + ОжидаемоеКоличествоОтветов + " обработан: количество ответов = " + 
                    Тест.ОтветыБинарногоДерева.Количество() + " (>0 ✓)");
        КонецЦикла;
        
        // ФИНАЛЬНАЯ ПРОВЕРКА
        Сообщить("=== ИТОГИ ТЕСТА ===");
        Сообщить("✅ ГЛАВНАЯ ПРОВЕРКА ВЫПОЛНЕНА:");
        Сообщить("   После каждого ответа: Тест.ОтветыБинарногоДерева.Количество() > 0");
        Сообщить("   Финальное количество ответов: " + Тест.ОтветыБинарногоДерева.Количество() + " (>0 ✓)");
        Сообщить("   Все ответы успешно записываются в табличную часть!");
        
    Исключение
        Сообщить("❌ ТЕСТ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

Процедура Тест_ДиагностикаОтветов() Экспорт
    
    Сообщить("=== ДИАГНОСТИКА ЗАПИСИ ОТВЕТОВ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // 1. Создаем тест
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        // 2. Создаем минимальную структуру
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Сообщить("Состояние ДО ответа:");
        Сообщить("   ОтветыБинарногоДерева.Количество(): " + Тест.ОтветыБинарногоДерева.Количество());
        Сообщить("   ТекущийУзелДерева: " + Тест.ТекущийУзелДерева.Наименование);
        
        // 3. Обрабатываем ответ
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        // 4. Перечитываем и проверяем
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Сообщить("Состояние ПОСЛЕ ответа:");
        Сообщить("   ОтветыБинарногоДерева.Количество(): " + Тест.ОтветыБинарногоДерева.Количество());
        Сообщить("   ТекущийУзелДерева: " + Тест.ТекущийУзелДерева.Наименование);
        
        Если Тест.ОтветыБинарногоДерева.Количество() > 0 Тогда
            Сообщить("✅ ОТВЕТЫ ДОБАВЛЯЮТСЯ!");
            Сообщить("   Первый ответ: " + Тест.ОтветыБинарногоДерева[0].ТипОтветаБинарный);
        Иначе
            Сообщить("❌ ОТВЕТЫ НЕ ДОБАВЛЯЮТСЯ!");
        КонецЕсли;
        
    Исключение
        Сообщить("ОШИБКА: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// ТЕСТ 1: Проверка записи вопросов в табличную часть
Процедура Тест_ЗаписьВопросовВТабличнуюЧасть() Экспорт
    
    Сообщить("=== ТЕСТ: ЗАПИСЬ ВОПРОСОВ В ТАБЛИЧНУЮ ЧАСТЬ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // 1. ПОДГОТОВКА
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        СоздатьМинимальноеДеревоДляТеста(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // 2. ПРОВЕРКА НАЧАЛЬНОГО СОСТОЯНИЯ
        Сообщить("1. Начальное состояние:");
        Сообщить("   ВопросыБинарногоДерева.Количество() = " + Тест.ВопросыБинарногоДерева.Количество());
        Сообщить("   ОтветыБинарногоДерева.Количество() = " + Тест.ОтветыБинарногоДерева.Количество());
        Сообщить("   КоличествоВопросов = " + Тест.КоличествоВопросов);
        
        Утвердить("Нет вопросов в начале", Тест.ВопросыБинарногоДерева.Количество() = 0);
        Утвердить("Нет ответов в начале", Тест.ОтветыБинарногоДерева.Количество() = 0);
        
        // 3. ОБРАБОТКА ОТВЕТА
        Сообщить("2. Обработка ответа 'Нет'...");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // 4. ПРОВЕРКА РЕЗУЛЬТАТА
        Сообщить("3. Результат после обработки:");
        Сообщить("   ВопросыБинарногоДерева.Количество() = " + Тест.ВопросыБинарногоДерева.Количество());
        Сообщить("   ОтветыБинарногоДерева.Количество() = " + Тест.ОтветыБинарногоДерева.Количество());
        Сообщить("   КоличествоВопросов = " + Тест.КоличествоВопросов);
        
        // ⭐ ГЛАВНЫЕ ПРОВЕРКИ
        Если Тест.ВопросыБинарногоДерева.Количество() > 0 Тогда
            Сообщить("✅ Вопросы записываются в табличную часть");
            Утвердить("Вопросы добавлены", Истина);
        Иначе
            Сообщить("❌ Вопросы НЕ записываются в табличную часть!");
            Утвердить("Вопросы добавлены", Ложь);
        КонецЕсли;
        
        Утвердить("Ответы добавлены", Тест.ОтветыБинарногоДерева.Количество() = 1);
        
        // 5. ПРОВЕРКА СОДЕРЖИМОГО
        Если Тест.ВопросыБинарногоДерева.Количество() > 0 Тогда
            Сообщить("4. Содержимое табличной части вопросов:");
            Для Каждого ВопросСтрока Из Тест.ВопросыБинарногоДерева Цикл
                Сообщить("   Вопрос: " + ВопросСтрока.Вопрос.ТекстФормулировки);
                Сообщить("   Раздел: " + ВопросСтрока.Раздел.Наименование);
            КонецЦикла;
        КонецЕсли;
        
    Исключение
        Сообщить("❌ ТЕСТ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// ТЕСТ 2: Проверка где должны записываться вопросы
Процедура Тест_АнализПроцессаЗаписиВопросов() Экспорт
    
    Сообщить("=== ТЕСТ: АНАЛИЗ ПРОЦЕССА ЗАПИСИ ВОПРОСОВ ===");
    
    Попытка
        // 1. ПОДГОТОВКА
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        СоздатьМинимальноеДеревоДляТеста(Тест);
        
        // 2. РУЧНАЯ ЗАПИСЬ ВОПРОСА ДЛЯ ТЕСТА
        Сообщить("1. Ручная запись вопроса в табличную часть...");
        КорневойУзел = ТестированиеБинарноеДерево.НайтиКорневойУзел(Тест);
        Если КорневойУзел <> Неопределено Тогда
            НоваяСтрока = Тест.ВопросыБинарногоДерева.Добавить();
            НоваяСтрока.Вопрос = КорневойУзел.Вопрос;
            НоваяСтрока.Раздел = ТестированиеБинарноеДерево.НайтиЛюбойРаздел(); // Нужно найти любой раздел
            НоваяСтрока.Правильность = 0;
            НоваяСтрока.ОтветПолучен = Ложь;
            НоваяСтрока.Проверен = Ложь;
            
            Тест.Записать();
            Тест = Тест.Ссылка.ПолучитьОбъект();
            
            Сообщить("   ВопросыБинарногоДерева.Количество() = " + Тест.ВопросыБинарногоДерева.Количество());
            Утвердить("Ручная запись вопроса работает", Тест.ВопросыБинарногоДерева.Количество() = 1);
        КонецЕсли;
        
    Исключение
        Сообщить("❌ ОШИБКА при ручной записи: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// ТЕСТ 1: Проверка обновления счетчика вопросов в изоляции
Процедура Тест_СчетчикВопросов_ДетальнаяДиагностика() Экспорт
    
    Сообщить("=== ТЕСТ: ДЕТАЛЬНАЯ ДИАГНОСТИКА СЧЕТЧИКА ВОПРОСОВ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // 1. ПОДГОТОВКА
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        // 2. СОЗДАНИЕ МИНИМАЛЬНОЙ СТРУКТУРЫ
        Сообщить("1. Создание минимальной структуры дерева...");
        СоздатьМинимальноеДеревоДляТеста(Тест);
        
        // 3. ИНИЦИАЛИЗАЦИЯ
        Сообщить("2. Инициализация теста...");
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // 4. ПРОВЕРКА НАЧАЛЬНОГО СОСТОЯНИЯ
        Сообщить("3. Начальное состояние:");
        Сообщить("   КоличествоВопросов = " + Тест.КоличествоВопросов);
        Сообщить("   ОтветыБинарногоДерева.Количество() = " + Тест.ОтветыБинарногоДерева.Количество());
        
        Утвердить("Начальный счетчик вопросов = 0", Тест.КоличествоВопросов = 0);
        
        // 5. СОХРАНЯЕМ НАЧАЛЬНОЕ ЗНАЧЕНИЕ ДЛЯ СРАВНЕНИЯ
        НачальноеКоличествоВопросов = Тест.КоличествоВопросов;
        
        // 6. ВЫПОЛНЯЕМ ОБРАБОТКУ ОТВЕТА
        Сообщить("4. Обработка ответа 'Нет'...");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        // 7. ПЕРЕЧИТЫВАЕМ ОБЪЕКТ
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // 8. ДЕТАЛЬНАЯ ПРОВЕРКА РЕЗУЛЬТАТА
        Сообщить("5. Результат после обработки:");
        Сообщить("   КоличествоВопросов = " + Тест.КоличествоВопросов);
        Сообщить("   ОтветыБинарногоДерева.Количество() = " + Тест.ОтветыБинарногоДерева.Количество());
        Сообщить("   Начальное значение = " + НачальноеКоличествоВопросов);
        
        // ⭐ ГЛАВНАЯ ПРОВЕРКА
        Если Тест.КоличествоВопросов > НачальноеКоличествоВопросов Тогда
            Сообщить("✅ Счетчик вопросов УВЕЛИЧИЛСЯ: " + НачальноеКоличествоВопросов + " → " + Тест.КоличествоВопросов);
            Утвердить("Счетчик вопросов увеличился", Истина);
        ИначеЕсли Тест.КоличествоВопросов = НачальноеКоличествоВопросов Тогда
            Сообщить("❌ Счетчик вопросов НЕ ИЗМЕНИЛСЯ: остался " + Тест.КоличествоВопросов);
            Утвердить("Счетчик вопросов увеличился", Ложь);
        Иначе
            Сообщить("❌ Счетчик вопросов УМЕНЬШИЛСЯ: " + НачальноеКоличествоВопросов + " → " + Тест.КоличествоВопросов);
            Утвердить("Счетчик вопросов увеличился", Ложь);
        КонецЕсли;
        
        // 9. ДОПОЛНИТЕЛЬНЫЕ ПРОВЕРКИ
        Утвердить("Ответ добавлен в табличную часть", Тест.ОтветыБинарногоДерева.Количество() = 1);
        Утвердить("Текущий узел изменился", Тест.ТекущийУзелДерева <> Неопределено);
        
    Исключение
        Сообщить("❌ ТЕСТ ПРОВАЛЕН С ИСКЛЮЧЕНИЕМ: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// ТЕСТ 2: Проверка прямого обновления счетчика
Процедура Тест_ПрямоеОбновлениеСчетчика() Экспорт
    
    Сообщить("=== ТЕСТ: ПРЯМОЕ ОБНОВЛЕНИЕ СЧЕТЧИКА ВОПРОСОВ ===");
    
    Попытка
        // 1. ПОДГОТОВКА
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        // 2. ПРЯМОЕ УСТАНОВЛЕНИЕ ЗНАЧЕНИЯ
        Сообщить("1. Прямая установка счетчика вопросов...");
        Тест.КоличествоВопросов = 5;
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Сообщить("   Установлено значение: " + Тест.КоличествоВопросов);
        Утвердить("Счетчик установлен в 5", Тест.КоличествоВопросов = 5);
        
        // 3. ПРОВЕРКА СОХРАНЕНИЯ
        Тест.КоличествоВопросов = 10;
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Сообщить("   Обновлено значение: " + Тест.КоличествоВопросов);
        Утвердить("Счетчик обновлен на 10", Тест.КоличествоВопросов = 10);
        
        Сообщить("✅ Прямое обновление счетчика работает корректно");
        
    Исключение
        Сообщить("❌ ОШИБКА при прямом обновлении: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// ТЕСТ 3: Поиск места обновления счетчика
Процедура Тест_ПоискМестаОбновленияСчетчика() Экспорт
    
    Сообщить("=== ТЕСТ: ПОИСК МЕСТА ОБНОВЛЕНИЯ СЧЕТЧИКА ===");
    
    Попытка
        // 1. ПОДГОТОВКА
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        СоздатьМинимальноеДеревоДляТеста(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Сообщить("1. Начальное состояние:");
        Сообщить("   КоличествоВопросов = " + Тест.КоличествоВопросов);
        
        // 2. ВРУЧНУЮ ВЫЗЫВАЕМ ЗаписатьТекущийВопрос (где должен обновляться счетчик)
        Сообщить("2. Вызов ЗаписатьТекущийВопрос...");
        ТекущийУзел = Тест.ТекущийУзелДерева;
        СледующийУзел = ТестированиеБинарноеДерево.НайтиСледующийУзел(Тест, ТекущийУзел, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        ТестированиеБинарноеДерево.ЗаписатьТекущийВопрос(Тест, СледующийУзел.Ссылка);
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Сообщить("3. Результат после ЗаписатьТекущийВопрос:");
        Сообщить("   КоличествоВопросов = " + Тест.КоличествоВопросов);
        
        Если Тест.КоличествоВопросов > 0 Тогда
            Сообщить("✅ Счетчик обновляется в ЗаписатьТекущийВопрос");
        Иначе
            Сообщить("❌ Счетчик НЕ обновляется в ЗаписатьТекущийВопрос");
        КонецЕсли;
        
    Исключение
        Сообщить("❌ ОШИБКА: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// ТЕСТ 4: Проверка обновления в ЗаписатьТекущийВопрос
Процедура Тест_ОбновлениеВ_ЗаписатьТекущийВопрос() Экспорт
    
    Сообщить("=== ТЕСТ: ОБНОВЛЕНИЕ В ЗаписатьТекущийВопрос ===");
    
    Попытка
        // 1. ПОДГОТОВКА
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        ТестированиеБинарноеДерево.СоздатьМинимальноеДеревоДляТеста(Тест);
        
        // 2. РУЧНАЯ ИНИЦИАЛИЗАЦИЯ (без вызова ИнициализироватьБинарноеДеревоДляТеста)
        КорневойУзел = ТестированиеБинарноеДерево.НайтиКорневойУзел(Тест);
        Тест.ТекущийУзелДерева = КорневойУзел.Ссылка;
        Тест.КоличествоВопросов = 0; // Явно устанавливаем 0
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Сообщить("1. Начальное состояние:");
        Сообщить("   КоличествоВопросов = " + Тест.КоличествоВопросов);
        
        // 3. ВЫЗЫВАЕМ ЗаписатьТекущийВопрос НАПРЯМУЮ
        Сообщить("2. Вызов ЗаписатьТекущийВопрос...");
        СледующийУзел = ТестированиеБинарноеДерево.НайтиСледующийУзел(Тест, Тест.ТекущийУзелДерева, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        // ⭐ ВАЖНО: Вызываем функцию, которая должна обновлять счетчик
        ТестированиеБинарноеДерево.ЗаписатьТекущийВопрос(Тест, СледующийУзел.Ссылка);
        
        Сообщить("3. Состояние после ЗаписатьТекущийВопрос (до записи):");
        Сообщить("   КоличествоВопросов = " + Тест.КоличествоВопросов);
        
        // Записываем изменения
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Сообщить("4. Финальное состояние:");
        Сообщить("   КоличествоВопросов = " + Тест.КоличествоВопросов);
        
        // 4. ПРОВЕРКА
        Если Тест.КоличествоВопросов = 1 Тогда
            Сообщить("✅ ЗаписатьТекущийВопрос корректно обновляет счетчик");
            Утвердить("Счетчик обновлен до 1", Истина);
        Иначе
            Сообщить("❌ ЗаписатьТекущийВопрос НЕ обновляет счетчик. Осталось: " + Тест.КоличествоВопросов);
            Утвердить("Счетчик обновлен до 1", Ложь);
        КонецЕсли;
        
    Исключение
        Сообщить("❌ ОШИБКА: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// ТЕСТ: Полная проверка работы бинарного дерева после исправлений
Процедура Тест_ПолнаяПроверкаБинарногоДерева() Экспорт
    
    Сообщить("=== ФИНАЛЬНЫЙ ТЕСТ: ПОЛНАЯ ПРОВЕРКА БИНАРНОГО ДЕРЕВА ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // 1. ПОДГОТОВКА
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        // 2. СОЗДАНИЕ СТРУКТУРЫ
        Сообщить("1. Создание структуры дерева...");
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // 3. ПРОВЕРКА НАЧАЛЬНОГО СОСТОЯНИЯ
        Сообщить("2. Начальное состояние:");
        Сообщить("   Вопросы: " + Тест.ВопросыБинарногоДерева.Количество());
        Сообщить("   Ответы: " + Тест.ОтветыБинарногоДерева.Количество());
        Сообщить("   Счетчик: " + Тест.КоличествоВопросов);
        
        Утвердить("Нет вопросов в начале", Тест.ВопросыБинарногоДерева.Количество() = 0);
        Утвердить("Нет ответов в начале", Тест.ОтветыБинарногоДерева.Количество() = 0);
        Утвердить("Счетчик = 0 в начале", Тест.КоличествоВопросов = 0);
        
        // 4. ПРОХОЖДЕНИЕ ПОЛНОГО ПУТИ
        Сообщить("3. Прохождение полного пути теста...");
        
        // Ответ 1: НЕТ (наземные животные)
        Сообщить("   Ответ 1: НЕТ -> наземные животные");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("После ответа 1: вопросы = 1", Тест.ВопросыБинарногоДерева.Количество() = 1);
        Утвердить("После ответа 1: ответы = 1", Тест.ОтветыБинарногоДерева.Количество() = 1);
        Утвердить("После ответа 1: счетчик = 1", Тест.КоличествоВопросов = 1);
        
        // Ответ 2: НЕТ (не четвероногие)
        Сообщить("   Ответ 2: НЕТ -> не четвероногие");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("После ответа 2: вопросы = 2", Тест.ВопросыБинарногоДерева.Количество() = 2);
        Утвердить("После ответа 2: ответы = 2", Тест.ОтветыБинарногоДерева.Количество() = 2);
        Утвердить("После ответа 2: счетчик = 2", Тест.КоличествоВопросов = 2);
        
        // Ответ 3: ДА (птица)
        Сообщить("   Ответ 3: ДА -> птица");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // 4. ПРОВЕРКА ФИНАЛЬНОГО СОСТОЯНИЯ
        Сообщить("4. Финальное состояние:");
        Сообщить("   Вопросы: " + Тест.ВопросыБинарногоДерева.Количество());
        Сообщить("   Ответы: " + Тест.ОтветыБинарногоДерева.Количество());
        Сообщить("   Счетчик: " + Тест.КоличествоВопросов);
        Сообщить("   Завершен: " + Тест.Завершен);
        Сообщить("   Результат: " + Тест.РезультатСдачи);
        Сообщить("   Текущий узел: " + ?(Тест.ТекущийУзелДерева = Неопределено, "Неопределено", Тест.ТекущийУзелДерева.Наименование));
        
        // Проверки
        Утвердить("Финально: вопросы = 3", Тест.ВопросыБинарногоДерева.Количество() = 3);
        Утвердить("Финально: ответы = 3", Тест.ОтветыБинарногоДерева.Количество() = 3);
        Утвердить("Финально: счетчик = 3", Тест.КоличествоВопросов = 3);
        Утвердить("Тест завершен", Тест.Завершен = Истина);
        
        // ⭐ ИСПРАВЛЕННАЯ ПРОВЕРКА: Для бинарного дерева результат должен быть "Сдан"
        Утвердить("Результат: Сдан", Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан);
        Утвердить("Процент завершения: 100%", Тест.ПроцентЗавершения = 100);
        
        Сообщить("✅ ФИНАЛЬНЫЙ ТЕСТ ПРОЙДЕН УСПЕШНО!");
        
    Исключение
        Сообщить("❌ ФИНАЛЬНЫЙ ТЕСТ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

#КонецОбласти


#Область UnitТесты


// Упрощенная обработка ответа без проблемных вызовов
Процедура УпрощеннаяОбработкаОтвета(СсылкаНаТест, Ответ)
    
    Тест = СсылкаНаТест.ПолучитьОбъект();
    
    Сообщить("=== УПРОЩЕННАЯ ОБРАБОТКА ОТВЕТА ===");
    Сообщить("   Текущий узел: " + ?(Тест.ТекущийУзелДерева = Неопределено, "Неопределено", 
        Тест.ТекущийУзелДерева.Наименование));
    Сообщить("   Ответ: " + Ответ);
    
    Если Тест.Завершен Тогда
        Сообщить("   Тест уже завершен");
        Возврат;
    КонецЕсли;
    
    ТекущийУзел = Тест.ТекущийУзелДерева;
    
    Если ТекущийУзел = Неопределено Тогда
        Сообщить("   ОШИБКА: Не установлен текущий узел!");
        Возврат;
    КонецЕсли;
    
    // Находим следующий узел
    СледующийУзел = ТестированиеБинарноеДерево.НайтиСледующийУзел(Тест, ТекущийУзел, Ответ);
    
    // Записываем ответ
    ТестированиеБинарноеДерево.ЗаписатьОтветПользователя(Тест, ТекущийУзел, Ответ);
    
    // Переходим к следующему вопросу
    ТестированиеБинарноеДерево.УпрощеннаяЗаписьТекущегоВопроса(Тест, СледующийУзел);
    
    Тест.Записать();
    Тест = Тест.Ссылка.ПолучитьОбъект();
    
КонецПроцедуры

// Упрощенная запись текущего вопроса
Процедура УпрощеннаяЗаписьТекущегоВопроса(Тест, СледующийУзел)
    
    Если Тест.Завершен Тогда
        Возврат;
    КонецЕсли;
    
    Если СледующийУзел = Неопределено Тогда
        Тест.Завершен = Истина;
        Тест.ВремяЗавершения = ТекущаяДата();
        Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан;
        Тест.ПроцентЗавершения = 100;
        Сообщить("   Тест завершен: достигнут неопределенный узел");
        Возврат;
    КонецЕсли;
    
    Тест.ТекущийУзелДерева = СледующийУзел.Ссылка;
    
    // Обновляем счетчик вопросов
    Тест.КоличествоВопросов = Тест.КоличествоВопросов + 1;
    Сообщить("   Количество вопросов обновлено: " + Тест.КоличествоВопросов);
    
    // Проверяем, является ли узел листом
    Если СледующийУзел.ЯвляетсяЛистом Тогда
        Тест.Завершен = Истина;
        Тест.ВремяЗавершения = ТекущаяДата();
        Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан;
        Тест.ПроцентЗавершения = 100;
        Сообщить("   ✅ ТЕСТ ЗАВЕРШЕН: Достигнут листовой узел: " + СледующийУзел.Наименование);
    КонецЕсли;
    
КонецПроцедуры




// Тест создания связи между узлами
Процедура Тест_СозданиеСвязи() Экспорт
    
    Сообщить("=== ТЕСТ: СОЗДАНИЕ СВЯЗИ МЕЖДУ УЗЛАМИ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // 1. Создаем КОРНЕВОЙ узел (без родителя)
        ВопросКорневой = ТестированиеБинарноеДерево.СоздатьВопрос("Корневой вопрос?", "Тест связи");
        УзелКорневой = ТестированиеБинарноеДерево.СоздатьУзел("Корневой узел", ВопросКорневой);
        
        // 2. Создаем дочерний узел
        ВопросДочерний = ТестированиеБинарноеДерево.СоздатьВопрос("Дочерний вопрос?", "Тест связи");  
        УзелДочерний = ТестированиеБинарноеДерево.СоздатьУзел("Дочерний узел", ВопросДочерний);
        УзелДочерний.ЯвляетсяЛистом = Истина;
        УзелДочерний.Записать();
        
        // 3. Создаем тест и добавляем ОБА узла
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        
        // 3.1. Добавляем корневой узел (без родителя)
        ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, Неопределено, Неопределено, УзелКорневой, ВопросКорневой, Ложь);
        
        // 3.2. Добавляем связь корень -> дочерний
        ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, УзелКорневой.Ссылка, 
            Перечисления.ТипыОтветовБинарногоДерева.Да, 
            УзелДочерний, ВопросДочерний, Истина);
        
        // 4. Проверяем структуру
        Утвердить("Две связи созданы", Тест.СтруктураДереваТеста.Количество() = 2);
        
        // 5. Проверяем корневой узел
        КорневойУзел = ТестированиеБинарноеДерево.НайтиКорневойУзел(Тест);
        Утвердить("Корневой узел найден", КорневойУзел <> Неопределено);
        Утвердить("Корневой узел правильный", КорневойУзел.Наименование = "Корневой узел");
        
        // 6. Проверяем связь
        Для Каждого СтрокаСтруктуры Из Тест.СтруктураДереваТеста Цикл
            Если СтрокаСтруктуры.РодительскийУзел = УзелКорневой.Ссылка Тогда
                Утвердить("Тип связи правильный", 
                    СтрокаСтруктуры.ТипСвязи = Перечисления.ТипыОтветовБинарногоДерева.Да);
                Утвердить("Дочерний узел правильный", 
                    СтрокаСтруктуры.УзелДерева = УзелДочерний.Ссылка);
            КонецЕсли;
        КонецЦикла;
        
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        Утвердить("Структура сохранена после записи", Тест.СтруктураДереваТеста.Количество() = 2);
        
        Сообщить("✅ ТЕСТ СОЗДАНИЯ СВЯЗИ ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ СОЗДАНИЯ СВЯЗИ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест поиска следующего узла
Процедура Тест_ПоискСледующегоУзла() Экспорт
    
    Сообщить("=== ТЕСТ: ПОИСК СЛЕДУЮЩЕГО УЗЛА ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // Создаем тест и структуру
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        
        // Создаем родительский узел
        ВопросРодитель = ТестированиеБинарноеДерево.СоздатьВопрос("Родительский вопрос?", "Тест поиска");
        УзелРодитель = ТестированиеБинарноеДерево.СоздатьУзел("Родитель", ВопросРодитель);
        ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, Неопределено, Неопределено, УзелРодитель, ВопросРодитель, Ложь);
        
        // Создаем дочерние узлы для "Да" и "Нет"
        ВопросДа = ТестированиеБинарноеДерево.СоздатьВопрос("Да-ветка?", "Тест поиска");
        УзелДа = ТестированиеБинарноеДерево.СоздатьУзел("Да-узел", ВопросДа);
        ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, УзелРодитель.Ссылка, 
            Перечисления.ТипыОтветовБинарногоДерева.Да, УзелДа, ВопросДа, Истина);
        
        ВопросНет = ТестированиеБинарноеДерево.СоздатьВопрос("Нет-ветка?", "Тест поиска");
        УзелНет = ТестированиеБинарноеДерево.СоздатьУзел("Нет-узел", ВопросНет);
        ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, УзелРодитель.Ссылка, 
            Перечисления.ТипыОтветовБинарногоДерева.Нет, УзелНет, ВопросНет, Истина);
        
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // Поиск следующих узлов
        СледующийДа = ТестированиеБинарноеДерево.НайтиСледующийУзел(Тест, УзелРодитель.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        СледующийНет = ТестированиеБинарноеДерево.НайтиСледующийУзел(Тест, УзелРодитель.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        // Проверяем
        Утвердить("Найден следующий для Да", СледующийДа.Наименование = "Да-узел");
        Утвердить("Найден следующий для Нет", СледующийНет.Наименование = "Нет-узел");
        
        // Тест возврата текущего узла при отсутствии связи
        СледующийНесуществующий = ТестированиеБинарноеДерево.НайтиСледующийУзел(Тест, УзелРодитель.Ссылка, Неопределено);
        Утвердить("При отсутствии связи возвращается текущий", СледующийНесуществующий = УзелРодитель.Ссылка);
        
        Сообщить("✅ ТЕСТ ПОИСКА СЛЕДУЮЩЕГО УЗЛА ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ ПОИСКА СЛЕДУЮЩЕГО УЗЛА ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест навигации по дереву до листового узла
Процедура Тест_НавигацияПоДереву() Экспорт
    
    Сообщить("=== ТЕСТ: НАВИГАЦИЯ ПО ДЕРЕВУ ДО ЛИСТА ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // Создаем шаблон с простым деревом для теста навигации
        Шаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
        Шаблон.Наименование = "Тест навигации";
        Шаблон.Записать();
        
        // Создаем узлы и связи в регистре
        ВопросКорневой = ТестированиеБинарноеДерево.СоздатьВопрос("Корневой вопрос?", "Тест навигации");
        УзелКорневой = ТестированиеБинарноеДерево.СоздатьУзелДерева("Корневой узел", "Тест навигации", Ложь, 0);
        
        ВопросУровень1 = ТестированиеБинарноеДерево.СоздатьВопрос("Вопрос уровня 1?", "Тест навигации");
        УзелУровень1 = ТестированиеБинарноеДерево.СоздатьУзелДерева("Узел уровня 1", "Тест навигации", Ложь, 1);
        
        ВопросЛист = ТестированиеБинарноеДерево.СоздатьВопрос("Финальный вопрос?", "Тест навигации");
        УзелЛист = ТестированиеБинарноеДерево.СоздатьУзелДерева("Листовой узел", "Тест навигации", Истина, 2);
        
        // Создаем связи в регистре
        ТестированиеБинарноеДерево.ЗаписатьСвязьВРегистр(Шаблон.Ссылка, Неопределено, Неопределено, УзелКорневой.Ссылка);
        ТестированиеБинарноеДерево.ЗаписатьСвязьВРегистр(Шаблон.Ссылка, УзелКорневой.Ссылка, 
            Перечисления.ТипыОтветовБинарногоДерева.Да, УзелУровень1.Ссылка);
        ТестированиеБинарноеДерево.ЗаписатьСвязьВРегистр(Шаблон.Ссылка, УзелУровень1.Ссылка, 
            Перечисления.ТипыОтветовБинарногоДерева.Да, УзелЛист.Ссылка);
        
        // Создаем тест и загружаем структуру
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        Тест.ШаблонТеста = Шаблон.Ссылка;
        
        ТестированиеБинарноеДерево.ЗаполнитьТестИзШаблона(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        
        // ⭐ ВАЖНО: Сохраняем тест перед обработкой ответов
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Сообщить("Начальное состояние:");
        Сообщить("   Текущий узел: " + Тест.ТекущийУзелДерева.Наименование);
        Сообщить("   Завершен: " + Тест.Завершен);
        Сообщить("   Процент: " + Тест.ПроцентЗавершения);
        
        // Навигация: Ответ Да (Уровень 0 → Уровень 1)
        Сообщить("--- Обработка первого ответа ---");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        
        // ⭐ ВАЖНО: Безопасное получение объекта после обработки
        Попытка
            Тест = Тест.Ссылка.ПолучитьОбъект();
        Исключение
            Сообщить("Ошибка при получении объекта теста: " + ОписаниеОшибки());
            Возврат;
        КонецПопытки;
        
        Сообщить("После первого ответа:");
        Сообщить("   Текущий узел: " + Тест.ТекущийУзелДерева.Наименование);
        Сообщить("   Завершен: " + Тест.Завершен);
        Сообщить("   Процент: " + Тест.ПроцентЗавершения);
        
        Утвердить("Навигация Уровень 1", Тест.ТекущийУзелДерева.Наименование = "Узел уровня 1");
        Утвердить("Тест не завершен после 1 ответа", Тест.Завершен = Ложь);
        Утвердить("Процент завершения после 1 ответа < 100", Тест.ПроцентЗавершения < 100);
        
        // Ответ Да - переход к листу (Уровень 1 → Лист)
        Сообщить("--- Обработка второго ответа ---");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        
        // ⭐ ВАЖНО: Безопасное получение объекта после обработки
        Попытка
            Тест = Тест.Ссылка.ПолучитьОбъект();
        Исключение
            Сообщить("Ошибка при получении объекта теста: " + ОписаниеОшибки());
            Возврат;
        КонецПопытки;
        
        Сообщить("После второго ответа:");
        Сообщить("   Текущий узел: " + Тест.ТекущийУзелДерева.Наименование);
        Сообщить("   Завершен: " + Тест.Завершен);
        Сообщить("   Процент: " + Тест.ПроцентЗавершения);
        Сообщить("   Результат: " + Тест.РезультатСдачи);
        
        Утвердить("Достигнут лист", Тест.Завершен = Истина);
        Утвердить("Результат рассчитан", Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан);
        Утвердить("Процент завершения 100%", Тест.ПроцентЗавершения = 100);
        Утвердить("Время завершения установлено", Тест.ВремяЗавершения <> Неопределено);
        
        Сообщить("✅ ТЕСТ НАВИГАЦИИ ПО ДЕРЕВУ ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ НАВИГАЦИИ ПО ДЕРЕВУ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

Процедура Тест_ОбновлениеСчетчикаВопросов() Экспорт
    
    Сообщить("=== ТЕСТ: ОБНОВЛЕНИЕ СЧЕТЧИКА ВОПРОСОВ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // Создаем тест
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        // Создаем минимальную структуру дерева
        СоздатьМинимальноеДеревоДляТеста(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // ⭐ ПРОВЕРЯЕМ, ЧТО ФУНКЦИЯ РАБОТАЕТ КОРРЕКТНО
        ТекущийУзел = Тест.ТекущийУзелДерева;
        СледующийУзел = ТестированиеБинарноеДерево.НайтиСледующийУзелИзДокумента(Тест, ТекущийУзел, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Утвердить("Функция находит следующий узел", СледующийУзел <> Неопределено);
        Утвердить("Следующий узел корректен", СледующийУзел.Наименование = "Дочерний узел");
        
        // Проверяем начальное состояние
        НачальноеКоличествоВопросов = Тест.КоличествоВопросов;
        Утвердить("Начальное количество вопросов = 0", НачальноеКоличествоВопросов = 0);
        
        // Обрабатываем ответ
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // Проверяем обновление счетчика
        Утвердить("Счетчик увеличился", Тест.КоличествоВопросов > НачальноеКоличествоВопросов);
        Утвердить("Счетчик = 1", Тест.КоличествоВопросов = 1);
        
        Сообщить("✅ ТЕСТ ОБНОВЛЕНИЯ СЧЕТЧИКА ВОПРОСОВ ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ ОБНОВЛЕНИЯ СЧЕТЧИКА ВОПРОСОВ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест работы с регистрами (с правильной проверкой неопределенности)
Процедура Тест_РаботаСРегистрами() Экспорт
    
    Сообщить("=== ТЕСТ: РАБОТА С РЕГИСТРАМИ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // 1. Создаем тест
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        СоздатьМинимальноеДеревоДляТеста(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // Запоминаем состояние для проверки
        ОригинальныйУзел = Тест.ТекущийУзелДерева;
        Сообщить("Исходное состояние:");
        Сообщить("   Текущий узел: " + ОригинальныйУзел.Наименование);
        
        // 2. Сохраняем в регистры
        Сообщить("--- Сохраняем в регистры ---");
        ТестированиеБинарноеДерево.СохранитьСостояниеТестаВРегистр(Тест);
        
        // 3. Правильно очищаем состояние
        Сообщить("--- Очищаем состояние ---");
        
        // ⭐ ПРАВИЛЬНЫЙ СПОСОБ ОЧИСТКИ ССЫЛКИ
        Тест.ТекущийУзелДерева = Неопределено;
        Тест.Записать();
        
        // ⭐ ПРАВИЛЬНАЯ ПРОВЕРКА НЕОПРЕДЕЛЕННОСТИ ДЛЯ ССЫЛОЧНОГО ТИПА
        Тест = Тест.Ссылка.ПолучитьОбъект();
        УзелОчищен = (Тест.ТекущийУзелДерева = Неопределено) ИЛИ (Тест.ТекущийУзелДерева.Пустая());
        
        Сообщить("   Проверка очистки:");
        Сообщить("   = Неопределено: " + (Тест.ТекущийУзелДерева = Неопределено));
        Сообщить("   .Пустая(): " + ?(Тест.ТекущийУзелДерева = Неопределено, "Н/Д", Тест.ТекущийУзелДерева.Пустая()));
        Сообщить("   Результат: " + ?(УзелОчищен, "Очищен ✓", "Не очищен"));
        
        Утвердить("Состояние очищено", УзелОчищен);
        
        // 4. Восстанавливаем из регистров
        Сообщить("--- Восстанавливаем из регистров ---");
        ТестированиеБинарноеДерево.ВосстановитьСостояниеТестаИзРегистра(Тест);
        
        Сообщить("   Состояние после восстановления: " + ?(Тест.ТекущийУзелДерева = Неопределено, "Неопределен", Тест.ТекущийУзелДерева.Наименование));
        
        // 5. Проверяем восстановление
        УзелВосстановлен = (Тест.ТекущийУзелДерева <> Неопределено) И (НЕ Тест.ТекущийУзелДерева.Пустая());
        Утвердить("Состояние восстановлено", УзелВосстановлен);
        
        Если УзелВосстановлен Тогда
            Утвердить("Восстановлен корректный узел", Тест.ТекущийУзелДерева = ОригинальныйУзел);
        КонецЕсли;
        
        Сообщить("✅ ТЕСТ РАБОТЫ С РЕГИСТРАМИ ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ РАБОТЫ С РЕГИСТРАМИ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест добавления записи в базу знаний
Процедура Тест_БазаЗнанийДобавление() Экспорт
    
    Сообщить("=== ТЕСТ: ДОБАВЛЕНИЕ В БАЗУ ЗНАНИЙ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // Создаем тест и узел
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        
        Вопрос = ТестированиеБинарноеДерево.СоздатьВопрос("Тестовый вопрос для базы знаний?", "Тест БЗ");
        Узел = ТестированиеБинарноеДерево.СоздатьУзел("Тестовый узел для БЗ", Вопрос);
        Узел.ЯвляетсяЛистом = Истина;
        Узел.Записать();
        
        // Добавляем в базу знаний
        ТестированиеБинарноеДерево.ДобавитьВБазуЗнаний(Тест, Узел, Перечисления.ТипыОтветовБинарногоДерева.Да, 1.0);
        
        // Проверяем статистику
        Статистика = ТестированиеБинарноеДерево.ПолучитьСтатистикуПоВопросу(Вопрос.Ссылка);
        
        Утвердить("Запись добавлена", Статистика.ВсегоИспользований = 1);
        Утвердить("Правильность = 100%", Статистика.СредняяПравильность = 1.0);
        Утвердить("Дата использования установлена", Статистика.ДатаПоследнегоИспользования <> Неопределено);
        
        Сообщить("✅ ТЕСТ ДОБАВЛЕНИЯ В БАЗУ ЗНАНИЙ ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ ДОБАВЛЕНИЯ В БАЗУ ЗНАНИЙ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест обновления существующей записи в базе знаний
Процедура Тест_БазаЗнанийОбновление() Экспорт
    
    Сообщить("=== ТЕСТ: ОБНОВЛЕНИЕ БАЗЫ ЗНАНИЙ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // Создаем тест и узел
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        
        Вопрос = ТестированиеБинарноеДерево.СоздатьВопрос("Тестовый вопрос для обновления БЗ?", "Тест БЗ");
        Узел = ТестированиеБинарноеДерево.СоздатьУзел("Тестовый узел для обновления БЗ", Вопрос);
        
        // Первое добавление
        ТестированиеБинарноеДерево.ДобавитьВБазуЗнаний(Тест, Узел, Перечисления.ТипыОтветовБинарногоДерева.Да, 1.0);
        
        // Второе добавление (обновление)
        ТестированиеБинарноеДерево.ДобавитьВБазуЗнаний(Тест, Узел, Перечисления.ТипыОтветовБинарногоДерева.Да, 0.5);
        
        // Проверяем статистику
        Статистика = ТестированиеБинарноеДерево.ПолучитьСтатистикуПоВопросу(Вопрос.Ссылка);
        
        Утвердить("Количество использований = 2", Статистика.ВсегоИспользований = 2);
        Утвердить("Средняя правильность обновлена", Статистика.СредняяПравильность = 0.75); // (1.0 + 0.5) / 2
        
        Сообщить("✅ ТЕСТ ОБНОВЛЕНИЯ БАЗЫ ЗНАНИЙ ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ ОБНОВЛЕНИЯ БАЗЫ ЗНАНИЙ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест обработки ошибок JSON
Процедура Тест_JSONОшибки() Экспорт
    
    Сообщить("=== ТЕСТ: ОБРАБОТКА ОШИБОК JSON ===");
    
    Попытка
        // Тест 1: Восстановление из пустого JSON
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        
        ТестированиеБинарноеДерево.ВосстановитьДеревоВопросовИзJSON(Тест, "");
        Утвердить("Обработка пустого JSON не вызывает исключение", Истина);
        
        // Тест 2: Восстановление из некорректного JSON
        ТестированиеБинарноеДерево.ВосстановитьДеревоВопросовИзJSON(Тест, "{некорректный: json}");
        Утвердить("Обработка некорректного JSON не вызывает исключение", Истина);
        
        // Тест 3: Восстановление из JSON без узлов
        ТестированиеБинарноеДерево.ВосстановитьДеревоВопросовИзJSON(Тест, "{}");
        Утвердить("Обработка JSON без узлов не вызывает исключение", Истина);
        
        Сообщить("✅ ТЕСТ ОБРАБОТКИ ОШИБОК JSON ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ ОБРАБОТКИ ОШИБОК JSON ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест целостности для малых объемов данных
Процедура Тест_ЦелостностьМалыхОбъемов() Экспорт
    
    Сообщить("=== ТЕСТ: ЦЕЛОСТНОСТЬ МАЛЫХ ОБЪЕМОВ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // Создаем тест с малым количеством узлов
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        
        // Создаем 10 узлов - ВСЕ КОРНЕВЫЕ (без родителя)
        Для Сч = 1 По 10 Цикл
            Вопрос = ТестированиеБинарноеДерево.СоздатьВопрос("Вопрос " + Сч + "?", "Тест целостности");
            Узел = ТестированиеБинарноеДерево.СоздатьУзел("Узел " + Сч, Вопрос);
            ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, Неопределено, Неопределено, Узел, Вопрос, Ложь);
        КонецЦикла;
        
        // Проверяем целостность
        Результат = ТестированиеБинарноеДерево.ПроверитьЦелостностьСтруктурыДерева(Тест);
        
        Утвердить("Целостность проверена", Результат = Истина);
        
        Сообщить("✅ ТЕСТ ЦЕЛОСТНОСТИ МАЛЫХ ОБЪЕМОВ ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ ЦЕЛОСТНОСТИ МАЛЫХ ОБЪЕМОВ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест получения проблемных вопросов
Процедура Тест_ПроблемныеВопросы() Экспорт
    
    Сообщить("=== ТЕСТ: ПОЛУЧЕНИЕ ПРОБЛЕМНЫХ ВОПРОСОВ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // Создаем несколько вопросов с разной правильностью
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        
        // Вопрос с низкой правильностью
        Вопрос1 = ТестированиеБинарноеДерево.СоздатьВопрос("Проблемный вопрос 1?", "Тест проблемных");
        Узел1 = ТестированиеБинарноеДерево.СоздатьУзел("Узел проблемный 1", Вопрос1);
        ТестированиеБинарноеДерево.ДобавитьВБазуЗнаний(Тест, Узел1, Перечисления.ТипыОтветовБинарногоДерева.Да, 0.2);
        
        // Вопрос со средней правильностью  
        Вопрос2 = ТестированиеБинарноеДерево.СоздатьВопрос("Проблемный вопрос 2?", "Тест проблемных");
        Узел2 = ТестированиеБинарноеДерево.СоздатьУзел("Узел проблемный 2", Вопрос2);
        ТестированиеБинарноеДерево.ДобавитьВБазуЗнаний(Тест, Узел2, Перечисления.ТипыОтветовБинарногоДерева.Нет, 0.5);
        
        // Вопрос с высокой правильностью
        Вопрос3 = ТестированиеБинарноеДерево.СоздатьВопрос("Хороший вопрос?", "Тест проблемных");
        Узел3 = ТестированиеБинарноеДерево.СоздатьУзел("Узел хороший", Вопрос3);
        ТестированиеБинарноеДерево.ДобавитьВБазуЗнаний(Тест, Узел3, Перечисления.ТипыОтветовБинарногоДерева.Да, 0.9);
        
        // Получаем проблемные вопросы
        Проблемные = ТестированиеБинарноеДерево.ПолучитьПроблемныеВопросы(5);
        
        Утвердить("Получен массив проблемных вопросов", Проблемные.Количество() > 0);
        Утвердить("Вопросы отсортированы по правильности", 
            Проблемные[0].СредняяПравильность <= Проблемные[Проблемные.Количество() - 1].СредняяПравильность);
        
        Сообщить("✅ ТЕСТ ПРОБЛЕМНЫХ ВОПРОСОВ ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ ПРОБЛЕМНЫХ ВОПРОСОВ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Вспомогательная функция для создания валидной тестовой структуры
Функция СоздатьВалиднуюТестовуюСтруктуру(Тест) Экспорт
    
    // Очищаем существующую структуру
    Тест.СтруктураДереваТеста.Очистить();
    
    // Создаем корневой узел
    ВопросКорень = ТестированиеБинарноеДерево.СоздатьВопрос("Корневой вопрос?", "Тест");
    УзелКорень = ТестированиеБинарноеДерево.СоздатьУзел("Корневой узел", ВопросКорень);
    ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, Неопределено, Неопределено, УзелКорень, ВопросКорень, Ложь);
    
    // Создаем дочерние узлы
    ВопросДа = ТестированиеБинарноеДерево.СоздатьВопрос("Да-ветка?", "Тест");
    УзелДа = ТестированиеБинарноеДерево.СоздатьУзел("Да-узел", ВопросДа);
    ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, УзелКорень.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да, УзелДа, ВопросДа, Истина);
    
    ВопросНет = ТестированиеБинарноеДерево.СоздатьВопрос("Нет-ветка?", "Тест");
    УзелНет = ТестированиеБинарноеДерево.СоздатьУзел("Нет-узел", ВопросНет);
    ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, УзелКорень.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет, УзелНет, ВопросНет, Истина);
    
    Возврат УзелКорень;
    
КонецФункции

// Временное исправление в функции ОбработатьОтвет
Процедура ОбработатьОтветБезРегитстра(СсылкаНаТест, Ответ) Экспорт
    
    Тест = СсылкаНаТест.ПолучитьОбъект();
    
    Сообщить("=== ОБРАБОТКА ОТВЕТА ===");
    Сообщить("   Текущий узел: " + ?(Тест.ТекущийУзелДерева = Неопределено, "Неопределено", 
        Тест.ТекущийУзелДерева.Наименование));
    Сообщить("   Ответ: " + Ответ);
    
    Если Тест.Завершен Тогда
        Сообщить("   Тест уже завершен");
        Возврат;
    КонецЕсли;
    
    ТекущийУзел = Тест.ТекущийУзелДерева;
    
    Если ТекущийУзел = Неопределено Тогда
        Сообщить("   ОШИБКА: Не установлен текущий узел!");
        Возврат;
    КонецЕсли;
    
    // ⭐ ВРЕМЕННО КОММЕНТИРУЕМ БАЗУ ЗНАНИЙ ДЛЯ ТЕСТОВ
    // ОбновитьБазуЗнанийПриОтвете(Тест, ТекущийУзел, Ответ);
    
    // Находим следующий узел
    СледующийУзел = ТестированиеБинарноеДерево.НайтиСледующийУзел(Тест, ТекущийУзел, Ответ);
    
    // Записываем ответ
    ТестированиеБинарноеДерево.ЗаписатьОтветПользователя(Тест, ТекущийУзел, Ответ);
    
    // Переходим к следующему вопросу
    ТестированиеБинарноеДерево.ЗаписатьТекущийВопрос(Тест, СледующийУзел.Ссылка);
    
    // Сохраняем в регистры
    ТестированиеБинарноеДерево.СохранитьОтветыВРегистр(Тест);
    ТестированиеБинарноеДерево.СохранитьСостояниеТестаВРегистр(Тест);
    
    Тест.Записать();
    Тест = Тест.Ссылка.ПолучитьОбъект();
    
    Сообщить("   Обработка ответа завершена");
    
КонецПроцедуры

// Процедура для запуска всех тестов
Процедура ЗапуститьВсеТесты() Экспорт
    
    Сообщить("=== ЗАПУСК ВСЕХ ТЕСТОВ БИНАРНОГО ДЕРЕВА ===");
    
    МассивТестов = Новый Массив;
    МассивТестов.Добавить("Тест_СозданиеСвязи");
    МассивТестов.Добавить("Тест_ПоискСледующегоУзла");
    МассивТестов.Добавить("Тест_НавигацияПоДереву");
    МассивТестов.Добавить("Тест_ОбновлениеСчетчикаВопросов");
    МассивТестов.Добавить("Тест_РаботаСРегистрами");
	МассивТестов.Добавить("Тест_БазаЗнанийДобавление");
	МассивТестов.Добавить("Тест_БазаЗнанийОбновление");
	МассивТестов.Добавить("Тест_JSONОшибки");
	МассивТестов.Добавить("Тест_ЦелостностьМалыхОбъемов");
	МассивТестов.Добавить("Тест_ПроблемныеВопросы");
	МассивТестов.Добавить("Тест_ПолныйЦиклБинарногоДерева");
    
    УспешноТестов = 0;
    ВсегоТестов = МассивТестов.Количество();
    
    Для Каждого ИмяТеста Из МассивТестов Цикл
        Попытка
            Выполнить("ТестированиеУтверждения."+ИмяТеста + "();");
            УспешноТестов = УспешноТестов + 1;
            Сообщить("✅ " + ИмяТеста + " - ПРОЙДЕН");
        Исключение
            Сообщить("❌ " + ИмяТеста + " - ПРОВАЛЕН: " + ОписаниеОшибки());
        КонецПопытки;
    КонецЦикла;
    
    ПроцентПокрытия = Окр(УспешноТестов / ВсегоТестов * 100, 2);
    
    Сообщить("=== РЕЗУЛЬТАТЫ ТЕСТИРОВАНИЯ ===");
    Сообщить("Успешных тестов: " + УспешноТестов + " из " + ВсегоТестов);
    Сообщить("Покрытие тестами: " + ПроцентПокрытия + "%");
    
    Если ПроцентПокрытия >= 90 Тогда
        Сообщить(" ВЫСОКОЕ ПОКРЫТИЕ ТЕСТАМИ ДОСТИГНУТО!");
    ИначеЕсли ПроцентПокрытия >= 70 Тогда
        Сообщить("⚠️  СРЕДНЕЕ ПОКРЫТИЕ ТЕСТАМИ");
    Иначе
        Сообщить("❌ НИЗКОЕ ПОКРЫТИЕ ТЕСТАМИ");
    КонецЕсли;
    
КонецПроцедуры


// Диагностический тест навигации по дереву
Процедура Тест_НавигацияПоДереву_Диагностика() Экспорт
    
    Сообщить("=== ДИАГНОСТИЧЕСКИЙ ТЕСТ: НАВИГАЦИЯ ПО ДЕРЕВУ ===");
    Сообщить("Цель: выявить проблемы в основном коде без изменений логики");
    
    Попытка
        // 1. ДИАГНОСТИКА СОЗДАНИЯ СТРУКТУРЫ
        Сообщить("1. Проверка создания структуры дерева...");
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        Тест.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
        
        // Создаем простую структуру для диагностики
        ВопросКорневой = ТестированиеБинарноеДерево.СоздатьВопрос("Корневой вопрос диагностика?", "Диагностический тест");
        УзелКорневой = ТестированиеБинарноеДерево.СоздатьУзел("Корневой узел диагностика", ВопросКорневой);
        ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, Неопределено, Неопределено, УзелКорневой, ВопросКорневой, Ложь);
        
        ВопросУровень1 = ТестированиеБинарноеДерево.СоздатьВопрос("Вопрос уровня 1 диагностика?", "Диагностический тест");
        УзелУровень1 = ТестированиеБинарноеДерево.СоздатьУзел("Узел уровня 1 диагностика", ВопросУровень1);
        ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, УзелКорневой.Ссылка, 
            Перечисления.ТипыОтветовБинарногоДерева.Да, УзелУровень1, ВопросУровень1, Ложь);
        
        // 2. ДИАГНОСТИКА ИНИЦИАЛИЗАЦИИ
        Сообщить("2. Проверка инициализации теста...");
        КорневойУзел = ТестированиеБинарноеДерево.НайтиКорневойУзел(Тест);
        Утвердить("Корневой узел найден", КорневойУзел <> Неопределено);
        
        Если КорневойУзел <> Неопределено Тогда
            Тест.ТекущийУзелДерева = КорневойУзел.Ссылка;
        КонецЕсли;
        
        // 3. ДИАГНОСТИКА ПЕРВОЙ ЗАПИСИ
        Сообщить("3. Проверка записи теста...");
        Попытка
            Тест.Записать();
            Тест = Тест.Ссылка.ПолучитьОбъект();
            Утвердить("Тест записан успешно", Истина);
        Исключение
            Сообщить(" Ошибка при записи теста: " + ОписаниеОшибки());
            Возврат;
        КонецПопытки;
        
        // 4. ДИАГНОСТИКА НАВИГАЦИИ
        Сообщить("4. Проверка навигации по дереву...");
        
        // Состояние до обработки ответа
        Сообщить("   Состояние ДО обработки:");
        Сообщить("   - Текущий узел: " + Тест.ТекущийУзелДерева.Наименование);
        Сообщить("   - Завершен: " + Тест.Завершен);
        Сообщить("   - Количество вопросов: " + Тест.КоличествоВопросов);
        
        // Обработка ответа
        Попытка
            ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
            Тест = Тест.Ссылка.ПолучитьОбъект();
            Утвердить("Обработка ответа выполнена", Истина);
        Исключение
            Сообщить(" Ошибка при обработке ответа: " + ОписаниеОшибки());
            Возврат;
        КонецПопытки;
        
        // Состояние после обработки ответа
        Сообщить("   Состояние ПОСЛЕ обработки:");
        Сообщить("   - Текущий узел: " + ?(Тест.ТекущийУзелДерева = Неопределено, "Неопределено", Тест.ТекущийУзелДерева.Наименование));
        Сообщить("   - Завершен: " + Тест.Завершен);
        Сообщить("   - Количество вопросов: " + Тест.КоличествоВопросов);
        Сообщить("   - Результат: " + Тест.РезультатСдачи);
        Сообщить("   - Процент: " + Тест.ПроцентЗавершения);
        
        // 5. ДИАГНОСТИКА РЕЗУЛЬТАТОВ
        Утвердить("Навигация выполнена", Тест.ТекущийУзелДерева.Наименование = "Узел уровня 1 диагностика");
        Утвердить("Тест не завершен", Тест.Завершен = Ложь);
        Утвердить("Счетчик вопросов увеличен", Тест.КоличествоВопросов = 1);
        
        Сообщить("✅ ДИАГНОСТИКА ЗАВЕРШЕНА - основные функции работают");
        
    Исключение
        Сообщить(" Критическая ошибка в диагностике: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Диагностика с полным деревом "Угадай животное"
Процедура Тест_ПолноеДерево_Диагностика() Экспорт
    
    Сообщить("=== ДИАГНОСТИКА ПОЛНОГО ДЕРЕВА 'УГАДАЙ ЖИВОТНОЕ' ===");
    
    Попытка
        // Создаем тест с полной структурой
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        Тест.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
        
        // Используем существующую функцию создания дерева
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Тест);
        
        // Проверяем инициализацию
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("Тест инициализирован", Тест.ТекущийУзелДерева <> Неопределено);
        Сообщить("   Начальный узел: " + Тест.ТекущийУзелДерева.Наименование);
        
        // Тестируем несколько шагов навигации
        Сообщить("Тестирование навигации по дереву:");
        
        // Шаг 1: Ответ "Нет" на корневой вопрос (наземные животные)
        Сообщить("Шаг 1: Ответ 'Нет' (наземные животные)");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        Сообщить("   Текущий узел: " + Тест.ТекущийУзелДерева.Наименование);
        
        // Шаг 2: Ответ "Да" на вопрос о ногах (четвероногие)
        Сообщить("Шаг 2: Ответ 'Да' (четвероногие)");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        Сообщить("   Текущий узел: " + Тест.ТекущийУзелДерева.Наименование);
        
        // Шаг 3: Ответ "Да" на вопрос о хищнике (лев)
        Сообщить("Шаг 3: Ответ 'Да' (хищник)");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // Проверяем завершение теста
        Утвердить("Тест завершен", Тест.Завершен = Истина);
        Утвердить("Результат 'Сдан'", Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан);
        Утвердить("Процент 100%", Тест.ПроцентЗавершения = 100);
        
        Сообщить("✅ ДИАГНОСТИКА ПОЛНОГО ДЕРЕВА УСПЕШНА");
        
    Исключение
        Сообщить(" Ошибка в диагностике полного дерева: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест проверки целостности данных
Процедура Тест_ПроверкаЦелостностиДанных() Экспорт
    
    Сообщить("=== ТЕСТ ПРОВЕРКИ ЦЕЛОСТНОСТИ ДАННЫХ ===");
    
    Попытка
        // Проверяем целостность существующих данных
        Результат = ТестированиеБинарноеДерево.ПроверитьЦелостностьДанных();
        
        Если Результат Тогда
            Сообщить("✅ Целостность данных в порядке");
        Иначе
            Сообщить("⚠️ Обнаружены проблемы с целостностью данных");
        КонецЕсли;
        
        // Проверяем создание тестовой структуры
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Тест);
        
        ЦелостностьСтруктуры = ТестированиеБинарноеДерево.ПроверитьЦелостностьСтруктурыДерева(Тест);
        Утвердить("Целостность структуры дерева", ЦелостностьСтруктуры);
        
    Исключение
        Сообщить(" Ошибка проверки целостности: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест обработки ответов с детальной диагностикой
Процедура Тест_ОбработкаОтветов_ДетальнаяДиагностика() Экспорт
    
    Сообщить("=== ДЕТАЛЬНАЯ ДИАГНОСТИКА ОБРАБОТКИ ОТВЕТОВ ===");
    
    Попытка
        // Создаем минимальное дерево для теста
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        Тест.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
        
        // Корневой узел
        Вопрос1 = ТестированиеБинарноеДерево.СоздатьВопрос("Вопрос 1?", "Тест обработки");
        Узел1 = ТестированиеБинарноеДерево.СоздатьУзел("Узел 1", Вопрос1);
        ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, Неопределено, Неопределено, Узел1, Вопрос1, Ложь);
        
        // Листовой узел для ответа "Да"
        Вопрос2 = ТестированиеБинарноеДерево.СоздатьВопрос("Вопрос 2?", "Тест обработки");
        Узел2=  ТестированиеБинарноеДерево.СоздатьУзел("Узел 2 (лист)", Вопрос2);
        Узел2.ЯвляетсяЛистом = Истина;
        Узел2.Записать();
        ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, Узел1.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да, Узел2, Вопрос2, Истина);
        
        // Инициализируем
        Тест.ТекущийУзелДерева = Узел1.Ссылка;
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // ДИАГНОСТИКА: Проверяем состояние перед обработкой
        Утвердить("Начальное состояние корректно", 
            Тест.ТекущийУзелДерева = Узел1.Ссылка И 
            Тест.Завершен = Ложь И 
            Тест.КоличествоВопросов = 0);
        
        // Обрабатываем ответ "Да"
        Сообщить("Обработка ответа 'Да'...");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // ДИАГНОСТИКА: Проверяем состояние после обработки
        Утвердить("Переход к листовому узлу", Тест.ТекущийУзелДерева = Узел2.Ссылка);
        Утвердить("Тест завершен", Тест.Завершен = Истина);
        Утвердить("Результат 'Сдан'", Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан);
        Утвердить("Процент 100%", Тест.ПроцентЗавершения = 100);
        Утвердить("Счетчик вопросов = 1", Тест.КоличествоВопросов = 1);
        Утвердить("Время завершения установлено", Тест.ВремяЗавершения <> Неопределено);
        
        // Проверяем табличные части
        Утвердить("Ответ записан в ТЧ", Тест.ОтветыБинарногоДерева.Количество() = 1);
        Утвердить("Вопрос добавлен в ТЧ", Тест.ВопросыБинарногоДерева.Количество() = 1);
        
        Сообщить("✅ ДЕТАЛЬНАЯ ДИАГНОСТИКА ОБРАБОТКИ ОТВЕТОВ УСПЕШНА");
        
    Исключение
        Сообщить(" Ошибка в детальной диагностике: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Запуск всей диагностики
Процедура ЗапуститьПолнуюДиагностику() Экспорт
    Сообщить("=== ЗАПУСК ПОЛНОЙ ДИАГНОСТИКИ СИСТЕМЫ ===");
    
    Тест_ПроверкаЦелостностиДанных();
    Тест_НавигацияПоДереву_Диагностика();
    Тест_ОбработкаОтветов_ДетальнаяДиагностика();
    // Тест_ПолноеДерево_Диагностика(); // Раскомментировать после отладки базовых функций
    
    Сообщить("=== ДИАГНОСТИКА ЗАВЕРШЕНА ===");
КонецПроцедуры

// Добавьте эту процедуру в область тестирования


//### Исправленный код теста `Тест_ПолныйЦиклБинарногоДерева`
//В тестах нужно создавать шаблон справочника, заполнять его структуру, затем присваивать `Тест.ШаблонТеста = Шаблон.Ссылка` и вызывать `ЗаполнитьТестИзШаблона(Тест)`.
Процедура Тест_ПолныйЦиклБинарногоДерева() Экспорт
    
    Сообщить("=== ТЕСТИРОВАНИЕ БИНАРНОГО ДЕРЕВА - ДЕТАЛЬНЫЕ ПРОВЕРКИ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // ПОДГОТОВКА ШАБЛОНА
        Шаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
        Шаблон.Наименование = "Угадай животное";
        Шаблон.Записать();
        
        // СОЗДАЕМ СТРУКТУРУ В РЕГИСТРЕ ДЛЯ ШАБЛОНА
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Шаблон);
        
        // ПОДГОТОВКА ТЕСТА
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        Тест.ШаблонТеста = Шаблон.Ссылка;
        
        // ЗАГРУЖАЕМ СТРУКТУРУ ИЗ РЕГИСТРА В ТЕСТ
        ТестированиеБинарноеДерево.ЗаполнитьТестИзШаблона(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        
        Тест = Тест.Ссылка.ПолучитьОбъект();

        // ТЕСТ 1: НАЧАЛЬНОЕ СОСТОЯНИЕ
        Утвердить("Корневой узел установлен", Не Тест.ТекущийУзелДерева.Пустая());
        Утвердить("Нет ответов в начале", Тест.ОтветыБинарногоДерева.Количество() = 0);
        НачальныйУзел = Тест.ТекущийУзелДерева;
        
        // ТЕСТ 2: ПЕРВЫЙ ОТВЕТ
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("Ответ добавлен", Тест.ОтветыБинарногоДерева.Количество() = 1);
        Утвердить("Узел изменился", Тест.ТекущийУзелДерева <> НачальныйУзел);
        Утвердить("Первый ответ - Нет", 
            Тест.ОтветыБинарногоДерева[0].ТипОтветаБинарный = Перечисления.ТипыОтветовБинарногоДерева.Нет);
        
        ТекущийУзелПослеПервогоОтвета = Тест.ТекущийУзелДерева;
        
        // ТЕСТ 3: ВТОРОЙ ОТВЕТ
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("Второй ответ добавлен", Тест.ОтветыБинарногоДерева.Количество() = 2);
        Утвердить("Узел снова изменился", Тест.ТекущийУзелДерева <> ТекущийУзелПослеПервогоОтвета);
        Утвердить("Второй ответ - Да", 
            Тест.ОтветыБинарногоДерева[1].ТипОтветаБинарный = Перечисления.ТипыОтветовБинарногоДерева.Да);
        
        // ТЕСТ 4: ПРОВЕРКА ЦЕЛОСТНОСТИ ДАННЫХ
        Утвердить("Тест не завершен", НЕ Тест.Завершен);
        Утвердить("Количество вопросов обновлено", Тест.КоличествоВопросов >= 2);
        Утвердить("Процент завершения рассчитан", Тест.ПроцентЗавершения > 0);
        
        // ВЫВОД РЕЗУЛЬТАТОВ
        Сообщить("✅ ТЕСТ ПРОЙДЕН УСПЕШНО!");
        Сообщить("   Ответы: " + Тест.ОтветыБинарногоДерева.Количество() + " (>0 ✓)");
        Сообщить("   Узлы: изменялись " + НачальныйУзел.Наименование + " → ... ✓");
        Сообщить("   Навигация: работает ✓");
        
    Исключение
        Сообщить("❌ ТЕСТ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тестирует полный цикл бинарного дерева с достижением листового узла
Процедура Тест_ПолныйЦиклСЗавершением() Экспорт
    
    Сообщить("=== ТЕСТ ПОЛНОГО ЦИКЛА С ЗАВЕРШЕНИЕМ ===");
    
    Попытка
        // ПОДГОТОВКА - создаем шаблон и тест
        Шаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
        Шаблон.Наименование = "Угадай животное - тест завершения";
        Шаблон.Записать();
        
        // СОЗДАЕМ СТРУКТУРУ В РЕГИСТРЕ
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Шаблон);
        
        // СОЗДАЕМ ТЕСТ И ЗАГРУЖАЕМ СТРУКТУРУ
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        Тест.ШаблонТеста = Шаблон.Ссылка;
        
        ТестированиеБинарноеДерево.ЗаполнитьТестИзШаблона(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        
        // ⭐ ПЕРЕЧИТЫВАЕМ ОБЪЕКТ
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Сообщить("Начальное состояние:");
        Сообщить("   Текущий узел: " + Тест.ТекущийУзелДерева.Наименование);
        Сообщить("   Завершен: " + Тест.Завершен);
        
        // ТЕСТИРУЕМ ВЕТКУ ВОДНЫХ ЖИВОТНЫХ (Да → Да → Да)
        Сообщить("--- ВЕТКА ВОДНЫХ ЖИВОТНЫХ ---");
        
        // 1. Ответ "Да" на корневой вопрос ("Оно живет в воде?")
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("После ответа Да - узел водных", 
            СтрНайти(Тест.ТекущийУзелДерева.Наименование, "водн") > 0);
        Утвердить("Не завершен после 1 ответа", НЕ Тест.Завершен);
        
        // 2. Ответ "Да" на вопрос о размере ("Оно большое?")
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("После ответа ДаДа - узел плавников", 
            СтрНайти(Тест.ТекущийУзелДерева.Наименование, "плавников") > 0);
        Утвердить("Не завершен после 2 ответов", НЕ Тест.Завершен);
        
        // 3. Ответ "Да" на вопрос о плавниках ("У него есть плавники?") → ДОЛЖЕН ЗАВЕРШИТЬСЯ
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("Завершен после 3 ответов", Тест.Завершен);
        Утвердить("Результат - Сдан", Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан);
        Утвердить("Процент завершения 100%", Тест.ПроцентЗавершения = 100);
        Утвердить("Текущий узел - листовой (кит)", 
            СтрНайти(Тест.ТекущийУзелДерева.Наименование, "кит") > 0);
        
        Сообщить("✅ ВЕТКА ВОДНЫХ ЖИВОТНЫХ ПРОЙДЕНА УСПЕШНО!");
        Сообщить("   Ответы: " + Тест.ОтветыБинарногоДерева.Количество());
        Сообщить("   Финальный узел: " + Тест.ТекущийУзелДерева.Наименование);
        Сообщить("   Результат: " + Тест.РезультатСдачи);
        
    Исключение
        Сообщить("❌ ТЕСТ ВЕТКИ ВОДНЫХ ЖИВОТНЫХ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тестирует другую ветку дерева
Процедура Тест_ВеткаНаземныхЖивотных() Экспорт
    
    Сообщить("=== ТЕСТ ВЕТКИ НАЗЕМНЫХ ЖИВОТНЫХ ===");
    
    Попытка
        // ПОДГОТОВКА
        Шаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
        Шаблон.Наименование = "Угадай животное - наземные";
        Шаблон.Записать();
        
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Шаблон);
        
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        Тест.ШаблонТеста = Шаблон.Ссылка;
        
        ТестированиеБинарноеДерево.ЗаполнитьТестИзШаблона(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // ТЕСТИРУЕМ ВЕТКУ: Нет → Нет → Нет → Да (птица)
        Сообщить("--- ВЕТКА: НЕТ → НЕТ → НЕТ → ДА (ПТИЦА) ---");
        
        // 1. "Оно живет в воде?" → Нет
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // 2. "У него 4 ноги?" → Нет  
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // 3. "У него есть крылья?" → Да
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("Завершен после 3 ответов", Тест.Завершен);
        Утвердить("Финальный узел - птица", 
            СтрНайти(Тест.ТекущийУзелДерева.Наименование, "птица") > 0);
        Утвердить("Результат Сдан", Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан);
        
        Сообщить("✅ ВЕТКА НАЗЕМНЫХ ЖИВОТНЫХ ПРОЙДЕНА!");
        
    Исключение
        Сообщить("❌ ТЕСТ ВЕТКИ НАЗЕМНЫХ ЖИВОТНЫХ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Комплексный тест всех основных веток
Процедура Тест_ВсеОсновныеВетки() Экспорт
    
    Сообщить("=== КОМПЛЕКСНЫЙ ТЕСТ ВСЕХ ОСНОВНЫХ ВЕТОК ===");
    
    Попытка
        // МАССИВ ТЕСТОВЫХ СЦЕНАРИЕВ
        ТестовыеСценарии = Новый Массив;
        
        // Правильно создаем структуры для сценариев
        Сценарий1 = Новый Структура;
        Сценарий1.Вставить("Ответы", Новый Массив);
        Сценарий1.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий1.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий1.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий1.Вставить("ОжидаемыйУзел", "кит");
        ТестовыеСценарии.Добавить(Сценарий1);
        
        Сценарий2 = Новый Структура;
        Сценарий2.Вставить("Ответы", Новый Массив);
        Сценарий2.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий2.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий2.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий2.Вставить("ОжидаемыйУзел", "акула");
        ТестовыеСценарии.Добавить(Сценарий2);
        
        Сценарий3 = Новый Структура;
        Сценарий3.Вставить("Ответы", Новый Массив);
        Сценарий3.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий3.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий3.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий3.Вставить("ОжидаемыйУзел", "рыба");
        ТестовыеСценарии.Добавить(Сценарий3);
        
        Сценарий4 = Новый Структура;
        Сценарий4.Вставить("Ответы", Новый Массив);
        Сценарий4.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий4.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий4.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий4.Вставить("ОжидаемыйУзел", "осьминог");
        ТестовыеСценарии.Добавить(Сценарий4);
        
        Сценарий5 = Новый Структура;
        Сценарий5.Вставить("Ответы", Новый Массив);
        Сценарий5.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий5.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий5.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий5.Вставить("ОжидаемыйУзел", "лев");
        ТестовыеСценарии.Добавить(Сценарий5);
        
        Сценарий6 = Новый Структура;
        Сценарий6.Вставить("Ответы", Новый Массив);
        Сценарий6.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий6.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий6.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий6.Вставить("ОжидаемыйУзел", "собака");
        ТестовыеСценарии.Добавить(Сценарий6);
        
        Сценарий7 = Новый Структура;
        Сценарий7.Вставить("Ответы", Новый Массив);
        Сценарий7.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий7.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий7.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Да);
        Сценарий7.Вставить("ОжидаемыйУзел", "птица");
        ТестовыеСценарии.Добавить(Сценарий7);
        
        Сценарий8 = Новый Структура;
        Сценарий8.Вставить("Ответы", Новый Массив);
        Сценарий8.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий8.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий8.Ответы.Добавить(Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Сценарий8.Вставить("ОжидаемыйУзел", "змея");
        ТестовыеСценарии.Добавить(Сценарий8);
        
        УспешноТестов = 0;
        ВсегоТестов = ТестовыеСценарии.Количество();
        
        Для Каждого Сценарий Из ТестовыеСценарии Цикл
            Попытка
                Сообщить("--- Тест сценария: " + Сценарий.ОжидаемыйУзел + " ---");
                
                // СОЗДАЕМ НОВЫЙ ШАБЛОН И ТЕСТ ДЛЯ КАЖДОГО СЦЕНАРИЯ
                Шаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
                Шаблон.Наименование = "Тест " + Сценарий.ОжидаемыйУзел;
                Шаблон.Записать();
                
                ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Шаблон);
                
                Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
                Тест.Дата = ТекущаяДата();
                Тест.ВремяНачалаТеста = ТекущаяДата();
                Тест.ШаблонТеста = Шаблон.Ссылка;
                
                ТестированиеБинарноеДерево.ЗаполнитьТестИзШаблона(Тест);
                ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
                Тест = Тест.Ссылка.ПолучитьОбъект();
                
                // ОБРАБАТЫВАЕМ ОТВЕТЫ ПО СЦЕНАРИЮ
                Для Каждого Ответ Из Сценарий.Ответы Цикл
                    ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Ответ);
                    Тест = Тест.Ссылка.ПолучитьОбъект();
                КонецЦикла;
                
                // ПРОВЕРЯЕМ РЕЗУЛЬТАТ
                Утвердить("Сценарий " + Сценарий.ОжидаемыйУзел + ": завершен", Тест.Завершен);
                Утвердить("Сценарий " + Сценарий.ОжидаемыйУзел + ": результат Сдан", 
                    Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан);
                Утвердить("Сценарий " + Сценарий.ОжидаемыйУзел + ": узел содержит '" + Сценарий.ОжидаемыйУзел + "'", 
                    СтрНайти(НРег(Тест.ТекущийУзелДерева.Наименование), НРег(Сценарий.ОжидаемыйУзел)) > 0);
                
                УспешноТестов = УспешноТестов + 1;
                Сообщить("   ✅ " + Сценарий.ОжидаемыйУзел + " - УСПЕХ");
                
            Исключение
                Сообщить("   ❌ " + Сценарий.ОжидаемыйУзел + " - ОШИБКА: " + ОписаниеОшибки());
            КонецПопытки;
        КонецЦикла;
        
        Сообщить("=== ИТОГИ КОМПЛЕКСНОГО ТЕСТА ===");
        Сообщить("   Успешно: " + УспешноТестов + " из " + ВсегоТестов);
        Сообщить("   Процент успеха: " + Окр(УспешноТестов / ВсегоТестов * 100, 1) + "%");
        
        Если УспешноТестов = ВсегоТестов Тогда
            Сообщить("✅ ВСЕ ТЕСТЫ ПРОЙДЕНЫ УСПЕШНО!");
        Иначе
            ВызватьИсключение "Не все тесты пройдены: " + УспешноТестов + "/" + ВсегоТестов;
        КонецЕсли;
        
    Исключение
        Сообщить("❌ КОМПЛЕКСНЫЙ ТЕСТ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Запускает все тесты бинарного дерева
Процедура ЗапуститьВсеТестыБинарногоДерева() Экспорт
    
    Сообщить("=========================================");
    Сообщить("ЗАПУСК ТЕСТОВ БИНАРНОГО ДЕРЕВА);");
    Сообщить("Тест_ПолныйЦиклБинарногоДерева();");
    Сообщить("Тест_ПолныйЦиклСЗавершением();");
    Сообщить("Тест_ВеткаНаземныхЖивотных();");
    Сообщить("Тест_ВсеОсновныеВетки();");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    // Запускаем тесты последовательно
    Тест_ПолныйЦиклБинарногоДерева();
    Тест_ПолныйЦиклСЗавершением();
    Тест_ВеткаНаземныхЖивотных();
    Тест_ВсеОсновныеВетки();
    Сообщить("ТЕСТЫ УСПЕШНО ЗАВЕРШЕНЫ!");
    Сообщить("=========================================");
    
КонецПроцедуры

// Для отладки модуля объекта

Процедура Тест_СозданиеДокумента_БезШаблона() Экспорт
    
    Сообщить("=== ТЕСТ: Создание документа без шаблона ===");
    
    Попытка
        // Пытаемся создать документ, не указывая шаблон
        // ОбработкаЗаполнения должна вызвать исключение
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.ОбработкаЗаполнения(Неопределено, Ложь); 
        
        // Если мы дошли сюда, тест провален
        Сообщить("❌ ТЕСТ ПРОВАЛЕН: Исключение не было вызвано при создании теста без шаблона.");
        Утвердить("Должно быть исключение", Ложь);
        
    Исключение
        // Ожидаемое поведение
        СообщениеОбОшибке = ОписаниеОшибки();
        Утвердить("Исключение вызвано", СтрНайти(СообщениеОбОшибке, "Шаблон теста не указан") > 0);
        Сообщить("✅ ТЕСТ ПРОЙДЕН: Система корректно требует указать шаблон.");
    КонецПопытки;
    
КонецПроцедуры

Процедура Тест_ЗаполнениеИзШаблона_БинарноеДерево() Экспорт
    
    Сообщить("=== ТЕСТ: Заполнение бинарного дерева из шаблона ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // 1. Создаем шаблон с разделами и вопросами
        Раздел = Справочники.Разделы.СоздатьЭлемент();
        Раздел.Наименование = "Тестовый раздел для дерева";
        Раздел.Записать();
        
        Вопрос1 = ТестированиеБинарноеДерево.СоздатьВопрос("Вопрос 1 из шаблона?", "Тест шаблона");
        НовСтр = Раздел.Вопросы.Добавить(); НовСтр.Вопрос = Вопрос1.Ссылка;
        Вопрос2 = ТестированиеБинарноеДерево.СоздатьВопрос("Вопрос 2 из шаблона?", "Тест шаблона");
        НовСтр = Раздел.Вопросы.Добавить(); НовСтр.Вопрос = Вопрос2.Ссылка;
        Раздел.Записать();
        
        Шаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
        Шаблон.Наименование = "Тестовый шаблон дерева";
        Шаблон.ТипТестирования = Перечисления.ТипыТестирования.БинарноеДерево;
        НовСтр = Шаблон.Разделы.Добавить();
        НовСтр.Раздел = Раздел.Ссылка;
        НовСтр.КоличествоВопросов = 2;
        Шаблон.Записать();

        // 2. Создаем документ на основании этого шаблона
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Заполнить(Шаблон.Ссылка); // Вызовет ОбработкуЗаполнения
        
        // 3. Анализируем созданную структуру
        // ПРЕДПОЛОЖЕНИЕ: Текущая логика создаст 2 несвязанных узла
        КоличествоКорневыхУзлов = 0;
        Для Каждого Строка Из Тест.СтруктураДереваТеста Цикл
            Если НЕ ЗначениеЗаполнено(Строка.РодительскийУзел) Тогда
                КоличествоКорневыхУзлов = КоличествоКорневыхУзлов + 1;
            КонецЕсли;
        КонецЦикла;
        
        Утвердить("Создано 2 узла в структуре", Тест.СтруктураДереваТеста.Количество() = 2);
        // Этот тест должен провалиться, если вы исправите логику, но сейчас он покажет проблему
        Утвердить("Оба узла являются корневыми (неправильно!)", КоличествоКорневыхУзлов = 2);
        
        Сообщить("✅ ТЕСТ ВЫЯВИЛ ПРОБЛЕМУ: Заполнение из шаблона создает несвязанную структуру.");
        
    Исключение
        Сообщить("❌ ТЕСТ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

//#### Тест 3: Восстановление состояния при открытии
//**Цель:** Проверить, что при открытии существующего, незавершенного теста его состояние (текущий узел) восстанавливается из регистра.
Процедура Тест_ВосстановлениеСостоянияИзРегистра() Экспорт
    
    Сообщить("=== ТЕСТ: Восстановление состояния из регистра ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // 1. Создаем и проходим один шаг теста
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Тест = Тест.Ссылка.ПолучитьОбъект(); // Перечитываем после обработки
        
        УзелДляСохранения = Тест.ТекущийУзелДерева;
        Утвердить("Тест пройден на 1 шаг", УзелДляСохранения.Наименование <> "Корневой узел - среда обитания");
        
        // 2. Эмулируем "закрытие и открытие" документа
        // Создаем новый объект документа по той же ссылке
        ВосстановленныйТестОбъект = Тест.Ссылка.ПолучитьОбъект();
        
        // 3. Проверяем, что состояние восстановилось (в `ОбработкаЗаполнения` при чтении)
        Утвердить("Текущий узел восстановлен из регистра", ВосстановленныйТестОбъект.ТекущийУзелДерева = УзелДляСохранения);
        
        Сообщить("✅ ТЕСТ ВОССТАНОВЛЕНИЯ СОСТОЯНИЯ ПРОЙДЕН");

    Исключение
        Сообщить("❌ ТЕСТ ВОССТАНОВЛЕНИЯ СОСТОЯНИЯ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

Процедура ВывестиВсеЗначенияПеречислений() Экспорт
    
    Для Каждого Перечисление Из Метаданные.Перечисления Цикл
        
        Сообщить(Перечисление.Имя + ":");
        
        Для Каждого ЗначениеПеречисления Из Перечисление.ЗначенияПеречисления Цикл
            Сообщить("  " + ЗначениеПеречисления.Имя);
        КонецЦикла;
        
        Сообщить("");
        
    КонецЦикла;
    
КонецПроцедуры

// Тест для проверки загрузки структуры из шаблона
Процедура Тест_ЗагрузкаСтруктурыИзШаблона() Экспорт
    
    Сообщить("=== ТЕСТ ЗАГРУЗКИ СТРУКТУРЫ ИЗ ШАБЛОНА ===");
    
    Попытка
        // ПОДГОТОВКА ШАБЛОНА
        Шаблон = Справочники.ШаблоныБинарныхДеревьев.СоздатьЭлемент();
        Шаблон.Наименование = "Тест загрузки структуры";
        Шаблон.Записать();
        Сообщить("Создан шаблон: " + Шаблон.Наименование + " (" + Шаблон.Ссылка + ")");
        
        // СОЗДАЕМ СТРУКТУРУ В РЕГИСТРЕ ДЛЯ ШАБЛОНА
        ТестированиеБинарноеДерево.СоздатьДеревоУгадайЖивотное(Шаблон);
        
        // ПРОВЕРЯЕМ ДАННЫЕ В РЕГИСТРЕ ПРЯМЫМ ЗАПРОСОМ
        Сообщить("=== ПРОВЕРКА РЕГИСТРА ===");
        ЗапросРегистр = Новый Запрос;
        ЗапросРегистр.Текст = 
            "ВЫБРАТЬ
            |    СтруктураБинарногоДерева.ШаблонТеста,
            |    СтруктураБинарногоДерева.РодительскийУзел,
            |    СтруктураБинарногоДерева.ТипОтвета,
            |    СтруктураБинарногоДерева.СледующийУзелДерева
            |ИЗ
            |    РегистрСведений.СтруктураБинарногоДерева КАК СтруктураБинарногоДерева
            |ГДЕ
            |    СтруктураБинарногоДерева.ШаблонТеста = &ШаблонТеста";
            
        ЗапросРегистр.УстановитьПараметр("ШаблонТеста", Шаблон.Ссылка);
        РезультатРегистр = ЗапросРегистр.Выполнить();
        ВыборкаРегистр = РезультатРегистр.Выбрать();
        
        КоличествоВРегистре = 0;
        Пока ВыборкаРегистр.Следующий() Цикл
            КоличествоВРегистре = КоличествоВРегистре + 1;
            Сообщить("Запись в регистре: " + 
                "Родитель=" + ?(ВыборкаРегистр.РодительскийУзел = Неопределено, "КОРЕНЬ", ВыборкаРегистр.РодительскийУзел.Наименование) +
                ", ТипОтвета=" + ВыборкаРегистр.ТипОтвета + 
                ", СледующийУзел=" + ?(ВыборкаРегистр.СледующийУзелДерева = Неопределено, "НЕОПР", ВыборкаРегистр.СледующийУзелДерева.Наименование));
        КонецЦикла;
        Сообщить("Всего записей в регистре: " + КоличествоВРегистре);
        
        // ПОДГОТОВКА ТЕСТА
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        Тест.ШаблонТеста = Шаблон.Ссылка;
        Сообщить("Создан тест с шаблоном: " + Тест.ШаблонТеста.Наименование);
        
        // ЗАГРУЖАЕМ СТРУКТУРУ ИЗ РЕГИСТРА В ТЕСТ
        Сообщить("=== ЗАГРУЗКА СТРУКТУРЫ В ТЕСТ ===");
        ТестированиеБинарноеДерево.ЗаполнитьТестИзШаблона(Тест);
        
        // ПРОВЕРЯЕМ РЕЗУЛЬТАТ
        Сообщить("Количество строк в структуре теста: " + Тест.СтруктураДереваТеста.Количество());
        
        Если Тест.СтруктураДереваТеста.Количество() = 0 Тогда
            Сообщить("ДИАГНОСТИКА: Структура не загружена!");
            // Проверяем, что возвращает запрос в ЗаполнитьТестИзШаблона
            ЗапросДиагностика = Новый Запрос;
            ЗапросДиагностика.Текст = 
                "ВЫБРАТЬ
                |    Структура.РодительскийУзел,
                |    Структура.ТипОтвета КАК ТипСвязи,
                |    Структура.СледующийУзелДерева КАК УзелДерева,
                |    УзелСправочник.Вопрос,
                |    УзелСправочник.Уровень,
                |    УзелСправочник.ЯвляетсяЛистом
                |ИЗ
                |    РегистрСведений.СтруктураБинарногоДерева КАК Структура
                |        ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УзлыБинарногоДерева КАК УзелСправочник
                |        ПО Структура.СледующийУзелДерева = УзелСправочник.Ссылка
                |ГДЕ
                |    Структура.ШаблонТеста = &ШаблонТеста";
                
            ЗапросДиагностика.УстановитьПараметр("ШаблонТеста", Шаблон.Ссылка);
            РезультатДиагностика = ЗапросДиагностика.Выполнить();
            Сообщить("Диагностический запрос вернул: " + РезультатДиагностика.Выбрать().Количество() + " записей");
        КонецЕсли;
        
        Утвердить("Структура загружена", Тест.СтруктураДереваТеста.Количество() > 0);
        
        Если Тест.СтруктураДереваТеста.Количество() > 0 Тогда
            Утвердить("Корневой узел существует", ТестированиеБинарноеДерево.НайтиКорневойУзел(Тест) <> Неопределено);
            Сообщить("✅ ТЕСТ ЗАГРУЗКИ СТРУКТУРЫ ПРОЙДЕН УСПЕШНО!");
            Сообщить("   Загружено узлов: " + Тест.СтруктураДереваТеста.Количество());
        КонецЕсли;
        
    Исключение
        Сообщить("❌ ТЕСТ ЗАГРУЗКИ СТРУКТУРЫ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Тест навигации по дереву и обновления счетчика
Процедура Тест_ПолнаяНавигацияИСчетчик() Экспорт
    
    Сообщить("=== ТЕСТ: ПОЛНАЯ НАВИГАЦИЯ И СЧЕТЧИК ВОПРОСОВ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // Создаем тест с полной структурой дерева
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        // Создаем полную структуру дерева с двумя ветками
        СоздатьПолноеДеревоСВетками(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        // Проверяем начальное состояние
        Сообщить("=== НАЧАЛЬНОЕ СОСТОЯНИЕ ===");
        Утвердить("Начальное количество вопросов = 0", Тест.КоличествоВопросов = 0);
        Утвердить("Текущий узел установлен", Тест.ТекущийУзелДерева <> Неопределено);
        Утвердить("Корневой узел", Тест.ТекущийУзелДерева.Наименование = "Корневой узел");
        
        // Шаг 1: Ответ "Нет" - переход к дочернему узлу
        Сообщить("=== ШАГ 1: ОТВЕТ 'НЕТ' ===");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("Счетчик = 1 после первого ответа", Тест.КоличествоВопросов = 1);
        Утвердить("Переход к дочернему узлу", Тест.ТекущийУзелДерева.Наименование = "Дочерний узел Нет");
        Утвердить("Тест не завершен", Тест.Завершен = Ложь);
        Утвердить("Процент < 100", Тест.ПроцентЗавершения < 100);
        
        // Шаг 2: Ответ "Да" - переход к листовому узлу
        Сообщить("=== ШАГ 2: ОТВЕТ 'ДА' ===");
        ТестированиеБинарноеДерево.ОбработатьОтвет(Тест.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да);
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Утвердить("Счетчик = 2 после второго ответа", Тест.КоличествоВопросов = 2);
        Утвердить("Тест завершен", Тест.Завершен = Истина);
        Утвердить("Результат = Сдан", Тест.РезультатСдачи = Перечисления.РезультатыСдачи.Сдан);
        Утвердить("Процент = 100", Тест.ПроцентЗавершения = 100);
        Утвердить("Время завершения установлено", Тест.ВремяЗавершения <> Неопределено);
        
        // Проверяем табличные части
        Утвердить("Ответы записаны", Тест.ОтветыБинарногоДерева.Количество() = 2);
        Утвердить("Вопросы записаны", Тест.ВопросыБинарногоДерева.Количество() = 2);
        
        Сообщить("✅ ТЕСТ ПОЛНОЙ НАВИГАЦИИ И СЧЕТЧИКА ВОПРОСОВ ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ ПОЛНОЙ НАВИГАЦИИ И СЧЕТЧИКА ВОПРОСОВ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// Создает полное дерево с двумя ветками для тестирования навигации
Процедура СоздатьПолноеДеревоСВетками(Тест) Экспорт
    
    Тест.СтруктураДереваТеста.Очистить();
    
    // Создаем узлы
    ВопросКорневой = ТестированиеБинарноеДерево.СоздатьВопрос("Корневой вопрос?", "Тест навигации");
    УзелКорневой = ТестированиеБинарноеДерево.СоздатьУзелДерева("Корневой узел", "Тест навигации", Ложь, 0);
    
    // Ветка "Нет"
    ВопросДочернийНет = ТестированиеБинарноеДерево.СоздатьВопрос("Дочерний вопрос (Нет)?", "Тест навигации");
    УзелДочернийНет = ТестированиеБинарноеДерево.СоздатьУзелДерева("Дочерний узел Нет", "Тест навигации", Ложь, 1);
    
    ВопросЛистНет = ТестированиеБинарноеДерево.СоздатьВопрос("Листовой вопрос (Нет)?", "Тест навигации");
    УзелЛистНет = ТестированиеБинарноеДерево.СоздатьУзелДерева("Листовой узел Нет", "Тест навигации", Истина, 2);
    
    // Ветка "Да" 
    ВопросДочернийДа = ТестированиеБинарноеДерево.СоздатьВопрос("Дочерний вопрос (Да)?", "Тест навигации");
    УзелДочернийДа = ТестированиеБинарноеДерево.СоздатьУзелДерева("Дочерний узел Да", "Тест навигации", Ложь, 1);
    
    ВопросЛистДа = ТестированиеБинарноеДерево.СоздатьВопрос("Листовой вопрос (Да)?", "Тест навигации");
    УзелЛистДа = ТестированиеБинарноеДерево.СоздатьУзелДерева("Листовой узел Да", "Тест навигации", Истина, 2);
    
    // Создаем связи в табличной части
    
    // Корневой узел
    ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, Неопределено, Неопределено, УзелКорневой, ВопросКорневой, Ложь);
    
    // Ветка "Нет"
    ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, УзелКорневой.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Нет, УзелДочернийНет, ВопросДочернийНет, Ложь);
    ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, УзелДочернийНет.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да, УзелЛистНет, ВопросЛистНет, Истина);
    
    // Ветка "Да"
    ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, УзелКорневой.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да, УзелДочернийДа, ВопросДочернийДа, Ложь);
    ТестированиеБинарноеДерево.ЗаписатьУзелДереваВТест(Тест, УзелДочернийДа.Ссылка, Перечисления.ТипыОтветовБинарногоДерева.Да, УзелЛистДа, ВопросЛистДа, Истина);
    
    Сообщить("Создано полное дерево с двумя ветками для тестирования навигации");
    
КонецПроцедуры

// Диагностический тест для отладки очистки состояния
Процедура Тест_ДиагностикаОчисткиСостояния() Экспорт
    
    Сообщить("=== ДИАГНОСТИКА: ОЧИСТКА СОСТОЯНИЯ ===");
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    
    Попытка
        // 1. Создаем тест
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        СоздатьМинимальноеДеревоДляТеста(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        Сообщить("1. После инициализации:");
        Сообщить("   Текущий узел: " + Тест.ТекущийУзелДерева.Наименование);
        
        // 2. Пытаемся очистить разными способами
        Сообщить("2. Пытаемся очистить состояние...");
        
        // Способ 1: Прямое присвоение
        Тест.ТекущийУзелДерева = Неопределено;
        Сообщить("   После прямого присвоения: " + ?(Тест.ТекущийУзелДерева = Неопределено, "Неопределен", "ОШИБКА: " + Тест.ТекущийУзелДерева.Наименование));
        
        // Сохраняем
        Тест.Записать();
        Тест = Тест.Ссылка.ПолучитьОбъект();
        Сообщить("   После сохранения и перезагрузки: " + ?(Тест.ТекущийУзелДерева = Неопределено, "Неопределен", "ОШИБКА: " + Тест.ТекущийУзелДерева.Наименование));
        
        // Способ 2: Через повторную инициализацию с очисткой
        Если Тест.ТекущийУзелДерева <> Неопределено Тогда
            Сообщить("3. Пробуем способ 2 - полная очистка...");
            Тест.ТекущийУзелДерева = Неопределено;
            Тест.КоличествоВопросов = 0;
            Тест.Завершен = Ложь;
            Тест.ПроцентЗавершения = 0;
            Тест.ОтветыБинарногоДерева.Очистить();
            Тест.ВопросыБинарногоДерева.Очистить();
            
            Тест.Записать();
            Тест = Тест.Ссылка.ПолучитьОбъект();
            Сообщить("   После полной очистки: " + ?(Тест.ТекущийУзелДерева = Неопределено, "Неопределен", "ОШИБКА: " + Тест.ТекущийУзелДерева.Наименование));
        КонецЕсли;
        
        // 4. Проверяем, не вызывается ли где-то автоматическое восстановление
        Если Тест.ТекущийУзелДерева <> Неопределено Тогда
            Сообщить("4. Обнаружена проблема: узел автоматически восстанавливается!");
            Сообщить("   Проверяем, не вызывается ли ИнициализироватьБинарноеДеревоДляТеста...");
            
            // Создаем полностью новый тест
            НовыйТест = Документы.ТестБинарноеДерево.СоздатьДокумент();
            НовыйТест.Дата = ТекущаяДата();
            НовыйТест.ВремяНачалаТеста = ТекущаяДата();
            
            // Только создаем структуру, НЕ инициализируем
            СоздатьМинимальноеДеревоДляТеста(НовыйТест);
            НовыйТест.Записать();
            НовыйТест = НовыйТест.Ссылка.ПолучитьОбъект();
            
            Сообщить("   Новый тест (без инициализации): " + ?(НовыйТест.ТекущийУзелДерева = Неопределено, "Неопределен ✓", "ОШИБКА: установлен"));
        КонецЕсли;
        
    Исключение
        Сообщить("❌ ДИАГНОСТИКА ОЧИСТКИ ПРОВАЛЕНА: " + ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

// В модуле ТестированиеУтверждения - полностью обновленный тест
Процедура Тест_РаботаСРегистрами2() Экспорт
    Сообщить("=== ТЕСТ: РАБОТА С РЕГИСТРАМИ (ОБНОВЛЕННЫЙ) ===");
    
    // ⭐ ОЧИСТКА ВСЕГО
    ТестированиеБинарноеДерево.ОчиститьТестовыеДанныеПолностью();
    ТестированиеБинарноеДерево.ОчиститьРегистрСостоянияПолностью();
    
    Попытка
        // 1. Создаем тест
        Тест = Документы.ТестБинарноеДерево.СоздатьДокумент();
        Тест.Дата = ТекущаяДата();
        Тест.ВремяНачалаТеста = ТекущаяДата();
        
        // Создаем минимальное дерево для теста
        СоздатьМинимальноеДеревоДляТеста(Тест);
        ТестированиеБинарноеДерево.ИнициализироватьБинарноеДеревоДляТеста(Тест);
        
        // Записываем тест
        Тест.Записать(РежимЗаписиДокумента.Запись);
        Сообщить("Тест создан и записан");
        
        ОригинальныйУзел = Тест.ТекущийУзелДерева;
        Сообщить("Исходный узел: " + ОригинальныйУзел.Наименование);
        
        // 2. Сохраняем состояние через общий модуль
        Сообщить("--- Сохраняем в регистры ---");
        ТестированиеБинарноеДерево.СохранитьСостояниеТестаВРегистр(Тест);
        
        // ⭐ ПРОВЕРКА: Убедимся что сохранение прошло
        Сообщить("--- Проверка сохранения ---");
        ТестированиеБинарноеДерево.ПроверитьВсеЗаписиВРегистреСостояния();
        
        // 3. Очищаем состояние в тесте
        Сообщить("--- Очищаем состояние в тесте ---");
        Тест.ТекущийУзелДерева = Неопределено;
        Тест.Записать(РежимЗаписиДокумента.Запись);
        
        // Перезагружаем объект
        Тест = Тест.Ссылка.ПолучитьОбъект();
        СостояниеОчищено = (Тест.ТекущийУзелДерева = Неопределено) ИЛИ (Тест.ТекущийУзелДерева.Пустая());
        Сообщить("После очистки: " + ?(СостояниеОчищено, "Очищено ✓", "Не очищено"));
        Утвердить("Состояние очищено", СостояниеОчищено);
        
        // 4. Восстанавливаем через общий модуль
        Сообщить("--- Восстанавливаем из регистров ---");
        ТестированиеБинарноеДерево.ВосстановитьСостояниеТестаИзРегистра(Тест);
        
        // Перезагружаем объект после восстановления
        Тест = Тест.Ссылка.ПолучитьОбъект();
        
        СостояниеВосстановлено = (Тест.ТекущийУзелДерева <> Неопределено) И (НЕ Тест.ТекущийУзелДерева.Пустая());
        Сообщить("После восстановления: " + ?(СостояниеВосстановлено, Тест.ТекущийУзелДерева.Наименование, "Не восстановлено"));
        
        Утвердить("Состояние восстановлено", СостояниеВосстановлено);
        
        Если СостояниеВосстановлено Тогда
            Утвердить("Корректный узел", Тест.ТекущийУзелДерева = ОригинальныйУзел);
        КонецЕсли;
        
        Сообщить("✅ ТЕСТ РАБОТЫ С РЕГИСТРАМИ ПРОЙДЕН");
        
    Исключение
        Сообщить("❌ ТЕСТ РАБОТЫ С РЕГИСТРАМИ ПРОВАЛЕН: " + ОписаниеОшибки());
    КонецПопытки;
КонецПроцедуры

// Вспомогательная процедура для создания минимального дерева (должна быть в этом же модуле)
Процедура СоздатьМинимальноеДеревоДляТеста(Тест) Экспорт
    // Используем функции из общего модуля для создания структуры дерева
    ТестированиеБинарноеДерево.СоздатьМинимальноеДеревоДляТеста(Тест);
КонецПроцедуры

#КонецОбласти

//ТестированиеБинарноеДерево.Тест_КоличествоОтветовПовышается();
//ТестированиеБинарноеДерево.Тест_КоличествоОтветовПовышается_Минимальная();

//1. ТестированиеБинарноеДерево.ДиагностикаТабличнойЧасти();
//2. ТестированиеБинарноеДерево.Тест_КоличествоОтветовРастетСКаждымОтветом();
//3. ТестированиеБинарноеДерево.Тест_ПолныйЦиклБинарногоДерева();
//4. ТестированиеБинарноеДерево.Тест_ФинальнаяПроверка();

//ТестированиеБинарноеДерево.Тест_БазовыеФункцииДерева();
//ТестированиеБинарноеДерево.Тест_ПостроениеДерева();

//ТестированиеБинарноеДерево.Тест_СозданиеСвязи();
//ТестированиеБинарноеДерево.Тест_ПоискСледующегоУзла();
//ТестированиеБинарноеДерево.Тест_НавигацияПоДереву();
//ТестированиеБинарноеДерево.Тест_ОбновлениеСчетчикаВопросов()
//ТестированиеБинарноеДерево.Тест_ПолнаяПроверкаБинарногоДерева();
//ТестированиеБинарноеДерево.ЗапуститьВсеТесты();
//ТестированиеБинарноеДерево.Тест_НавигацияПоДереву_Упрощенный();
//ТестированиеБинарноеДерево.ЗапуститьПолнуюДиагностику();
//ТестированиеБинарноеДерево.Тест_ЗавершениеТестаПриЛистовомУзле();
//ТестированиеБинарноеДерево.Тест_БазаЗнанийОбновление();
//ТестированиеБинарноеДерево.Тест_JSONОшибки();
//ТестированиеБинарноеДерево.Тест_ЦелостностьМалыхОбъемов();
//ТестированиеБинарноеДерево.Тест_ПроблемныеВопросы();
//ТестированиеБинарноеДерево.Тест_ПолныйЦиклБинарногоДерева();
//ТестированиеБинарноеДерево.ЗапуститьВсеТестыБинарногоДерева();
//ТестированиеБинарноеДерево.Тест_СозданиеДокумента_БезШаблона();


//==================================
//ТестированиеУтверждения.ВывестиВсеЗначенияПеречислений();

//ТестированиеУтверждения.Тест_ВсеОсновныеВетки_ПослеРефакторинга()
//ТестированиеУтверждения.ЗапуститьВсеТестыБинарногоДерева();

//ТестированиеУтверждения.Тест_ЗагрузкаСтруктурыИзШаблона()

//ТестированиеУтверждения.ЗапуститьВсеТесты();
//ТестированиеУтверждения.Тест_НавигацияПоДереву();
//ТестированиеУтверждения.Тест_ОбновлениеСчетчикаВопросов();
//ТестированиеУтверждения.Тест_ПолнаяНавигацияИСчетчик();
//ТестированиеУтверждения.Тест_ДиагностикаОчисткиСостояния();
//ТестированиеУтверждения.Тест_РаботаСРегистрами();
//ТестированиеУтверждения.Тест_РаботаСРегистрами2();